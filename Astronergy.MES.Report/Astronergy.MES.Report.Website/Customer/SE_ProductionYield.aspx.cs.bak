using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using DevExpress.Web.ASPxGridView;
using DevExpress.Web.ASPxEditors;
using Astronergy.MES.Report.DataAccess;
using DevExpress.XtraCharts;
using DevExpress.XtraCharts.Web;
using System.Collections.Generic;
using System.Drawing;
using DevExpress.Web.ASPxGridView.Export;
using System.Threading;
using DevExpress.Web.ASPxGridView.Rendering;

/// <summary>
/// SE 生产良率报表
/// </summary>
public partial class Customer_SE_ProductionYield : BasePage
{
    /// <summary>
    /// 页面载入事件。
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            BindRoomData();
            BindCustomerType();
            DateTime dtNow = CommonFunction.GetCurrentDateTime();
            this.dateStart.Date = DateTimeHelper.GetWeekFirstDayMon(dtNow);
            this.dateEnd.Date = DateTimeHelper.GetWeekLastDaySun(dtNow);
        }
    }
    /// <summary>
    /// 工厂车间。
    /// </summary>
    private void BindRoomData()
    {
        DataTable dtWorkPlace = CommonFunction.GetFactoryWorkPlace();
        this.cmbWorkPlace.DataSource = dtWorkPlace;
        this.cmbWorkPlace.DataBind();
        this.cmbWorkPlace.Items.Insert(0, new ListEditItem("ALL", "ALL"));
        this.cmbWorkPlace.SelectedIndex = 0;
    }
    /// <summary>
    /// 绑定客户类别。
    /// </summary>
    private void BindCustomerType()
    {
        DataTable dtCustomerType = CommonFunction.GetCustomerType();
        ASPxListBox lst = this.ddeCustomerType.FindControl("lstCustomerType") as ASPxListBox;
        if (lst != null)
        {
            lst.DataSource = dtCustomerType;
            lst.TextField = "CUSTOMER_TYPE";
            lst.ValueField = "CUSTOMER_TYPE";
            lst.DataBind();
            lst.Items.Insert(0, new ListEditItem("ALL", "ALL"));
        }
        
    }
    /// <summary>
    /// 查询SE 生产良率数据。
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void btnQuery_Click(object sender, EventArgs e)
    {
        DataTable dtData = null;
        if (GetData(out dtData))
        {
            this.grid.Columns.Clear();
            this.grid.AutoGenerateColumns = true;
            this.grid.DataSource = dtData.DefaultView;
            this.grid.DataBind();
            this.grid.AutoGenerateColumns = false;
            this.UpdatePanelResult.Update();
        }
    }

    public bool GetData(out DataTable dt)
    {
        dt = null;
        if (string.IsNullOrEmpty(this.dateStart.Text)
            || string.IsNullOrEmpty(this.dateEnd.Text))
        {
            return false;
        }
        if ((this.dateEnd.Date - this.dateStart.Date).TotalDays < 0
            || (this.dateEnd.Date - this.dateStart.Date).TotalDays > 31)
        {
            return false;
        }
        string roomName = this.cmbWorkPlace.Text;
        string customer = this.ddeCustomerType.Text.Trim();
        string workOrderNo = this.txtWorkOrderNumber.Text;
        string partNumber = this.textPartNumber.Text.ToString().Trim();

        string startTime = this.dateStart.Date.ToString("yyyy-MM-dd");
        string endTime = this.dateEnd.Date.ToString("yyyy-MM-dd");

        if (roomName.ToUpper() == "ALL") roomName = string.Empty;
        if (customer.ToUpper() == "ALL") customer = string.Empty;

        DataSet ds = SEReportDataAccess.GetSEProductionYieldData(startTime, endTime, roomName, workOrderNo, partNumber, customer);
        dt = ds.Tables[0];
        Cache[Session.SessionID + "_SEProductionYield"] = dt;
        return true;
    }

    /// <summary>
    /// 导出EXCEL。
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void btnXlsExport_Click(object sender, EventArgs e)
    {
        DataTable dt = Cache[Session.SessionID + "_SEProductionYield"] as DataTable;
        if (dt == null)
        {
            if (!GetData(out dt))
            {
                return;
            }
        }
        Response.Clear();
        Response.Buffer = true;
        Response.Charset = "utf-8";
        Response.ContentEncoding = System.Text.Encoding.GetEncoding("utf-8");
        Response.AppendHeader("content-disposition", "attachment;filename=\"SEProductionYield.xls\"");
        Response.ContentType = "Application/ms-excel";
        Export.ExportToSEProductionYieldExcel(Response.OutputStream, dt);
        Response.Flush();
        Response.Close();
        Response.End();
    }
    /// <summary>
    /// 自定义文本。
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void grid_CustomColumnDisplayText(object sender, ASPxGridViewColumnDisplayTextEventArgs e)
    {
        DataView dv = grid.DataSource as DataView;
        if (dv != null && e.Column.Index>3)
        {
            string itemName = Convert.ToString(dv[e.VisibleRowIndex]["ItemName"]);
            if (string.IsNullOrEmpty(itemName) || itemName == "Yield") {
                double val = Convert.ToDouble(e.Value);
                e.DisplayText = val.ToString("#0.##%");
                
            }
        }
    }

    /// <summary>
    /// 行创建时触发事件，用于合并单元格。
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void grid_HtmlRowCreated(object sender, ASPxGridViewTableRowEventArgs e)
    {
        DataView dv = grid.DataSource as DataView;
        if (e.RowType == GridViewRowType.Data && dv != null)
        {
            if(e.VisibleIndex==0)
            {
                TableRow targetHeader = e.Row;
                SplitTableHeader(targetHeader, dv);
            }

            string station = Convert.ToString(dv[e.VisibleIndex]["Station"]);
            string type = Convert.ToString(dv[e.VisibleIndex]["Type"]);
            string preStation = string.Empty;
            if (e.VisibleIndex > 0)
            {
                preStation = Convert.ToString(dv[e.VisibleIndex - 1]["Station"]);
            }
            //合并工序单元格。
            if (station != preStation)
            {
                int mergeTypeCellCount = dv.Table.Select(string.Format("Station='{0}' AND Type={1}", station,type)).Count();
                e.Row.Cells[0].RowSpan = mergeTypeCellCount;
            }
            else
            {
                e.Row.Cells[0].Visible = false;
            }
        }
    }

    void SplitTableHeader(TableRow targetHeader, DataView dvSource)
    {
        if (dvSource == null) return;
        Table table = targetHeader.Parent as Table;
        table.Rows.RemoveAt(0);
        int row=2;
        int col = dvSource.Table.Columns.Count;
        for (int k = 0; k < row; k++)
        {
            TableRow trow = new TableRow();
            trow.Height = 20;
            for (int i = 0; i < col;i++)
            {
                DataColumn dc=dvSource.Table.Columns[i];
                TableCell cell = new TableCell();
                cell.CssClass = "dxgvHeader";
                cell.Style.Add(HtmlTextWriterStyle.TextAlign, "center");
                cell.Style.Add(HtmlTextWriterStyle.BorderCollapse, "collapse");
                cell.Style.Add("BORDER-LEFT-WIDTH", "0px");
                cell.Style.Add("BORDER-TOP-WIDTH", "0px");
                if (k == 0 && (i == 1 || i==3))
                {
                    cell.RowSpan = 2;
                    cell.Text = dc.Caption;
                    trow.Cells.Add(cell);
                }
                else if (i> 3)
                {
                    if (k == 0)
                    {
                        if (dc.ColumnName.StartsWith("WK"))
                        {
                            cell.RowSpan = 2;
                            cell.Text = dc.ColumnName;
                        }
                        else
                        {
                            cell.Text = Enum.GetName(typeof(DayOfWeek), 
                                                    DateTime.Parse(dc.ColumnName).DayOfWeek);
                        }
                        trow.Cells.Add(cell);
                    }
                    else if (k == 1)
                    {
                        if (!dc.ColumnName.StartsWith("WK"))
                        {
                            cell.Text = DateTime.Parse(dc.ColumnName).ToString("dd-MM");
                            trow.Cells.Add(cell);
                        }
                    }
                }
            }
            table.Rows.AddAt(k, trow);
        }
    }  
    /// <summary>
    /// 导出数据时重新设置文本值。
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void exporter_RenderBrick(object sender, ASPxGridViewExportRenderingEventArgs e)
    {
    }
    /// <summary>
    /// 数据绑定时触发事件。
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void grid_DataBound(object sender, EventArgs e)
    {
        ASPxGridView gv = sender as ASPxGridView;
        if (gv != null && gv.Columns.Count > 1)
        {
            gv.Columns[0].Visible = false;
            gv.Columns[2].Visible = false;
        }
    }
}

