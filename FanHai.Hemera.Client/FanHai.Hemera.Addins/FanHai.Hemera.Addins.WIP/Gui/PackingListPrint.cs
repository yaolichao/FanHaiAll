using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using FanHai.Hemera.Utils.Entities;
using FanHai.Gui.Core;
using Microsoft.Office.Interop.Excel;
using System.Drawing.Printing;
using FanHai.Hemera.Utils.Barcode;
using FanHai.Hemera.Utils.Controls;
using FanHai.Hemera.Share.Constants;
using FanHai.Hemera.Utils.Common;
using System.Collections;
using FanHai.Hemera.Addins.WIP.Report;
using ZXing;
using System.IO;
using System.Drawing.Drawing2D;

namespace FanHai.Hemera.Addins.WIP.Gui
{
    public partial class PackingListPrint : BaseUserCtrl
    {
        IVTestDataEntity IVTestDateObject = new IVTestDataEntity();

        public DataSet ds42, dsCommon, dsConergy, dsSchueco, dsJapan, dsSunEdisonList, PPSMasterdsTable;
        string sPalletNo, _PrintStyle = "ManualPrint";
        int _sunFarmingFlag = 0;

        //用于打印内容自动识别手动打印还是自动打印
        //public string _PrintStyle
        //{
        //    get;
        //    set;
        //}
        //打印托号来自自动还是手动
        public string _PalletNo
        {
            get;
            set;
        }

        //质量等级
        public string _QuanlityGrade
        {
            get;
            set;
        }

        //构造函数 qym
        public PackingListPrint()
        {
            InitializeComponent();
            InitializeLanguage();
        }


        private void InitializeLanguage()
        {

            //this.labelControl1.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl1}");// "包装清单打印";
            this.xtraTabPage4.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage4}");// "PPS清单";
            this.btnShuangBo33.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnShuangBo33}");// "双玻";
            this.btnAnNeng.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnAnNeng}");// "安能";
            this.btnMologe.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnMologe}");// "摩洛哥";
            this.btnQrCode.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnQrCode}");// "二维码";
            this.btnNeNew03.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnNeNew03}");// "NE(最新)";
            this.btnNeNew02.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnNeNew02}");// "NE(非PERC)";
            this.btnNeNew.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnNeNew}");// "NE";
            this.btnNERFlashList.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnNERFlashList}");// "NE(Old)（隐藏）";
            this.sbtnMEMCNew.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.sbtnMEMCNew}");// "MEMC(1)（隐藏）";
            this.simpleButton1.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton1}");// "Conergy(3)（隐藏）";
            this.btnConergy2.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnConergy2}");// "Conergy(2)（隐藏）";
            this.btnNPowerPrint.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnNPowerPrint}");// "不体现功率";
            this.btnConergyPint.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnConergyPint}");// "Conergy（隐藏）";
            this.btnPowerPrint.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnPowerPrint}");// "体现功率";
            this.groupControl1.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.groupControl1}");// "质量等级版本";
            this.labelControl3.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl3}");// "组件数量：";
            this.chCustNo.Properties.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.chCustNo}");// "体现客户条码";
            this.labelControl2.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl2}");// "托号：";
            this.labelControl15.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl15}");// "组件序列号：";
            this.sbtnSunEdisonImport.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.sbtnSunEdisonImport}");// "Excel导出";
            this.labelControl16.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl16}");// "产品ID：";
            this.labelControl17.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl17}");// "产品料号：";
            this.labelControl13.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl13}");// "结束时间：";
            this.labelControl14.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl14}");// "产品等级：";
            this.labelControl12.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl12}");// "开始时间：";
            this.labelControl11.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl11}");// "工单号：";
            this.sbtSunEdisonQuery.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.sbtSunEdisonQuery}");// "查询";
            this.xtraTabPage5.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage5}");// "日本包装清单";
            this.gridColumn37.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.gridColumn37}");// "外観";
            this.gridColumn38.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.gridColumn38}");// "判定";
            this.simpleButton2.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton2}");// "打印";
            this.sbtnJapanOut.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.sbtnJapanOut}");// "Excel导出";
            this.labelControl7.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl7}");// "托号：";
            this.sbtnJapanQuery.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.sbtnJapanQuery}");// "查询";
            this.xtraTabPage1.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage1}");// "Conergy包装清单";
            this.btnConPrint.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnConPrint}");// "打印";
            this.btnConExcel.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnConExcel}");// "Excel导出";
            this.labelControl5.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl5}");// "托号：";
            this.btnConQuery.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnConQuery}");// "查询";
            this.xtraTabPage2.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage2}");// "Schueco包装清单";
            this.btnSchPrint.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnSchPrint}");// "打印";
            this.btnSchExcel.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnSchExcel}");// "Excel导出";
            this.btnSchQuery.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnSchQuery}");// "查询";
            this.labelControl6.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl6}");// "托号：";
            this.xtraTabPage3.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage3}");// "Common包装清单";
            this.sbtCommon.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.sbtCommon}");// "Excel导出综合";
            this.btnComExcelNew.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnComExcelNew}");// "Excel导出New";
            this.btnComPrint.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnComPrint}");// "打印";
            this.btnComExcel.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnComExcel}");// "Excel导出Old";
            this.labelControl4.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl4}");// "托号：";
            this.btnComQuery.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnComQuery}");// "查询";
            this.xtraTabPage7.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage7}");// "STS清单";
            this.btnComExcelSTS.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnComExcelSTS}");// "Excel导出Old";
            this.labelControl19.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl19}");// "托号：";
            this.btnComQuerySTS.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnComQuerySTS}");// "查询";
            this.xtraTabPage8.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage8}");// "马来组件";
            this.GroupId.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.GroupId}");// "组序号";
            this.PalletNo01.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.PalletNo01}");// "托号";
            this.ContainerNo.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.ContainerNo}");// "集装箱号";
            this.Type01.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Type01}");// "型号";
            this.LotNumber01.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.LotNumber01}");// "序列号";
            this.wo01.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.wo01}");// "工单号";
            this.ProductionDate01.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.ProductionDate01}");// "生产日期";
            this.JunctionBox.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.JunctionBox}");// "接线盒";
            this.ShippingDate.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.ShippingDate}");// "出货日期";
            this.labelControl29.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl29}");// "工单料号：";
            this.labelControl28.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl28}");// "工单号：";
            this.labelControl22.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl22}");// "班别：";
            this.btnMlaiSelect.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnMlaiSelect}");// "查询";
            this.labelControl20.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl20}");// "托盘号：";
            this.labelControl21.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl21}");// "组件数量：";
            this.xtraTabPage9.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage9}");// "功率标签";
            this.checkPallet.Properties.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.checkPallet}");// "是否为托号";
            this.labelControl27.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl27}");// "上下调整：";
            this.labelControl26.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl26}");// "左右调整：";
            this.smbtPrintMalai.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.smbtPrintMalai}");// "打印";
            this.labelControl25.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl25}");// "打印数量：";
            this.labelControl24.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl24}");// "标签：";
            this.labelControl23.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl23}");// "序列号:";
            this.xtraTabPage11.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage11}");// "青岛昌盛";
            this.labelControl30.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl30}");// "托号：";
            this.btnQueryQDCS.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnQueryQDCS}");// "查询";
            this.xtraTabPage10.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.xtraTabPage10}");// "特变埃及";
            this.labelControl31.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl31}");// "托号：";
            this.btnQueryAiji.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.btnQueryAiji}");// "查询";
            this.simpleButton3.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton3}");// "打印";
            this.simpleButton4.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton4}");// "Excel导出";
            this.labelControl10.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl10}");// "托号：";
            this.simpleButton5.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton5}");// "查询";
            this.gridColumn57.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.gridColumn57}");// "外観";
            this.gridColumn58.Caption = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.gridColumn58}");// "判定";
            this.simpleButton7.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton7}");// "Excel导出综合";
            this.simpleButton8.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton8}");// "Excel导出New";
            this.simpleButton9.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton9}");// "打印";
            this.simpleButton10.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton10}");// "Excel导出Old";
            this.labelControl18.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.labelControl18}");// "托号：";
            this.simpleButton11.Text = StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.simpleButton11}");// "查询";
        }



        //构造函数 jiabao.liu
        public PackingListPrint(string printstyle, string quanlitygrade)
        {
            _PrintStyle = printstyle;
            //_PalletNo = palletno;
            _QuanlityGrade = quanlitygrade;
        }


        private string MESSAGEBOX_CAPTION = StringParser.Parse("${res:Global.SystemInfo}"); //提示

        //#region PPS
        //PPS清单上的查询
        private void btnQuery_Click(object sender, EventArgs e)
        {
            string sPalltNo;
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                //                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }
            DataSet dsPackingList = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcPackingList.DataSource = null;
                gcPackingList.MainView = gvPackingList;
                gcPackingList.DataSource = dsPackingList.Tables[0];
                gvPackingList.BestFitColumns();//自动调整列宽度
                gvPackingList.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }
        //PPS清单上的导出
        private void btnExcel_Click(object sender, EventArgs e)
        {
            string sPalltNo;
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                //                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }
            DataSet dsPackingList = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            if (gvPackingList.RowCount < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg002}"), MESSAGEBOX_CAPTION);//无包装清单数据，请确认！
                //MessageService.ShowMessage("无包装清单数据，请确认！", "提示");
                return;
            }
            Microsoft.Office.Interop.Excel.Application excel = new Microsoft.Office.Interop.Excel.Application();
            try
            {
                excel.Application.Workbooks.Add(true);

                for (int i = 0; i < gvPackingList.Columns.Count; i++)
                {
                    excel.Cells[1, i + 1] = gvPackingList.Columns[i].Caption;
                }

                for (int i = 0; i < dsPackingList.Tables[0].Rows.Count; i++)
                {

                    for (int j = 0; j < gvPackingList.Columns.Count; j++)
                    {
                        ((Microsoft.Office.Interop.Excel.Range)excel.Cells[i + 2, j + 1]).NumberFormatLocal = "@";
                        excel.Cells[i + 2, j + 1] = dsPackingList.Tables[0].Rows[i][j].ToString().Trim();
                    }

                }
                excel.Visible = true;
            }
            catch (Exception err)
            {

                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg003}") + err.Message, MESSAGEBOX_CAPTION, MessageBoxButtons.OK, MessageBoxIcon.Information);//导出Excel出错，错误原因：
                //MessageBox.Show("导出Excel出错，错误原因：" + err.Message, "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
        }

        //#region Conergy打印 qym
        //Conergy打印 qym
        private void btnConergy_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            //if (string.IsNullOrEmpty(sPalltNo))
            //{
            //                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
            //    txtPalltNo.SelectAll();
            //    txtPalltNo.Focus();
            //    return;
            //}

            //PrintDocument prtDoc = new PrintDocument();
            //if (sQty == "28")
            //{
            //    prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PrintPage2);
            //}
            //else
            //{
            //    prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PrintPage);
            //}
            //PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            //prtPrvDlg.Document = prtDoc;
            //prtPrvDlg.ShowDialog();

            //txtPalltNo.SelectAll();
            //txtPalltNo.Focus();
            ConergyPrint(sPalletNo, sQty, "1");
        }
        /// <summary>
        /// ruhu.yu 为conergy打印新建方法
        /// </summary>
        public void ConergyPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalletNo;
            if (string.IsNullOrEmpty(_PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认
                //                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            if (sQty == "28")
            {
                prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PrintPage2);
            }
            else
            {
                prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PrintPage);
            }
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }

        //Conergy打印 qym
        private void prtDoc_PrintPage2(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalltNo = "", ProductID, ProductionDate;
            int printingPageNo = 0;
            if (_PrintStyle == "ManualPrint")
            {
                sPalltNo = txtPalltNo.Text.Trim();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                sPalltNo = _PalletNo;
            }
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认
                //                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                if (_PrintStyle == "ManualPrint")
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//无数据，请确认托号是否正确！
                    //MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            int cnt = ds.Tables[0].Rows.Count;
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            ProductionDate = ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString();
            ProductionDate = ProductionDate.Substring(8, 2) + "." + ProductionDate.Substring(5, 2) + "." + ProductionDate.Substring(0, 4);
            //打印内容
            string partNo, pos, sn, pmpp, isc, impp, voc, vmpp, ff, wo, palletNo, barcode, formatDate, formatArt;

            float lr;
            lr = -30;

            formatDate = ProductionDate.Substring(8, 2) + ProductionDate.Substring(3, 2) + ProductionDate.Substring(0, 2);
            formatDate = formatDate.Substring(0, 1) + "," + formatDate.Substring(1, 3) + "," + formatDate.Substring(4, 2);
            palletNo = ds.Tables[0].Rows[0]["PALLET_NO"].ToString();
            partNo = ds.Tables[0].Rows[0]["PID"].ToString();
            string PowerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string articleNo = ds.Tables[0].Rows[0]["ARTNUMBER"].ToString();

            if (partNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["PID"].ToString() != "")
                    {
                        partNo = ds.Tables[0].Rows[i]["PID"].ToString();
                        break;
                    }
                }
            }

            if (PowerLevel == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        PowerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (articleNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["ARTNUMBER"].ToString() != "")
                    {
                        articleNo = ds.Tables[0].Rows[i]["ARTNUMBER"].ToString();
                        break;
                    }
                }
            }

            //partNo = "2400003468";
            formatArt = "9900" + partNo;

            //格式转换，给partNo添加客户需求的逗号
            string readLine = formatArt;
            StringBuilder resultsLine = new StringBuilder("");
            int j = 0;

            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                j++;
                if (j % 3 == 0 && j < readLine.Length)
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                    resultsLine.Append(",");
                }
                else
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                }
            }

            readLine = resultsLine.ToString();
            //resultsLine.Clear();
            resultsLine = new StringBuilder("");
            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                resultsLine.Append(readLine.Substring(i, 1));
            }

            formatArt = resultsLine.ToString();

            //articleNo = "Conergy PH 185M";
            //BVNo = ">:>810110729-0057>8131107213022>899002400003468";
            string BV = string.Empty;
            if (palletNo == "" || articleNo == "" || cnt == 0 || partNo == "" || PowerLevel == "" || ProductionDate == "")
            {
                MessageBox.Show("包装信息不完整，请确认！\n ......\n\n栈板号：" + palletNo + "\n  编码：" + partNo + "\n  档位：" + PowerLevel + "\n  日期：" + ProductionDate, "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (palletNo == "")
                {
                    palletNo = "XXXXXXX-XXXX";
                }
                if (articleNo == "")
                {
                    articleNo = "XXXXXXX XX XXXX";
                }
                if (partNo == "")
                {
                    partNo = "XXXXXXXXXX";
                    formatArt = "9900" + "XXXXXXXXXX";
                }
                if (PowerLevel == "")
                {
                    PowerLevel = "XXX";
                }
                if (ProductionDate == "")
                {
                    formatDate = "X,XXX,XX";
                }
                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\delete.png"), 300, 400);

                //return;
            }
            BV = "10" + palletNo + "<FNC1><FNC1>" + "13" + formatDate + "3,0" + cnt + "<FNC1>" + formatArt;

            //BV = "10110729-0057<FNC1><FNC1>131,107,213,022<FNC1>99,002,400,003,468";
            string strLine;//用于存放当前行打印的信息
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,12}", "Packing List");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition * 3 / 4, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 6 / 5;
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,4}", palletNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition, new StringFormat());

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\ConergyLogo.jpg"), 490, 10);

                verticalPosition = verticalPosition + 45;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Quantity:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + lr, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", cnt.ToString());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Product:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 260, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", partNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 330, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", articleNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 440, verticalPosition, new StringFormat());

                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(BV);
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics);
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);//Code 128/3 of 9 Barcode
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);//Code 128/3 of 9 Barcode
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 5, verticalPosition, new StringFormat());
                verticalPosition += 29;
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 5, verticalPosition, new StringFormat());

                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Date: " + ProductionDate);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 + 20, verticalPosition + 18, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 3 - 15;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Pos.");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 10, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", "SN");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 105, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Pmpp[Wp]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 180, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Isc[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 265, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Impp[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Voc[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 355, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Vmpp[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 430, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "FF[%]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 505, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Barcode");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 612, verticalPosition, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 4 / 3;
                System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔
                e.Graphics.DrawLine(myPen, lr + 10, verticalPosition, lr + 785, verticalPosition);//画线 

                verticalPosition = 251;
                for (int i = 0; i < cnt; i++)
                {
                    wo = ds.Tables[0].Rows[i]["WORK_ORDER_NO"].ToString();

                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    barcode = ds.Tables[0].Rows[i]["BARCODEDATA"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    ff = ds.Tables[0].Rows[i]["FF"].ToString();

                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    strLine = String.Format("{0,8}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 5, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 80, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 180, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 260, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 355, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 435, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", ff);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 504, verticalPosition, new StringFormat());

                    strLine = Code128.Get128CodeString(barcode);
                    mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 630, verticalPosition - 10, new StringFormat());
                    verticalPosition += 32;
                }

            }
        }
        //Conergy打印 qym
        private void prtDoc_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalltNo = "", ProductID, ProductionDate;
            int printingPageNo = 0;

            if (_PrintStyle == "ManualPrint")
            {
                sPalltNo = txtPalltNo.Text.Trim();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                sPalltNo = _PalletNo;
            }
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                //                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//无数据，请确认托号是否正确！
                //MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count > 28)
            {
                //MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            int cnt = ds.Tables[0].Rows.Count;
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            ProductionDate = ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString();
            ProductionDate = ProductionDate.Substring(8, 2) + "." + ProductionDate.Substring(5, 2) + "." + ProductionDate.Substring(0, 4);
            //打印内容
            string partNo, pos, sn, pmpp, isc, impp, voc, vmpp, ff, wo, palletNo, barcode, formatDate, formatArt;

            float lr;
            lr = -30;

            formatDate = ProductionDate.Substring(8, 2) + ProductionDate.Substring(3, 2) + ProductionDate.Substring(0, 2);
            formatDate = formatDate.Substring(0, 1) + "," + formatDate.Substring(1, 3) + "," + formatDate.Substring(4, 2);
            palletNo = ds.Tables[0].Rows[0]["PALLET_NO"].ToString();
            partNo = ds.Tables[0].Rows[0]["PID"].ToString();
            string PowerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string articleNo = ds.Tables[0].Rows[0]["ARTNUMBER"].ToString();

            if (partNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["PID"].ToString() != "")
                    {
                        partNo = ds.Tables[0].Rows[i]["PID"].ToString();
                        break;
                    }
                }
            }

            if (PowerLevel == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        PowerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (articleNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["ARTNUMBER"].ToString() != "")
                    {
                        articleNo = ds.Tables[0].Rows[i]["ARTNUMBER"].ToString();
                        break;
                    }
                }
            }

            //partNo = "2400003468";
            formatArt = "9900" + partNo;

            //格式转换，给partNo添加客户需求的逗号
            string readLine = formatArt;
            StringBuilder resultsLine = new StringBuilder("");
            int j = 0;

            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                j++;
                if (j % 3 == 0 && j < readLine.Length)
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                    resultsLine.Append(",");
                }
                else
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                }
            }

            readLine = resultsLine.ToString();
            //resultsLine.Clear();
            resultsLine = new StringBuilder("");
            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                resultsLine.Append(readLine.Substring(i, 1));
            }

            formatArt = resultsLine.ToString();

            //articleNo = "Conergy PH 185M";
            //BVNo = ">:>810110729-0057>8131107213022>899002400003468";
            string BV = string.Empty;
            if (palletNo == "" || articleNo == "" || cnt == 0 || partNo == "" || PowerLevel == "" || ProductionDate == "")
            {
                MessageBox.Show("包装信息不完整，请确认！\n ......\n\n栈板号：" + palletNo + "\n  编码：" + partNo + "\n  档位：" + PowerLevel + "\n  日期：" + ProductionDate, "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (palletNo == "")
                {
                    palletNo = "XXXXXXX-XXXX";
                }
                if (articleNo == "")
                {
                    articleNo = "XXXXXXX XX XXXX";
                }
                if (partNo == "")
                {
                    partNo = "XXXXXXXXXX";
                    formatArt = "9900" + "XXXXXXXXXX";
                }
                if (PowerLevel == "")
                {
                    PowerLevel = "XXX";
                }
                if (ProductionDate == "")
                {
                    formatDate = "X,XXX,XX";
                }
                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\delete.png"), 300, 400);

                //return;
            }
            BV = "10" + palletNo + "<FNC1><FNC1>" + "13" + formatDate + "3,0" + cnt + "<FNC1>" + formatArt;

            //BV = "10110729-0057<FNC1><FNC1>131,107,213,022<FNC1>99,002,400,003,468";
            string strLine;//用于存放当前行打印的信息
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,12}", "Packing List");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition * 3 / 4, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 6 / 5;
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,4}", palletNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition, new StringFormat());

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\ConergyLogo.jpg"), 490, 10);

                verticalPosition = verticalPosition + 45;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Quantity:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + lr, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", cnt.ToString());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Product:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 260, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", partNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 330, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", articleNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 440, verticalPosition, new StringFormat());

                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(BV);
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics);
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);//Code 128/3 of 9 Barcode
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);//Code 128/3 of 9 Barcode
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 5, verticalPosition, new StringFormat());
                verticalPosition += 29;
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 5, verticalPosition, new StringFormat());

                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Date: " + ProductionDate);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 + 20, verticalPosition + 18, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 3;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Pos.");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 10, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", "SN");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 105, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Pmpp[Wp]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 180, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Isc[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 265, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Impp[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Voc[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 355, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Vmpp[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 430, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "FF[%]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 505, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Barcode");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 612, verticalPosition, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 4 / 3;
                System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔
                e.Graphics.DrawLine(myPen, lr + 10, verticalPosition, lr + 785, verticalPosition);//画线 

                verticalPosition = 270;
                for (int i = 0; i < cnt; i++)
                {
                    wo = ds.Tables[0].Rows[i]["WORK_ORDER_NO"].ToString();

                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    barcode = ds.Tables[0].Rows[i]["BARCODEDATA"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    ff = ds.Tables[0].Rows[i]["FF"].ToString();

                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    strLine = String.Format("{0,8}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 5, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 80, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 180, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 260, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 355, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 435, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", ff);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 504, verticalPosition, new StringFormat());

                    strLine = Code128.Get128CodeString(barcode);
                    mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 630, verticalPosition - 15, new StringFormat());
                    verticalPosition += 40;
                }

            }
        }
        //#endregion

        //#region Conergy2打印
        private void btnConergy2_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                //                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_ConergyPackge2);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            //add by genchille.yang 2013-3-17 13:53
            prtDoc.DefaultPageSettings.Landscape = true;
            //end
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }
        private void prtDoc_ConergyPackge2(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPowerLevel, sPowerLevel1, sPowerLevel2;
            int nlenth;

            sPowerLevel = "";
            sPowerLevel1 = "";
            sPowerLevel2 = "";
            nlenth = 0;

            string PalletNo = txtPalltNo.Text.Trim();

            DataSet ds = IVTestDateObject.dsGetConergyPackgeData2(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//无数据，请确认托号是否正确！
                //MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            sPowerLevel = ds.Tables[0].Rows[0]["POWERLEVEL"].ToString();


            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 46, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400, 50, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 16, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 500, 120, new StringFormat());

                string[] sarr = sPowerLevel.Split('#');
                nlenth = sarr.Length;
                if (ds.Tables[0].Rows.Count == 1)
                {
                    if (nlenth == 1)
                    {
                        sPowerLevel1 = sarr[0].ToString().Trim();
                    }
                    else if (nlenth >= 2)
                    {
                        sPowerLevel1 = sarr[0].ToString().Trim();
                        sPowerLevel2 = sarr[1].ToString().Trim();
                        strLine = sPowerLevel1;
                        mainFont = new System.Drawing.Font("Arial", 86, FontStyle.Bold);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 80, 250, new StringFormat());
                        strLine = sPowerLevel2;
                        mainFont = new System.Drawing.Font("Arial", 86, FontStyle.Bold);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 80, 380, new StringFormat());
                    }
                    else
                    { }
                }
                else
                {
                    sPowerLevel1 = "Mixed Current Class";
                    strLine = sPowerLevel1;
                    mainFont = new System.Drawing.Font("Arial", 86, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 80, 320, new StringFormat());
                }
            }
        }
        //#endregion

        //#region 体现功率打印
        //体现功率打印
        private void btnPowerPrint_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                //                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }
            if (sQty == "22")
            {
                PrintDocument prtDoc = new PrintDocument();
                prtDoc.PrintPage += new PrintPageEventHandler(prtNorPack_PrintPage);
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }
            if (sQty == "28")
            {
                PrintDocument prtDoc = new PrintDocument();
                prtDoc.PrintPage += new PrintPageEventHandler(prtNorPack_PrintPage2);
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }
            if (sQty == "42")
            {
                ds42 = new DataSet();
                ds42.Clear();
                ds42 = IVTestDateObject.GetPPSMasterData(sPalltNo);
                if (ds42.Tables[0].Rows.Count < 1)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//无数据，请确认托号是否正确！
                    //MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                    return;
                }
                if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                {
                    MessageService.ShowError(IVTestDateObject.ErrorMsg);
                    return;
                }

                if (ds42.Tables[0].Rows.Count > 42)
                {
                    MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                PrintDocument prtDoc = new PrintDocument();
                prtDoc.PrintPage += new PrintPageEventHandler(prtNorPack_PrintPage3);
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();

                PrintDocument prtDoc2 = new PrintDocument();
                prtDoc2.PrintPage += new PrintPageEventHandler(prtNorPack_PrintPage4);
                PrintPreviewDialog prtPrvDlg2 = new PrintPreviewDialog();
                prtPrvDlg2.Document = prtDoc2;
                prtPrvDlg2.ShowDialog();
            }
            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }

        private void prtNorPack_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalltNo, SerialNo;

            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count > 22)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string Pmp = string.Empty, Voc, Isc, Vmp, Imp;

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["Power"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["Power"].ToString();
                        break;
                    }
                }
            }

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(sPalltNo);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 250, 50, new StringFormat());
                strLine = sPalltNo;
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 280, 95, new StringFormat());
                mainFont = new System.Drawing.Font("Arial", 20, FontStyle.Regular);
                e.Graphics.DrawString("Rated power:", mainFont, Brushes.Black, 250, 150, new StringFormat());

                strLine = Code128.Get128CodeString(powerLevel);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 430, 140, new StringFormat());
                strLine = powerLevel + "W";
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 450, 184, new StringFormat());

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(170, 40, 480, 180));
                e.Graphics.DrawLine(myPen, 240, 130, 580, 130);

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (chCustNo.Checked == true)
                    {
                        SerialNo = ds.Tables[0].Rows[i]["VC_CUSTCODE"].ToString();
                    }
                    else
                    {
                        SerialNo = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    }
                    //Pmp = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[i]["Pmp"].ToString()), 1).ToString("#,##0.0");
                    Pmp = Convert.ToDouble(ds.Tables[0].Rows[i]["PMP"].ToString()).ToString("###.00");
                    Voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    Isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    Vmp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    Imp = ds.Tables[0].Rows[i]["IMP"].ToString();

                    if (i < 11)
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40, 240 + 80 * i, 360, 72));

                        strLine = Code128.Get128CodeString(SerialNo);
                        mainFont = new System.Drawing.Font("Code 128", 30, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 40, 240 + 80 * i, new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, 280 + 80 * i, new StringFormat());
                        strLine = "Pmp = " + Pmp + "Wp";
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, 295 + 80 * i, new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString("Voc=", mainFont, Brushes.Black, 270 + 20, 243 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("Isc =", mainFont, Brushes.Black, 270 + 20, 260 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("Vmp=", mainFont, Brushes.Black, 270 + 20, 277 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("Imp =", mainFont, Brushes.Black, 270 + 20, 294 + 80 * i, new StringFormat());
                        e.Graphics.DrawString(Voc, mainFont, Brushes.Black, 270 + 40 + 20, 243 + 80 * i, new StringFormat());
                        e.Graphics.DrawString(Isc, mainFont, Brushes.Black, 270 + 40 + 20, 260 + 80 * i, new StringFormat());
                        e.Graphics.DrawString(Vmp, mainFont, Brushes.Black, 270 + 40 + 20, 277 + 80 * i, new StringFormat());
                        e.Graphics.DrawString(Imp, mainFont, Brushes.Black, 270 + 40 + 20, 294 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 20, 243 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 20, 260 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 20, 277 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 20, 294 + 80 * i, new StringFormat());
                    }
                    else
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 + 390, 240 + 80 * (i - 11), 360, 72));

                        strLine = Code128.Get128CodeString(SerialNo);

                        mainFont = new System.Drawing.Font("Code 128", 30, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 40 + 390, 240 + 80 * (i - 11), new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + 390, 280 + 80 * (i - 11), new StringFormat());
                        strLine = "Pmp = " + Pmp + "Wp";
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + 390, 295 + 80 * (i - 11), new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString("Voc=", mainFont, Brushes.Black, 270 + 390 + 20, 243 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("Isc =", mainFont, Brushes.Black, 270 + 390 + 20, 260 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("Vmp=", mainFont, Brushes.Black, 270 + 390 + 20, 277 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("Imp =", mainFont, Brushes.Black, 270 + 390 + 20, 294 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString(Voc, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 243 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString(Isc, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 260 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString(Vmp, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 277 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString(Imp, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 294 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 243 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 260 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 277 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 294 + 80 * (i - 11), new StringFormat());
                    }
                }
            }
        }

        private void prtNorPack_PrintPage2(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalltNo, SerialNo;

            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count > 28)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["Power"].ToString();
            string Pmp = string.Empty, Voc, Isc, Vmp, Imp;

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["Power"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["Power"].ToString();
                        break;
                    }
                }
            }

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(sPalltNo);
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 250, 15, new StringFormat());
                strLine = sPalltNo;
                mainFont = new System.Drawing.Font("Arial", 14, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 265, 45, new StringFormat());
                mainFont = new System.Drawing.Font("Arial", 16, FontStyle.Regular);
                e.Graphics.DrawString("Rated power:", mainFont, Brushes.Black, 260, 80, new StringFormat());

                strLine = Code128.Get128CodeString(powerLevel);
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 430, 70, new StringFormat());
                strLine = powerLevel + "W";
                mainFont = new System.Drawing.Font("Arial", 14, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 440, 100, new StringFormat());

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(170, 10, 480, 110));
                e.Graphics.DrawLine(myPen, 240, 70, 580, 70);

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (chCustNo.Checked == true)
                    {
                        SerialNo = ds.Tables[0].Rows[i]["VC_CUSTCODE"].ToString();
                    }
                    else
                    {
                        SerialNo = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    }
                    //Pmp = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[i]["Pmp"].ToString()), 1).ToString("#,##0.0");
                    Pmp = Convert.ToDouble(ds.Tables[0].Rows[i]["PMP"].ToString()).ToString("###.00");
                    Voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    Isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    Vmp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    Imp = ds.Tables[0].Rows[i]["IMP"].ToString();

                    if (i < 14)
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40, 140 + 70 * i, 360, 62));

                        strLine = Code128.Get128CodeString(SerialNo);
                        mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 40, 140 + 70 * i, new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, 172 + 70 * i, new StringFormat());
                        strLine = "Pmp = " + Pmp + "Wp";
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, 185 + 70 * i, new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString("Voc=", mainFont, Brushes.Black, 270 - 3 + 20, 140 + 70 * i, new StringFormat());
                        e.Graphics.DrawString("Isc =", mainFont, Brushes.Black, 270 + 20, 155 + 70 * i, new StringFormat());
                        e.Graphics.DrawString("Vmp=", mainFont, Brushes.Black, 270 - 3 + 20, 170 + 70 * i, new StringFormat());
                        e.Graphics.DrawString("Imp =", mainFont, Brushes.Black, 270 + 20, 184 + 70 * i, new StringFormat());
                        e.Graphics.DrawString(Voc, mainFont, Brushes.Black, 270 + 40 + 20, 140 + 70 * i, new StringFormat());
                        e.Graphics.DrawString(Isc, mainFont, Brushes.Black, 270 + 40 + 20, 155 + 70 * i, new StringFormat());
                        e.Graphics.DrawString(Vmp, mainFont, Brushes.Black, 270 + 40 + 20, 170 + 70 * i, new StringFormat());
                        e.Graphics.DrawString(Imp, mainFont, Brushes.Black, 270 + 40 + 20, 184 + 70 * i, new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 20, 140 + 70 * i, new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 20, 155 + 70 * i, new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 20, 170 + 70 * i, new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 20, 184 + 70 * i, new StringFormat());
                    }
                    else
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 + 390, 140 + 70 * (i - 14), 360, 62));

                        strLine = Code128.Get128CodeString(SerialNo);

                        mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 40 + 390, 140 + 70 * (i - 14), new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + 390, 172 + 70 * (i - 14), new StringFormat());
                        strLine = "Pmp = " + Pmp + "Wp";
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + 390, 185 + 70 * (i - 14), new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString("Voc=", mainFont, Brushes.Black, 270 + 390 - 3 + 20, 140 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString("Isc =", mainFont, Brushes.Black, 270 + 390 + 20, 155 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString("Vmp=", mainFont, Brushes.Black, 270 + 390 - 3 + 20, 170 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString("Imp =", mainFont, Brushes.Black, 270 + 390 + 20, 184 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString(Voc, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 140 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString(Isc, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 155 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString(Vmp, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 170 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString(Imp, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 184 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 140 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 155 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 170 + 70 * (i - 14), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 184 + 70 * (i - 14), new StringFormat());
                    }
                }
            }
        }

        private void prtNorPack_PrintPage3(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string powerLevel = ds42.Tables[0].Rows[0]["POWER"].ToString();
            string PalletNo = ds42.Tables[0].Rows[0]["PALLET_NO"].ToString();
            string Pmp = string.Empty, Voc, Isc, Vmp, Imp;

            if (powerLevel == "")
            {
                for (int i = 0; i < ds42.Tables[0].Rows.Count; i++)
                {
                    if (ds42.Tables[0].Rows[i]["Power"].ToString() != "")
                    {
                        powerLevel = ds42.Tables[0].Rows[i]["Power"].ToString();
                        break;
                    }
                }
            }
            if (PalletNo == "")
            {
                for (int i = 0; i < ds42.Tables[0].Rows.Count; i++)
                {
                    if (ds42.Tables[0].Rows[i]["Power"].ToString() != "")
                    {
                        PalletNo = ds42.Tables[0].Rows[i]["PalletNo"].ToString();
                        break;
                    }
                }
            }

            string SerialNo = string.Empty;

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));


            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 250, 50, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 280, 95, new StringFormat());
                mainFont = new System.Drawing.Font("Arial", 20, FontStyle.Regular);
                e.Graphics.DrawString("Rated power:", mainFont, Brushes.Black, 250, 150, new StringFormat());

                strLine = Code128.Get128CodeString(powerLevel);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 430, 140, new StringFormat());
                strLine = powerLevel + "W";
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 450, 184, new StringFormat());

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(170, 40, 480, 180));
                e.Graphics.DrawLine(myPen, 240, 130, 580, 130);

                for (int i = 0; i < ds42.Tables[0].Rows.Count; i++)
                {
                    SerialNo = ds42.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    //Pmp = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[i]["Pmp"].ToString()), 1).ToString("#,##0.0");
                    Pmp = Convert.ToDouble(ds42.Tables[0].Rows[i]["PMP"].ToString()).ToString("###.00");
                    Voc = ds42.Tables[0].Rows[i]["VOC"].ToString();
                    Isc = ds42.Tables[0].Rows[i]["ISC"].ToString();
                    Vmp = ds42.Tables[0].Rows[i]["VMP"].ToString();
                    Imp = ds42.Tables[0].Rows[i]["IMP"].ToString();

                    if (i < 11)
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40, 240 + 80 * i, 360, 72));

                        strLine = Code128.Get128CodeString(SerialNo);
                        mainFont = new System.Drawing.Font("Code 128", 30, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 40, 240 + 80 * i, new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, 280 + 80 * i, new StringFormat());
                        strLine = "Pmp = " + Pmp + "Wp";
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, 295 + 80 * i, new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString("Voc=", mainFont, Brushes.Black, 270 + 20, 243 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("Isc =", mainFont, Brushes.Black, 270 + 20, 260 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("Vmp=", mainFont, Brushes.Black, 270 + 20, 277 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("Imp =", mainFont, Brushes.Black, 270 + 20, 294 + 80 * i, new StringFormat());
                        e.Graphics.DrawString(Voc, mainFont, Brushes.Black, 270 + 40 + 20, 243 + 80 * i, new StringFormat());
                        e.Graphics.DrawString(Isc, mainFont, Brushes.Black, 270 + 40 + 20, 260 + 80 * i, new StringFormat());
                        e.Graphics.DrawString(Vmp, mainFont, Brushes.Black, 270 + 40 + 20, 277 + 80 * i, new StringFormat());
                        e.Graphics.DrawString(Imp, mainFont, Brushes.Black, 270 + 40 + 20, 294 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 20, 243 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 20, 260 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 20, 277 + 80 * i, new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 20, 294 + 80 * i, new StringFormat());
                    }
                    else if (i < 22)
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 + 390, 240 + 80 * (i - 11), 360, 72));

                        strLine = Code128.Get128CodeString(SerialNo);

                        mainFont = new System.Drawing.Font("Code 128", 30, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 40 + 390, 240 + 80 * (i - 11), new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + 390, 280 + 80 * (i - 11), new StringFormat());
                        strLine = "Pmp = " + Pmp + "Wp";
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + 390, 295 + 80 * (i - 11), new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString("Voc=", mainFont, Brushes.Black, 270 + 390 + 20, 243 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("Isc =", mainFont, Brushes.Black, 270 + 390 + 20, 260 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("Vmp=", mainFont, Brushes.Black, 270 + 390 + 20, 277 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("Imp =", mainFont, Brushes.Black, 270 + 390 + 20, 294 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString(Voc, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 243 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString(Isc, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 260 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString(Vmp, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 277 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString(Imp, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 294 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 243 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 260 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 277 + 80 * (i - 11), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 294 + 80 * (i - 11), new StringFormat());
                    }
                    else
                    { }
                }
            }
        }

        private void prtNorPack_PrintPage4(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string powerLevel = ds42.Tables[0].Rows[0]["POWER"].ToString();
            string PalletNo = ds42.Tables[0].Rows[0]["PALLET_NO"].ToString();
            string Pmp = string.Empty, Voc, Isc, Vmp, Imp;

            if (powerLevel == "")
            {
                for (int i = 0; i < ds42.Tables[0].Rows.Count; i++)
                {
                    if (ds42.Tables[0].Rows[i]["Power"].ToString() != "")
                    {
                        powerLevel = ds42.Tables[0].Rows[i]["Power"].ToString();
                        break;
                    }
                }
            }
            if (PalletNo == "")
            {
                for (int i = 0; i < ds42.Tables[0].Rows.Count; i++)
                {
                    if (ds42.Tables[0].Rows[i]["Power"].ToString() != "")
                    {
                        PalletNo = ds42.Tables[0].Rows[i]["PalletNo"].ToString();
                        break;
                    }
                }
            }

            string SerialNo = string.Empty;

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));


            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 250, 50, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 280, 95, new StringFormat());
                mainFont = new System.Drawing.Font("Arial", 20, FontStyle.Regular);
                e.Graphics.DrawString("Rated power:", mainFont, Brushes.Black, 250, 150, new StringFormat());

                strLine = Code128.Get128CodeString(powerLevel);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 430, 140, new StringFormat());
                strLine = powerLevel + "W";
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 450, 184, new StringFormat());

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(170, 40, 480, 180));
                e.Graphics.DrawLine(myPen, 240, 130, 580, 130);

                for (int i = 22; i < ds42.Tables[0].Rows.Count; i++)
                {
                    SerialNo = ds42.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    //Pmp = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[i]["Pmp"].ToString()), 1).ToString("#,##0.0");
                    Pmp = Convert.ToDouble(ds42.Tables[0].Rows[i]["Pmp"].ToString()).ToString("###.00");
                    Voc = ds42.Tables[0].Rows[i]["Voc"].ToString();
                    Isc = ds42.Tables[0].Rows[i]["Isc"].ToString();
                    Vmp = ds42.Tables[0].Rows[i]["Vmp"].ToString();
                    Imp = ds42.Tables[0].Rows[i]["Imp"].ToString();

                    if (i < 33)
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40, 240 + 80 * (i - 22), 360, 72));

                        strLine = Code128.Get128CodeString(SerialNo);
                        mainFont = new System.Drawing.Font("Code 128", 30, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 40, 240 + 80 * (i - 22), new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, 280 + 80 * (i - 22), new StringFormat());
                        strLine = "Pmp = " + Pmp + "Wp";
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, 295 + 80 * (i - 22), new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString("Voc=", mainFont, Brushes.Black, 270 + 20, 243 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString("Isc =", mainFont, Brushes.Black, 270 + 20, 260 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString("Vmp=", mainFont, Brushes.Black, 270 + 20, 277 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString("Imp =", mainFont, Brushes.Black, 270 + 20, 294 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString(Voc, mainFont, Brushes.Black, 270 + 40 + 20, 243 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString(Isc, mainFont, Brushes.Black, 270 + 40 + 20, 260 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString(Vmp, mainFont, Brushes.Black, 270 + 40 + 20, 277 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString(Imp, mainFont, Brushes.Black, 270 + 40 + 20, 294 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 20, 243 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 20, 260 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 20, 277 + 80 * (i - 22), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 20, 294 + 80 * (i - 22), new StringFormat());
                    }
                    else
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 + 390, 240 + 80 * (i - 33), 360, 72));

                        strLine = Code128.Get128CodeString(SerialNo);

                        mainFont = new System.Drawing.Font("Code 128", 30, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 40 + 390, 240 + 80 * (i - 33), new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + 390, 280 + 80 * (i - 33), new StringFormat());
                        strLine = "Pmp = " + Pmp + "Wp";
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + 390, 295 + 80 * (i - 33), new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        e.Graphics.DrawString("Voc=", mainFont, Brushes.Black, 270 + 390 + 20, 243 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString("Isc =", mainFont, Brushes.Black, 270 + 390 + 20, 260 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString("Vmp=", mainFont, Brushes.Black, 270 + 390 + 20, 277 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString("Imp =", mainFont, Brushes.Black, 270 + 390 + 20, 294 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString(Voc, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 243 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString(Isc, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 260 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString(Vmp, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 277 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString(Imp, mainFont, Brushes.Black, 270 + 40 + 390 + 20, 294 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 243 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 260 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString("V", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 277 + 80 * (i - 33), new StringFormat());
                        e.Graphics.DrawString("A", mainFont, Brushes.Black, 270 + 80 + 390 + 20, 294 + 80 * (i - 33), new StringFormat());
                    }
                }
            }
        }
        //#endregion

        //#region 不体现功率打印
        //不体现功率打印
        private void btnNPowerPrint_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            //if (string.IsNullOrEmpty(sPalltNo))
            //{
            //                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
            //    txtPalltNo.SelectAll();
            //    txtPalltNo.Focus();
            //    return;
            //}

            //PrintDocument prtDoc = new PrintDocument();
            //if (sQty == "28")
            //{
            //    prtDoc.PrintPage += new PrintPageEventHandler(prtConergyPack_PrintPage2);
            //}
            //else
            //{
            //    prtDoc.PrintPage += new PrintPageEventHandler(prtConergyPack_PrintPage);
            //}

            //PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            //prtPrvDlg.Document = prtDoc;
            //prtPrvDlg.ShowDialog();
            //txtPalltNo.SelectAll();
            //txtPalltNo.Focus();
            NPowerPrint(sPalltNo, sQty, "1");
        }
        /// <summary>
        /// ruhu.yu 为不体现功率打印新建方法
        /// </summary>
        public void NPowerPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(_PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "AutoPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            if (sQty == "28")
            {
                prtDoc.PrintPage += new PrintPageEventHandler(prtConergyPack_PrintPage2);
            }
            else
            {
                prtDoc.PrintPage += new PrintPageEventHandler(prtConergyPack_PrintPage);
            }


            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }

        private void prtConergyPack_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {

            string sPalltNo = "", SerialNo;

            if (_PrintStyle == "ManualPrint")
            {
                sPalltNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                sPalltNo = _PalletNo;
            }
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                    return;
                }
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count > 22)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["Power"].ToString();

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["Power"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["Power"].ToString();
                        break;
                    }
                }
            }

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(sPalltNo);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 250, 50, new StringFormat());
                strLine = sPalltNo;
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 280, 95, new StringFormat());
                mainFont = new System.Drawing.Font("Arial", 20, FontStyle.Regular);
                e.Graphics.DrawString("Rated power:", mainFont, Brushes.Black, 250, 150, new StringFormat());

                strLine = Code128.Get128CodeString(powerLevel);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 430, 140, new StringFormat());
                strLine = powerLevel + "W";
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 450, 184, new StringFormat());

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(170, 40, 480, 180));
                e.Graphics.DrawLine(myPen, 240, 130, 580, 130);

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    SerialNo = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    if (i < 11)
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(35, 240 + 80 * i, 355, 72));

                        strLine = Code128.Get128CodeString(SerialNo);
                        mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, 245 + 80 * i, new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 150, 289 + 80 * i, new StringFormat());
                    }
                    else
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(35 + 375, 240 + 80 * (i - 11), 355, 72));

                        strLine = Code128.Get128CodeString(SerialNo);

                        mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110 + 375, 245 + 80 * (i - 11), new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 150 + 375, 289 + 80 * (i - 11), new StringFormat());
                    }
                }
            }
        }

        private void prtConergyPack_PrintPage2(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalltNo = "", SerialNo;
            if (_PrintStyle == "ManualPrint")
            {
                sPalltNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                sPalltNo = _PalletNo;
            }
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count > 28)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["Power"].ToString();

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["Power"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["Power"].ToString();
                        break;
                    }
                }
            }

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(sPalltNo);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 250, 50, new StringFormat());
                strLine = sPalltNo;
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 280, 95, new StringFormat());
                mainFont = new System.Drawing.Font("Arial", 20, FontStyle.Regular);
                e.Graphics.DrawString("Rated power:", mainFont, Brushes.Black, 250, 150, new StringFormat());

                strLine = Code128.Get128CodeString(powerLevel);
                mainFont = new System.Drawing.Font("Code 128", 32, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 430, 140, new StringFormat());
                strLine = powerLevel + "W";
                mainFont = new System.Drawing.Font("Arial", 18, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 450, 180, new StringFormat());

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(170, 40, 480, 170));
                e.Graphics.DrawLine(myPen, 240, 130, 580, 130);

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    SerialNo = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    if (i < 14)
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(35, 235 - 15 + 65 * i, 355, 60));

                        strLine = Code128.Get128CodeString(SerialNo);
                        mainFont = new System.Drawing.Font("Code 128", 28, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, 237 - 15 + 65 * i, new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 150, 275 - 15 + 65 * i, new StringFormat());
                    }
                    else
                    {
                        e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(35 + 375, 235 - 15 + 65 * (i - 14), 355, 60));

                        strLine = Code128.Get128CodeString(SerialNo);

                        mainFont = new System.Drawing.Font("Code 128", 28, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110 + 375, 237 - 15 + 65 * (i - 14), new StringFormat());
                        strLine = SerialNo;
                        mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 150 + 375, 275 - 15 + 65 * (i - 14), new StringFormat());
                    }
                }
            }
        }

        //#endregion

        //#region 通用打印 qym
        //通用打印事件 
        private void btnCommonPrint_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            CommonPrint(sPalltNo, sQty, "1");
        }

        /// <summary>
        /// Jiabao.liu，为自动打印清单新建方法
        /// </summary>
        /// <param name="PalletNo"></param>
        /// <param name="Qty"></param>
        public void CommonPrint(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_CommonPackge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }

        //打印第一页
        public void prtDoc_CommonPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;
            sPckType = string.Empty;
            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                DataRow[] drPowerLevelHLAB = dvDistinct.Select(" POWERLEVEL LIKE '%HA%' OR POWERLEVEL LIKE '%HB%'OR POWERLEVEL LIKE '%LA%'OR POWERLEVEL LIKE '%LB%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else if (drPowerLevelHLAB.Length > 1)
                    {
                        sPckType = "-M";
                    }

                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            //      功率 2.5W分档系统开发 根据韩苗需求判断是否功率中含有—A、-B   yibin.fei 2017.11.20
            else if (sub_PS_Way == "功率")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelAB = dvDistinct.Select(" POWERLEVEL LIKE '%A%' OR POWERLEVEL LIKE '%B%'");

                // 混托获取子分档
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelAB.Length > 1)
                    {
                        sPckType = "-A/B";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }




            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }

                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.LastIndexOf("-"));

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                #region 体现功率
                string strSAP_NO = dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                string strWorkNumber = dsVal.Tables[0].Rows[0]["WORKNUMBER"].ToString();
                DataSet ds_powershow = IVTestDateObject.GetPowerShowData(strWorkNumber, strSAP_NO);

                DataRow[] drPowerShow = ds_powershow.Tables[0].Select(string.Format("BEFORE_POWER='{0}'", powerLevel));
                if (drPowerShow.Count() > 0 && powerLevel == drPowerShow[0]["BEFORE_POWER"].ToString())
                {
                    powerLevel = drPowerShow[0]["AFTER_POWER"].ToString();
                }
                #endregion
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                //#region    中间

                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容     
                //自动打印清单设置

                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容


                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片


                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SoviSol_LOGO.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);
                }

                //图片下面日期


                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());



                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        //#endregion

        //#region 画面1

        private void btnComQuery_Click(object sender, EventArgs e)
        {
            string sQPalletNo;
            string[] sArrPalletNo;
            sQPalletNo = "";

            sPalletNo = txtCPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNo.SelectAll();
                txtCPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            dsCommon = new DataSet();
            dsCommon.Clear();
            dsCommon = IVTestDateObject.GetPackingListCommonData(sQPalletNo);
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcCommon.DataSource = null;
                gcCommon.MainView = gvCommon;
                gcCommon.DataSource = dsCommon.Tables[0];
                gvCommon.BestFitColumns();//自动调整列宽度
                gvCommon.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void btnComExcel_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sValue, sWO, sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";

            sPalletNo = txtCPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNo.SelectAll();
                txtCPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            if (gvCommon.RowCount > 0)
            {
                try
                {
                    nColumn = gvCommon.Columns.Count - 1;
                    nRow = gvCommon.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];
                    //oWorksheet.Name = txtStockNo.Text.Trim();

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData(sQPalletNo);
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    sValue = dsVal.Tables[0].Rows[0]["PRO_ID"].ToString();
                    sValue = sValue.Substring(0, sValue.IndexOf("-") + 1) + " " + dsVal.Tables[0].Rows[0]["POWER"].ToString();
                    oWorksheet.Cells[nNowRow, 1] = sValue;
                    oWorksheet.get_Range("A1", "A1").Font.Bold = true;
                    oWorksheet.get_Range("A1", "M1").Merge(0);

                    nNowRow++;
                    for (int c = 0; c < nColumn; c++)
                    {
                        oWorksheet.Cells[nNowRow, c + 1] = gvCommon.Columns[c].Caption.ToString();
                    }
                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "序号";
                    oWorksheet.Cells[nNowRow, 2] = "托   号";
                    oWorksheet.Cells[nNowRow, 3] = "型   号";
                    oWorksheet.Cells[nNowRow, 4] = "序 列 号";
                    oWorksheet.Cells[nNowRow, 5] = "实测功率";
                    oWorksheet.Cells[nNowRow, 6] = "短路电流";
                    oWorksheet.Cells[nNowRow, 7] = "开路电压";
                    oWorksheet.Cells[nNowRow, 8] = "工作电流";
                    oWorksheet.Cells[nNowRow, 9] = "工作电压";
                    oWorksheet.Cells[nNowRow, 10] = "功率档";
                    oWorksheet.Cells[nNowRow, 11] = "等级";
                    oWorksheet.Cells[nNowRow, 12] = "生产日期";
                    oWorksheet.Cells[nNowRow, 13] = "接线盒";
                    oWorksheet.get_Range("A2", "M3").Interior.ColorIndex = 48;


                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[nNowRow, c + 1] = dgCommon.Rows[r].Cells[c].Value;
                            //oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            if (ckImp.Checked == true)
                            {
                                if (c == 7)
                                {
                                    int index = dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().IndexOf("-") + 1;
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString().Trim() + "-" + dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().Substring(index, 1);
                                }
                                else
                                {
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                                }
                            }
                            else
                            {
                                oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            }
                        }
                    }
                    oWorksheet.get_Range("B4", "C" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L4", "L" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("D4", "D" + nRow.ToString()).EntireColumn.NumberFormat = "@";

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Total(合计):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //oWorksheet.Cells[nNowRow, 4] = dsVal.Tables[0].Rows[0]["QTY"].ToString() + " Pcs";
                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    //新增合计------------------------------------------------------------------------
                    int alots = 0;
                    decimal psum = 0;
                    foreach (DataRow drow in dsVal.Tables[0].Rows)
                    {
                        alots += Convert.ToInt16(drow["QTY"]);
                        psum += Convert.ToDecimal(drow["PSUM"]);
                    }
                    oWorksheet.Cells[nNowRow, 4] = Convert.ToSingle(alots) + " Pcs";
                    oWorksheet.Cells[nNowRow, 5] = Convert.ToSingle(Math.Round(psum, 2));
                    //------------------------------------------------------------------------
                    oWorksheet.get_Range("F" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MAX(最大值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0,3);

                    //新增最大值------------------------------------------------------------------------
                    string PMAX = string.Empty, ISC_MAX = string.Empty, VOC_MAX = string.Empty, IMP_MAX = string.Empty, VMP_MAX = string.Empty, POWER = string.Empty;


                    PMAX = dsVal.Tables[0].Compute("max(PMAX)", null).ToString();
                    ISC_MAX = dsVal.Tables[0].Compute("max(ISC_MAX)", null).ToString();
                    VOC_MAX = dsVal.Tables[0].Compute("max(VOC_MAX)", null).ToString();
                    IMP_MAX = dsVal.Tables[0].Compute("max(IMP_MAX)", null).ToString();
                    VMP_MAX = dsVal.Tables[0].Compute("max(VMP_MAX)", null).ToString();
                    POWER = dsVal.Tables[0].Compute("max(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 5] = PMAX;
                    oWorksheet.Cells[nNowRow, 6] = ISC_MAX;
                    oWorksheet.Cells[nNowRow, 7] = VOC_MAX;
                    oWorksheet.Cells[nNowRow, 8] = IMP_MAX;
                    oWorksheet.Cells[nNowRow, 9] = VMP_MAX;
                    oWorksheet.Cells[nNowRow, 10] = POWER.Substring(0, 3);
                    //end------------------------------------------------------------------------

                    oWorksheet.get_Range("K" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MIN(最小值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //新增最小值------------------------------------------------------------------------
                    string PMIN = string.Empty, ISC_MIN = string.Empty, VOC_MIN = string.Empty, IMP_MIN = string.Empty, VMP_MIN = string.Empty, POWER2 = string.Empty;
                    PMIN = dsVal.Tables[0].Compute("min(PMIN)", null).ToString();
                    ISC_MIN = dsVal.Tables[0].Compute("min(ISC_MIN)", null).ToString();
                    VOC_MIN = dsVal.Tables[0].Compute("min(VOC_MIN)", null).ToString();
                    IMP_MIN = dsVal.Tables[0].Compute("min(IMP_MIN)", null).ToString();
                    VMP_MIN = dsVal.Tables[0].Compute("min(VMP_MIN)", null).ToString();
                    POWER2 = dsVal.Tables[0].Compute("min(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 5] = PMIN;
                    oWorksheet.Cells[nNowRow, 6] = ISC_MIN;
                    oWorksheet.Cells[nNowRow, 7] = VOC_MIN;
                    oWorksheet.Cells[nNowRow, 8] = IMP_MIN;
                    oWorksheet.Cells[nNowRow, 9] = VMP_MIN;
                    oWorksheet.Cells[nNowRow, 10] = POWER2.Substring(0, 3);

                    //end------------------------------------------------------------------------

                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0, 3);
                    oWorksheet.Cells[nNowRow, 11] = "Power Tolerance(分档方式):";
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("E4", "I" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    oWorksheet.Cells[nNowRow, 13] = dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Operator Code(操作员代码):";
                    oWorksheet.Cells[nNowRow, 3] = dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                    oWorksheet.Cells[nNowRow, 5] = "QC Approval(检验员):";
                    oWorksheet.Cells[nNowRow, 10] = "Date(日期):";
                    oWorksheet.Cells[nNowRow, 12] = DateTime.Parse(dsVal.Tables[0].Rows[0]["EDIT_TIME"].ToString()).ToString("yyyy-MM-dd");
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "W.O.(工单):";
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    oWorksheet.Cells[nNowRow, 3] = sWO;
                    oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.Cells[nNowRow, 12] = dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 4.50;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 10.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 8.00;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 15.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("A1", "M" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A2", "M" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oWorksheet.get_Range("A1", "A1").Font.Size = 16;
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    //MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    return;
                }
            }
        }

        private void btnComPrint_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sValue, sWO;
            nNowRow = 1;

            if (gvCommon.RowCount > 0)
            {
                Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                try
                {
                    nColumn = gvCommon.Columns.Count;
                    nRow = gvCommon.RowCount;

                    //Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];
                    //oWorksheet.Name = txtStockNo.Text.Trim();

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + txtCPalletNo.Text.Trim() + "'");
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    sValue = dsVal.Tables[0].Rows[0]["PRO_ID"].ToString();
                    sValue = sValue.Substring(0, sValue.IndexOf("-") + 1) + " " + dsVal.Tables[0].Rows[0]["POWER"].ToString();
                    oWorksheet.Cells[nNowRow, 1] = sValue;
                    oWorksheet.get_Range("A1", "A1").Font.Bold = true;
                    oWorksheet.get_Range("A1", "M1").Merge(0);
                    ////去除FF列
                    //DevExpress.XtraGrid.Views.Grid.GridView gv = new DevExpress.XtraGrid.Views.Grid.GridView();
                    //gv = gvCommon;
                    //DevExpress.XtraGrid.Columns.GridColumn gc = new DevExpress.XtraGrid.Columns.GridColumn();

                    //gvCommon.Columns.Remove();

                    nNowRow++;
                    for (int c = 0; c < nColumn; c++)
                    {
                        //oWorksheet.Cells[nNowRow, c + 1] = dgCommon.Columns[c].HeaderText;
                        oWorksheet.Cells[nNowRow, c + 1] = gvCommon.Columns[c].Caption.ToString();
                    }
                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "序号";
                    oWorksheet.Cells[nNowRow, 2] = "托   号";
                    oWorksheet.Cells[nNowRow, 3] = "型   号";
                    oWorksheet.Cells[nNowRow, 4] = "序 列 号";
                    oWorksheet.Cells[nNowRow, 5] = "实测功率";
                    oWorksheet.Cells[nNowRow, 6] = "短路电流";
                    oWorksheet.Cells[nNowRow, 7] = "开路电压";
                    oWorksheet.Cells[nNowRow, 8] = "工作电流";
                    oWorksheet.Cells[nNowRow, 9] = "工作电压";
                    oWorksheet.Cells[nNowRow, 10] = "功率档";
                    oWorksheet.Cells[nNowRow, 11] = "等级";
                    oWorksheet.Cells[nNowRow, 12] = "生产日期";
                    oWorksheet.Cells[nNowRow, 13] = "接线盒";
                    oWorksheet.get_Range("A2", "M3").Interior.ColorIndex = 48;

                    System.Data.DataTable dtRemoveFF = new System.Data.DataTable();
                    dtRemoveFF = dsCommon.Tables[0];
                    dtRemoveFF.Columns.Remove("FF");
                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[nNowRow, c + 1] = dgCommon.Rows[r].Cells[c].Value;
                            //oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            oWorksheet.Cells[nNowRow, c + 1] = dtRemoveFF.Rows[r][c].ToString();
                        }
                    }
                    oWorksheet.get_Range("B4", "C" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L4", "L" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("D4", "D" + nRow.ToString()).EntireColumn.NumberFormat = "@";

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Total(合计):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.Cells[nNowRow, 4] = dsVal.Tables[0].Rows[0]["QTY"].ToString() + " Pcs";
                    oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    oWorksheet.get_Range("F" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MAX(最大值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMAX"].ToString();
                    oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MAX"].ToString();
                    oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MAX"].ToString();
                    oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MAX"].ToString();
                    oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MAX"].ToString();
                    oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0, 3);
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MIN(最小值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMIN"].ToString();
                    oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MIN"].ToString();
                    oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MIN"].ToString();
                    oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MIN"].ToString();
                    oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MIN"].ToString();
                    oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0, 3);
                    oWorksheet.Cells[nNowRow, 11] = "Power Tolerance(分档方式):";
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("E4", "I" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    oWorksheet.Cells[nNowRow, 13] = dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Operator Code(操作员代码):";
                    oWorksheet.Cells[nNowRow, 3] = dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                    oWorksheet.Cells[nNowRow, 5] = "QC Approval(检验员):";
                    oWorksheet.Cells[nNowRow, 10] = "Date(日期):";
                    oWorksheet.Cells[nNowRow, 12] = DateTime.Parse(dsVal.Tables[0].Rows[0]["EDIT_TIME"].ToString()).ToString("yyyy-MM-dd");
                    //oWorksheet.Cells[nNowRow, 12] = DateTime.Now.ToString("yyyy-MM-dd");
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "W.O.(工单):";
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    oWorksheet.Cells[nNowRow, 3] = sWO;
                    oWorksheet.Cells[nNowRow, 5] = "Certification(认证):";
                    oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.Cells[nNowRow, 12] = dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 4.50;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 10.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 8.00;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 15.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("A1", "M" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A2", "M" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oWorksheet.get_Range("A1", "A1").Font.Size = 16;

                    oWorksheet.PageSetup.PaperSize = XlPaperSize.xlPaperA4;
                    oWorksheet.PageSetup.Orientation = XlPageOrientation.xlLandscape;
                    oWorksheet.PageSetup.HeaderMargin = 0;
                    oWorksheet.PageSetup.FooterMargin = 0;
                    oWorksheet.PageSetup.LeftMargin = oExcel.InchesToPoints(0);
                    oWorksheet.PageSetup.RightMargin = oExcel.InchesToPoints(0);
                    oWorksheet.PageSetup.TopMargin = oExcel.InchesToPoints(0.4);
                    oWorksheet.PageSetup.BottomMargin = oExcel.InchesToPoints(0.4);
                    oWorksheet.PageSetup.CenterHorizontally = true;

                    //oExcel.Visible = true;
                    //oWorksheet.PrintPreview(true);
                    object missing = System.Reflection.Missing.Value;
                    oWorksheet.PrintOut(missing, missing, 1, false, missing, false, true, missing);
                    oWorkbook.Saved = true;
                    oExcel.Workbooks.Close();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                }
                finally
                {
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
            }
        }
        //#endregion

        //#region 画面2

        private void btnSchQuery_Click(object sender, EventArgs e)
        {
            string sQPalletNo;
            string[] sArrPalletNo;
            sQPalletNo = "";

            sPalletNo = txtSchPalletNO.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtSchPalletNO.SelectAll();
                txtSchPalletNO.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            dsSchueco = new DataSet();
            dsSchueco.Clear();
            dsSchueco = IVTestDateObject.GetPackingListSchuecoData(sQPalletNo);
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcSchueco.DataSource = null;
                gcSchueco.MainView = gvSchueco;
                gcSchueco.DataSource = dsSchueco.Tables[0];
                gvSchueco.BestFitColumns();//自动调整列宽度
                gvSchueco.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void btnSchExcel_Click(object sender, EventArgs e)
        {
            int nColumn, nRow;

            if (gvSchueco.RowCount > 0)
            {
                try
                {
                    nColumn = gvSchueco.Columns.Count;
                    nRow = gvSchueco.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];
                    //oWorksheet.Name = txtStockNo.Text.Trim();
                    for (int c = 0; c < nColumn; c++)
                    {
                        //oWorksheet.Cells[1, c + 1] = dgSchueco.Columns[c].HeaderText;
                        oWorksheet.Cells[1, c + 1] = gvSchueco.Columns[c].Caption.ToString().Trim();
                    }
                    for (int r = 0; r < nRow; r++)
                    {
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[r + 2, c + 1] = dgSchueco.Rows[r].Cells[c].Value;
                            oWorksheet.Cells[r + 2, c + 1] = dsSchueco.Tables[0].Rows[r][c].ToString();
                        }
                    }
                    nRow++;
                    oWorksheet.get_Range("A1", "K1").Interior.ColorIndex = 48;
                    oWorksheet.get_Range("A1", "K" + nRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A1", "K" + nRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.get_Range("K1", "K" + nRow.ToString()).EntireColumn.NumberFormat = "dd-MM-yyyy";
                    oWorksheet.get_Range("F1", "J" + nRow.ToString()).EntireColumn.NumberFormat = "##0.00";
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }
        }

        private void btnSchPrint_Click(object sender, EventArgs e)
        {

        }
        //#endregion

        //#region 画面3
        private void btnConQuery_Click(object sender, EventArgs e)
        {
            string sQPalletNo;
            string[] sArrPalletNo;
            sQPalletNo = "";

            sPalletNo = txtConPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtConPalletNo.SelectAll();
                txtConPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            dsConergy = new DataSet();
            dsConergy.Clear();
            dsConergy = IVTestDateObject.GetPackingListConergyData(sQPalletNo);
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcConergy.DataSource = null;
                gcConergy.MainView = gvConergy;
                gcConergy.DataSource = dsConergy.Tables[0];
                gvConergy.BestFitColumns();//自动调整列宽度
                gvConergy.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void btnConExcel_Click(object sender, EventArgs e)
        {
            int nColumn, nRow;

            if (gvConergy.RowCount > 0)
            {
                try
                {
                    nColumn = gvConergy.Columns.Count;
                    nRow = gvConergy.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];
                    //oWorksheet.Name = txtStockNo.Text.Trim();
                    for (int c = 0; c < nColumn; c++)
                    {
                        oWorksheet.Cells[1, c + 1] = gvConergy.Columns[c].Caption.ToString().Trim();
                    }
                    for (int r = 0; r < nRow; r++)
                    {
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[r + 2, c + 1] = dgConergy.Rows[r].Cells[c].Value;
                            oWorksheet.Cells[r + 2, c + 1] = dsConergy.Tables[0].Rows[r][c].ToString();
                        }
                    }
                    nRow++;
                    oWorksheet.get_Range("A1", "O1").Interior.ColorIndex = 48;
                    oWorksheet.get_Range("A1", "O" + nRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A1", "O" + nRow.ToString()).Borders.LineStyle = 1;
                    //oWorksheet.get_Range("N1", "N" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("M1", "M" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("F1", "F" + nRow.ToString()).EntireColumn.NumberFormat = "@";
                    oWorksheet.get_Range("G1", "L" + nRow.ToString()).EntireColumn.NumberFormat = "##0.00";
                    //oWorksheet.Cells.Font.Name = "Verdana";
                    //oWorksheet.Cells.Font.Size = 10;
                    //oWorksheet.Cells.AutoFit();
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }
        }

        private void btnConPrint_Click(object sender, EventArgs e)
        {

        }
        //#endregion

        //#region //日本清单导出

        private void sbtnJapanQuery_Click(object sender, EventArgs e)
        {
            string sQPalletNo;
            string[] sArrPalletNo;
            string ciNumber;
            string[] arryCINumber;
            string sCINumber = "";
            sQPalletNo = "";
            ciNumber = "";

            sPalletNo = meJapanPallet.Text.Trim();
            ciNumber = tedCINumber.Text.Trim();

            if (string.IsNullOrEmpty(sPalletNo) && string.IsNullOrEmpty(ciNumber))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg008}"), MESSAGEBOX_CAPTION);//【托号】和【CI】不能同时为空，请确认！
                txtSchPalletNO.SelectAll();
                txtSchPalletNO.Focus();
                return;
            }

            if (!string.IsNullOrEmpty(sPalletNo))
            {
                sPalletNo = sPalletNo.TrimStart('#').TrimEnd('#').ToString();
                sArrPalletNo = sPalletNo.Split('#');
                for (int i = 0; i < sArrPalletNo.Length; i++)
                {
                    if (sQPalletNo == "")
                    {
                        sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                    }
                    else
                    {
                        sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                    }
                }
            }

            if (!string.IsNullOrEmpty(ciNumber))
            {
                ciNumber = ciNumber.TrimStart('#').TrimEnd('#').ToString();
                arryCINumber = ciNumber.Split('#');
                for (int i = 0; i < arryCINumber.Length; i++)
                {
                    if (sCINumber == "")
                    {
                        sCINumber = sCINumber + "'" + arryCINumber[i].ToString().Trim() + "'";
                    }
                    else
                    {
                        sCINumber = sCINumber + ",'" + arryCINumber[i].ToString().Trim() + "'";
                    }
                }
            }

            dsJapan = new DataSet();
            dsJapan.Clear();
            dsJapan = IVTestDateObject.GetPackingListJapanData(sQPalletNo, sCINumber);
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcJapanPackingList.DataSource = null;
                gcJapanPackingList.MainView = gvJapanPackingList;
                gcJapanPackingList.DataSource = dsJapan.Tables["FlashData"];
                gvJapanPackingList.BestFitColumns();//自动调整列宽度
                gvJapanPackingList.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void sbtnJapanOut_Click(object sender, EventArgs e)
        {
            int nColumn, nRow;

            if (gvJapanPackingList.RowCount > 0)
            {
                try
                {
                    nColumn = gvJapanPackingList.Columns.Count;
                    nRow = gvJapanPackingList.RowCount;




                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet flashData = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];

                    //#region //导出FlashData 到Excel
                    flashData.Name = "FlashName";
                    flashData.get_Range("D2", "H" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    flashData.get_Range("L2", "L" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    flashData.get_Range("L1", "L1").ColumnWidth = 17.75;
                    flashData.get_Range("B1", "B1").ColumnWidth = 17.75;
                    flashData.get_Range("C1", "C1").ColumnWidth = 17.75;
                    //oWorksheet.Name = txtStockNo.Text.Trim();
                    for (int c = 0; c < nColumn; c++)
                    {
                        flashData.Cells[1, c + 1] = gvJapanPackingList.Columns[c].Caption.ToString().Trim();
                    }
                    for (int r = 0; r < nRow; r++)
                    {
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[r + 2, c + 1] = dgConergy.Rows[r].Cells[c].Value;
                            flashData.Cells[r + 2, c + 1] = dsJapan.Tables[0].Rows[r][c].ToString();

                        }
                    }
                    nRow++;
                    flashData.get_Range("A1", "L1").Interior.ColorIndex = 48;
                    flashData.get_Range("A1", "L" + nRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    flashData.Cells.get_Range("A1", "L" + nRow.ToString()).Borders.LineStyle = 1;
                    //#endregion

                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }
        }


        //#endregion

        private void xtraTabControl1_Click(object sender, EventArgs e)
        {

        }

        private void gvConergy_CustomDrawRowIndicator(object sender, DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs e)
        {
            e.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far;//行号居中
            if (e.Info.IsRowIndicator)
            {
                if (e.RowHandle >= 0)
                {
                    e.Info.DisplayText = (e.RowHandle + 1).ToString();//添加行号
                }
                else if (e.RowHandle < 0 && e.RowHandle > -1000)
                {
                    e.Info.Appearance.BackColor = System.Drawing.Color.AntiqueWhite;
                    e.Info.DisplayText = "G" + e.RowHandle.ToString();
                }
            }
        }

        private void gvSchueco_CustomDrawRowIndicator(object sender, DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs e)
        {
            e.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far;//行号居中
            if (e.Info.IsRowIndicator)
            {
                if (e.RowHandle >= 0)
                {
                    e.Info.DisplayText = (e.RowHandle + 1).ToString();//添加行号
                }
                else if (e.RowHandle < 0 && e.RowHandle > -1000)
                {
                    e.Info.Appearance.BackColor = System.Drawing.Color.AntiqueWhite;
                    e.Info.DisplayText = "G" + e.RowHandle.ToString();
                }
            }
        }

        private void gvCommon_CustomDrawRowIndicator(object sender, DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs e)
        {
            e.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far;//行号居中
            if (e.Info.IsRowIndicator)
            {
                if (e.RowHandle >= 0)
                {
                    e.Info.DisplayText = (e.RowHandle + 1).ToString();//添加行号
                }
                else if (e.RowHandle < 0 && e.RowHandle > -1000)
                {
                    e.Info.Appearance.BackColor = System.Drawing.Color.AntiqueWhite;
                    e.Info.DisplayText = "G" + e.RowHandle.ToString();
                }
            }
        }

        private void gvPackingList_CustomDrawRowIndicator(object sender, DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs e)
        {
            e.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far;//行号居中
            if (e.Info.IsRowIndicator)
            {
                if (e.RowHandle >= 0)
                {
                    e.Info.DisplayText = (e.RowHandle + 1).ToString();//添加行号
                }
                else if (e.RowHandle < 0 && e.RowHandle > -1000)
                {
                    e.Info.Appearance.BackColor = System.Drawing.Color.AntiqueWhite;
                    e.Info.DisplayText = "G" + e.RowHandle.ToString();
                }
            }
        }

        //#region//CommonImpPrint
        private void btnCommonImpPrint_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_CommonImpPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }
        //打印第一页
        private void prtDoc_CommonImpPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterImpData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            string _color = GetAndCheckColor(PalletNo);

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);
                strLine = "Rated Power:" + "            " + powerLevel + "W";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    strLine = "W.O.:";
                }
                else
                {
                    strLine = "W.O.(工单):";
                }
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                strLine = sWO;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b2
                {
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                }
                else
                {
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                }
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b3
                {
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                }
                else
                {
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                }
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);
                strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;

                if (val > 31)
                    val = 31;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += 30;
                }
                //e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());

            }
        }

        //#region
        //Common(2)Clickh事件   add by chao.pang   20130606
        private void spbCommon2_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            Common2Print(sPalltNo, sQty, "1");

            //string sPalltNo, sQty;
            //sQty = cboQty.Text.Trim();
            //sPalltNo = txtPalltNo.Text.Trim();
            //if (string.IsNullOrEmpty(sPalltNo))
            //{
            //                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
            //    txtPalltNo.SelectAll();
            //    txtPalltNo.Focus();
            //    return;
            //}

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            //if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            //{
            //    MessageService.ShowError(IVTestDateObject.ErrorMsg);
            //    return;
            //}

            //PrintDocument prtDoc = new PrintDocument();
            //prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_Common2Packge);
            //PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            //prtPrvDlg.Document = prtDoc;
            //prtPrvDlg.ShowDialog();

            //txtPalltNo.SelectAll();
            //txtPalltNo.Focus();
        }


        public void Common2Print(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_Common2Packge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }



        //#endregion
        //#region
        //add by chao.pang   20130606
        //打印第一页add by chao.pang   20130606
        private void prtDoc_Common2Packge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;  //DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle != "AutoPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }


            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                //strLine = "Type:" + "              " + ProductID;
                //mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                //e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 20, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 20, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 20, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 15, 345 - 20, 105 - 15);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 110 - 15, new StringFormat());
                //#endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                //#region    中间
                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 60 - 20, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 60 - 20, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 60 - 20, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 60 - 20, new StringFormat());
                }

                //直线和第三行内容                
                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 15, 645 - 20, 105 - 15);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 15, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 15, 645 - 20, 105 - 15);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 15, new StringFormat());
                }
                //#endregion
                //#region 右边

                //图片下面日期
                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());


                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;

                if (val > 31)
                    val = 31;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += 30;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE")// Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  ";// +dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            if (sQty == "28")
            {
                prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PrintPage2_New);
            }
            else
            {
                prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PrintPage_New);
            }
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }
        private void prtDoc_PrintPage2_New(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalltNo, ProductID, ProductionDate;
            int printingPageNo = 0;

            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            int cnt = ds.Tables[0].Rows.Count;
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            ProductionDate = ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString();
            ProductionDate = ProductionDate.Substring(8, 2) + "." + ProductionDate.Substring(5, 2) + "." + ProductionDate.Substring(0, 4);
            //打印内容
            string partNo, pos, sn, pmpp, isc, impp, voc, vmpp, ff, wo, palletNo, barcode, formatDate, formatArt;

            float lr;
            lr = -30;

            formatDate = ProductionDate.Substring(8, 2) + ProductionDate.Substring(3, 2) + ProductionDate.Substring(0, 2);
            formatDate = formatDate.Substring(0, 1) + "," + formatDate.Substring(1, 3) + "," + formatDate.Substring(4, 2);
            palletNo = ds.Tables[0].Rows[0]["PALLET_NO"].ToString();
            partNo = ds.Tables[0].Rows[0]["PID"].ToString();
            string PowerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string articleNo = ds.Tables[0].Rows[0]["ARTNUMBER"].ToString();

            if (partNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["PID"].ToString() != "")
                    {
                        partNo = ds.Tables[0].Rows[i]["PID"].ToString();
                        break;
                    }
                }
            }

            if (PowerLevel == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        PowerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (articleNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["ARTNUMBER"].ToString() != "")
                    {
                        articleNo = ds.Tables[0].Rows[i]["ARTNUMBER"].ToString();
                        break;
                    }
                }
            }

            //partNo = "2400003468";
            formatArt = "9900" + partNo;

            //格式转换，给partNo添加客户需求的逗号
            string readLine = formatArt;
            StringBuilder resultsLine = new StringBuilder("");
            int j = 0;

            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                j++;
                if (j % 3 == 0 && j < readLine.Length)
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                    resultsLine.Append(",");
                }
                else
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                }
            }

            readLine = resultsLine.ToString();
            //resultsLine.Clear();
            resultsLine = new StringBuilder("");
            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                resultsLine.Append(readLine.Substring(i, 1));
            }

            formatArt = resultsLine.ToString();

            //articleNo = "Conergy PH 185M";
            //BVNo = ">:>810110729-0057>8131107213022>899002400003468";
            string BV = string.Empty;
            if (palletNo == "" || articleNo == "" || cnt == 0 || partNo == "" || PowerLevel == "" || ProductionDate == "")
            {
                MessageBox.Show("包装信息不完整，请确认！\n ......\n\n栈板号：" + palletNo + "\n  编码：" + partNo + "\n  档位：" + PowerLevel + "\n  日期：" + ProductionDate, "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (palletNo == "")
                {
                    palletNo = "XXXXXXX-XXXX";
                }
                if (articleNo == "")
                {
                    articleNo = "XXXXXXX XX XXXX";
                }
                if (partNo == "")
                {
                    partNo = "XXXXXXXXXX";
                    formatArt = "9900" + "XXXXXXXXXX";
                }
                if (PowerLevel == "")
                {
                    PowerLevel = "XXX";
                }
                if (ProductionDate == "")
                {
                    formatDate = "X,XXX,XX";
                }
                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\delete.png"), 300, 400);

                //return;
            }
            BV = "10" + palletNo + "<FNC1><FNC1>" + "13" + formatDate + "3,0" + cnt + "<FNC1>" + formatArt;

            //BV = "10110729-0057<FNC1><FNC1>131,107,213,022<FNC1>99,002,400,003,468";
            string strLine;//用于存放当前行打印的信息
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //打印“Packing List”名称
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,12}", "Packing List");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition * 3 / 4, new StringFormat());

                //重新计算顶边距位置
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 6 / 5;

                //打印Conergy图片
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,4}", palletNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition, new StringFormat());

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\ConergyLogo.jpg"), 490, 10);
                //重新计算顶边距位置
                verticalPosition = verticalPosition + 45;

                //打印“Quantity:”名称
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Quantity:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + lr, verticalPosition, new StringFormat());

                //打印“Quantity:”名称
                strLine = String.Format("{0,4}", cnt.ToString());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160, verticalPosition, new StringFormat());

                //打印“Product:”名称
                strLine = String.Format("{0,8}", "Product:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 260, verticalPosition, new StringFormat());

                //打印partNo数据
                strLine = String.Format("{0,8}", partNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 330, verticalPosition, new StringFormat());

                //打印articleNo数据
                strLine = String.Format("{0,20}", articleNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 440, verticalPosition, new StringFormat());

                //打印条码
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(BV);
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics);
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);//Code 128/3 of 9 Barcode
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);//Code 128/3 of 9 Barcode
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 5, verticalPosition, new StringFormat());
                verticalPosition += 29;
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 5, verticalPosition, new StringFormat());

                //打印“Date: ”及日期
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Date: " + ProductionDate);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 + 20, verticalPosition + 18, new StringFormat());

                //重新计算顶边距
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 3 - 15;

                //定义字体
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);

                //打印标题
                strLine = String.Format("{0,8}", "Pos.");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 10, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", "SN");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 105, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Pmpp[Wp]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 180, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Isc[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 265, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Impp[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Voc[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 355, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Vmpp[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 430, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "FF[%]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 505, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Barcode");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 612, verticalPosition, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 4 / 3;
                System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔
                e.Graphics.DrawLine(myPen, lr + 10, verticalPosition, lr + 785, verticalPosition);//画线 

                verticalPosition = 251;
                for (int i = 0; i < cnt; i++)
                {
                    wo = ds.Tables[0].Rows[i]["WORK_ORDER_NO"].ToString();

                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    barcode = ds.Tables[0].Rows[i]["BARCODEDATA"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    ff = ds.Tables[0].Rows[i]["FF"].ToString();

                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    strLine = String.Format("{0,8}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 5, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 60, verticalPosition, new StringFormat());//80
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 180, verticalPosition, new StringFormat());//180
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 260, verticalPosition, new StringFormat());//260
                    strLine = String.Format("{0,20}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());//280
                    strLine = String.Format("{0,20}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 355, verticalPosition, new StringFormat());//355
                    strLine = String.Format("{0,20}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 435, verticalPosition, new StringFormat());//435
                    strLine = String.Format("{0,20}", ff);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 504, verticalPosition, new StringFormat());//504

                    strLine = Code128.Get128CodeString(barcode);
                    mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 630, verticalPosition - 10, new StringFormat());
                    verticalPosition += 32;
                }

            }
        }
        private void prtDoc_PrintPage_New(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalltNo, ProductID, ProductionDate;
            int printingPageNo = 0;

            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count > 28)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            int cnt = ds.Tables[0].Rows.Count;
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            ProductionDate = ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString();
            ProductionDate = ProductionDate.Substring(8, 2) + "." + ProductionDate.Substring(5, 2) + "." + ProductionDate.Substring(0, 4);
            //打印内容
            string partNo, pos, sn, pmpp, isc, impp, voc, vmpp, ff, wo, palletNo, barcode, formatDate, formatArt;

            float lr;
            lr = -30;

            formatDate = ProductionDate.Substring(8, 2) + ProductionDate.Substring(3, 2) + ProductionDate.Substring(0, 2);
            formatDate = formatDate.Substring(0, 1) + "," + formatDate.Substring(1, 3) + "," + formatDate.Substring(4, 2);
            palletNo = ds.Tables[0].Rows[0]["PALLET_NO"].ToString();
            partNo = ds.Tables[0].Rows[0]["PID"].ToString();
            string PowerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string articleNo = ds.Tables[0].Rows[0]["ARTNUMBER"].ToString();

            if (partNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["PID"].ToString() != "")
                    {
                        partNo = ds.Tables[0].Rows[i]["PID"].ToString();
                        break;
                    }
                }
            }

            if (PowerLevel == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        PowerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (articleNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["ARTNUMBER"].ToString() != "")
                    {
                        articleNo = ds.Tables[0].Rows[i]["ARTNUMBER"].ToString();
                        break;
                    }
                }
            }

            //partNo = "2400003468";
            formatArt = "9900" + partNo;

            //格式转换，给partNo添加客户需求的逗号
            string readLine = formatArt;
            StringBuilder resultsLine = new StringBuilder("");
            int j = 0;

            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                j++;
                if (j % 3 == 0 && j < readLine.Length)
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                    resultsLine.Append(",");
                }
                else
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                }
            }

            readLine = resultsLine.ToString();
            //resultsLine.Clear();
            resultsLine = new StringBuilder("");
            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                resultsLine.Append(readLine.Substring(i, 1));
            }

            formatArt = resultsLine.ToString();

            //articleNo = "Conergy PH 185M";
            //BVNo = ">:>810110729-0057>8131107213022>899002400003468";
            string BV = string.Empty;
            if (palletNo == "" || articleNo == "" || cnt == 0 || partNo == "" || PowerLevel == "" || ProductionDate == "")
            {
                MessageBox.Show("包装信息不完整，请确认！\n ......\n\n栈板号：" + palletNo + "\n  编码：" + partNo + "\n  档位：" + PowerLevel + "\n  日期：" + ProductionDate, "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (palletNo == "")
                {
                    palletNo = "XXXXXXX-XXXX";
                }
                if (articleNo == "")
                {
                    articleNo = "XXXXXXX XX XXXX";
                }
                if (partNo == "")
                {
                    partNo = "XXXXXXXXXX";
                    formatArt = "9900" + "XXXXXXXXXX";
                }
                if (PowerLevel == "")
                {
                    PowerLevel = "XXX";
                }
                if (ProductionDate == "")
                {
                    formatDate = "X,XXX,XX";
                }
                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\delete.png"), 300, 400);

                //return;
            }
            BV = "10" + palletNo + "<FNC1><FNC1>" + "13" + formatDate + "3,0" + cnt + "<FNC1>" + formatArt;

            //BV = "10110729-0057<FNC1><FNC1>131,107,213,022<FNC1>99,002,400,003,468";
            string strLine;//用于存放当前行打印的信息
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,12}", "Packing List");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition * 3 / 4, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 6 / 5;
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,4}", palletNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition, new StringFormat());

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\ConergyLogo.jpg"), 490, 10);

                verticalPosition = verticalPosition + 45;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Quantity:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + lr, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", cnt.ToString());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Product:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 260, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", partNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 330, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", articleNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 440, verticalPosition, new StringFormat());

                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(BV);
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics);
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);//Code 128/3 of 9 Barcode
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);//Code 128/3 of 9 Barcode
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 5, verticalPosition, new StringFormat());
                verticalPosition += 29;
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 5, verticalPosition, new StringFormat());

                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Date: " + ProductionDate);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 + 20, verticalPosition + 18, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 3;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Pos.");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 10, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", "SN");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 105, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Pmpp[Wp]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 180, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Isc[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 265, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Impp[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Voc[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 355, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Vmpp[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 430, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "FF[%]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 505, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Barcode");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 612, verticalPosition, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 4 / 3;
                System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔
                e.Graphics.DrawLine(myPen, lr + 10, verticalPosition, lr + 785, verticalPosition);//画线 

                verticalPosition = 270;
                for (int i = 0; i < cnt; i++)
                {
                    wo = ds.Tables[0].Rows[i]["WORK_ORDER_NO"].ToString();

                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    barcode = ds.Tables[0].Rows[i]["BARCODEDATA"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    ff = ds.Tables[0].Rows[i]["FF"].ToString();

                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    strLine = String.Format("{0,8}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 5, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 60, verticalPosition, new StringFormat());//
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 180, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 260, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 355, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 435, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", ff);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 504, verticalPosition, new StringFormat());

                    strLine = Code128.Get128CodeString(barcode);
                    mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 630, verticalPosition - 15, new StringFormat());
                    verticalPosition += 40;
                }

            }
        }

        private void btnMEMC_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_MEMCPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }

        //打印第一页
        private void prtDoc_MEMCPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            //string ProductID = string.Empty;
            string PID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            //ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();
            PID = ds.Tables[0].Rows[0]["PID"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (PID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PID"].ToString() != "")
                    {
                        PID = ds.Tables[0].Rows[i]["PID"].ToString();
                        break;
                    }
                }
            }
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                //strLine = "Type:" + "              " + ProductID;
                strLine = "Type:" + "              " + PID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图
                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\MEMC.jpg"), 650 - 20, 20 + 20);

                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);
                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 31)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }

        private void sbtnMEMCNew_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_MEMCNewPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();
        }

        //打印第一页
        private void prtDoc_MEMCNewPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));

            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 30, 600, 105 - 23));

                //产品类型
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 35 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 325, 30, 325, 55);
                e.Graphics.DrawLine(myPen, 45 - 20, 55, 645 - 20, 55);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 75 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 65 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 101 - 8, new StringFormat());



                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 35 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 35 - 2, new StringFormat());
                }
                else
                {
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 35 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 35 - 2, new StringFormat());
                }

                ////直线
                //e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 645 - 20, 105 - 8);

                //#endregion

                //#region 右边

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20 + 25);

                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 122, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 122, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());

                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 165 - 20;

                int val = ds.Tables[0].Rows.Count;
                int gap = 36;
                if (val > 25)
                {
                    val = 25;
                }
                else if (val > 20)
                {
                    gap = 25 * 36 / val;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 55 - 20, verticalPosition + 5, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 18, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110 - 20, verticalPosition, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, verticalPosition + 23, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);

                    verticalPosition += gap;
                }

                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());

                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
            }
        }

        /// <summary>
        /// MEMCSunEdison包装清单打印
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sbtMEMCSE_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_MEMCSE1);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();


        }

        //打印第一页
        private void prtDoc_MEMCSE1(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region  数据获取整理
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string workOrder = string.Empty;
            string productModule = string.Empty;
            string partNumber = string.Empty;
            string pos, sn, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 40)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //#region 获取托盘对应工单的OEM信息
            workOrder = ds.Tables[0].Rows[0]["WORK_ORDER_NO"].ToString();

            DataSet dsOEMInfo = IVTestDateObject.GetWorkOrderOEMByOrderNumberOrLotNumber(workOrder, string.Empty);

            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsOEMInfo.Tables[0].Rows.Count == 0)
            {
                MessageService.ShowMessage(string.Format("请工艺针对工单【{0}】进行OEM信息的维护！", workOrder), "提示");
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            productModule = dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["CUSROMER"].ToString()
                            + "-"
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["CELL_TYPE"].ToString()
                            + ds.Tables[0].Rows[0]["POWER"].ToString()
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["STRUCTURE_PARAM"].ToString()
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["PLACE_ORIGIN"].ToString()
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["GLASS_TYPE"].ToString()
                            + "-"
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["BOM_AUTHENTICATION_CODE"].ToString()
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["JUNCTION_BOX"].ToString();
            partNumber = "M"
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["CELL_SUPPLIER"].ToString()
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["CELL_MODEL"].ToString()
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["SE_MODULE_TYPE"].ToString()
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["PLACE_ORIGIN"].ToString()
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["BOM_DESIGN"].ToString();

            //#endregion

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                Code128 Code128 = new Code128();

                //#region //抬头

                //#region //左侧

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SE_Logo.jpg"), 50, 40 - 20 + 5);

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);

                strLine = "PALLET MEASURES AND WEIGHTS";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 160, new StringFormat());

                strLine = "Gross Weight";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 130, new StringFormat());
                strLine = ":";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 104, 244 + 20 - 130, new StringFormat());
                strLine = "550kg";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 110, 244 + 20 - 130, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 110, 244 + 20 - 110, 50 + 90 + 130, 244 + 20 - 110);

                strLine = "Length";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 100, new StringFormat());
                strLine = ":";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 104, 244 + 20 - 100, new StringFormat());
                strLine = "202.5cm";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 110, 244 + 20 - 100, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 110, 244 + 20 - 80, 50 + 90 + 130, 244 + 20 - 80);

                strLine = "Breadth";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 70, new StringFormat());
                strLine = ":";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 104, 244 + 20 - 70, new StringFormat());
                strLine = "113cm";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 110, 244 + 20 - 70, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 110, 244 + 20 - 50, 50 + 90 + 130, 244 + 20 - 50);

                strLine = "Height";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 40, new StringFormat());
                strLine = ":";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 104, 244 + 20 - 40, new StringFormat());
                strLine = "102.6cm";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 110, 244 + 20 - 40, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 110, 244 + 20 - 20, 50 + 90 + 130, 244 + 20 - 20);
                //#endregion

                //#region //中间

                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);

                strLine = "MODEL NO";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 350, 40 - 20 + 5, new StringFormat());
                strLine = productModule;
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 65, 40 - 20 + 23, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 220 + 15, 40 - 20 + 45, 50 + 220 + 250, 40 - 20 + 45);
                strLine = "BARCODE OF MODEL NO";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 30, 40 - 20 + 47, new StringFormat());

                strLine = Code128.Get128CodeString(productModule);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 40, 40 - 20 + 65, new StringFormat());

                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);

                strLine = "PART NO";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360, 120 + 15, new StringFormat());
                strLine = partNumber;
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 75, 120 + 33, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 220 + 15, 120 + 55, 50 + 220 + 250, 120 + 55);
                strLine = "BARCODE OF PART NO";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 30, 120 + 60, new StringFormat());

                strLine = Code128.Get128CodeString(partNumber);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 55, 120 + 78, new StringFormat());

                //#endregion

                //#region //右侧

                StringFormat sf = new StringFormat();
                sf.LineAlignment = StringAlignment.Center;
                sf.Alignment = StringAlignment.Center;

                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);

                strLine = "MODULE QUANTITY";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 565, 40 - 20 + 5, new StringFormat());
                strLine = ds.Tables[0].Rows.Count.ToString();
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 635, 40 - 20 + 23, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 220 + 15 + 255, 40 - 20 + 45, 50 + 220 + 250 + 245, 40 - 20 + 45);

                strLine = "BARCODE OF MODULE QTY";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 534, 40 - 20 + 47, new StringFormat());

                strLine = Code128.Get128CodeString(ds.Tables[0].Rows.Count.ToString());
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 20 + 267, 40 - 20 + 65, new StringFormat());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 40 - 20 + 65, 225, 50), sf);

                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);


                strLine = "PALLET NO";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 120 + 15, 225, 25), sf);
                strLine = PalletNo;
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 120 + 33, 225, 25), sf);

                //e.Graphics.DrawLine(myPen, 50 + 220 + 15 + 255, 120 + 45, 50 + 220 + 250 + 245, 120 + 45);
                e.Graphics.DrawLine(myPen, 50 + 220 + 15 + 255, 120 + 55, 50 + 220 + 250 + 245, 120 + 55);

                strLine = "BARCODE OF PALLET ID";
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 20 + 250, 120 + 47, new StringFormat());
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 20 + 250, 120 + 60, new StringFormat());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 120 + 60, 225, 25), sf);

                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 20 + 240, 120 + 65, new StringFormat());
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 20 + 240, 120 + 78, new StringFormat());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 120 + 78, 225, 50), sf);

                //#endregion

                //#endregion

                //#region 清单主体
                verticalPosition = 244 + 40;

                //条码部分矩形框
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(50, 244 + 40 - 10, 750 - 20 - 20 - 20, 1127 - 244 - 20 - 60));

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 20, verticalPosition, new StringFormat());
                strLine = "Serial No.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 + 20 + 250, verticalPosition, new StringFormat());

                //列名称下边的横线
                e.Graphics.DrawLine(myPen, 50, 244 + 40 - 10 + 40, 50 + 750 - 20 - 20 - 20, 244 + 40 - 10 + 40);

                //序号左边的竖线
                e.Graphics.DrawLine(myPen, 50 + 80, 244 + 40 - 10, 50 + 80, 244 + 40 - 10 + 1127 - 244 - 20 - 60);


                verticalPosition = 288 + 30;

                int val = ds.Tables[0].Rows.Count;
                int gap = 38;
                if (val <= 20)
                {
                    gap = 38;
                }
                else if (val > 20)
                {
                    gap = 20 * 38 / val;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();

                    if (i != 0)
                    {
                        e.Graphics.DrawLine(myPen, 50, verticalPosition - 2, 50 + 750 - 20 - 20 - 20, verticalPosition - 2);
                    }

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 55 + 20, verticalPosition + 5, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 18, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110 + 20 + 250, verticalPosition + 12, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 117 + 20 + 250, verticalPosition, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);

                    verticalPosition += gap;
                }

                //#endregion

            }
        }

        /// <summary>
        /// 摩洛哥 MAROC 订单 flash清单
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnMaroc_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_MarocPackge1);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }

        //打印第一页
        private void prtDoc_MarocPackge1(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, grade;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + "240W";// +powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 82 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 82 - 8, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SoviSol_LOGO.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);
                }

                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20 + 200, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 700 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 150;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 660, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1110 - 20, 790 - 20, 1110 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1110 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1110 - 20, 540 - 20, 1137 - 20);

                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }

        /// <summary>
        /// LSIS
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnLsis_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_LsisPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }
        //打印第一页
        private void prtDoc_LsisPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + "PVM M" + powerLevel + "P CT";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图片

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\LSISLOGO.jpg"), 650 - 20, 20);

                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 150;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }


        /// <summary>
        /// 当选择页签改变时处理
        /// </summary>
        private void xtraTabControl1_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            //当选择页签为SunEdisonFlashdate时触发
            if (xtraTabControl1.SelectedTabPage == this.xtraTabPage6)
            {
                //设置查询时间
                this.deStratTTime.DateTime = DateTime.Parse(DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd HH:mm:ss"));
                this.deEndTTime.DateTime = DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));

                //绑定产品等级
                string[] l_s = new string[] { "Column_Name", "Column_Index", "Column_type", "Column_code" };
                string category = "Basic_TestRule_PowerSet";
                System.Data.DataTable dtProLevel = BaseData.Get(l_s, category);
                System.Data.DataTable dtLevel = dtProLevel.Clone();
                dtLevel.TableName = "Level";
                DataRow[] drs = dtProLevel.Select(string.Format("Column_type='{0}' and Column_code<>'Grade_SCRAP'", BASE_POWERSET.PRODUCT_GRADE));
                foreach (DataRow dr in drs)
                    dtLevel.ImportRow(dr);

                DataView dview = dtLevel.DefaultView;
                dview.Sort = "Column_Index asc";
                ckcProGrade.Properties.DisplayMember = "Column_Name";
                ckcProGrade.Properties.ValueMember = "Column_code";
                ckcProGrade.Properties.DataSource = dview.Table;
            }
        }

        private void sbtSunEdisonQuery_Click(object sender, EventArgs e)
        {
            Hashtable hsSunEdison = new Hashtable();

            string workOrderNumber = teOrderNumber.Text.ToString().Trim();
            string proGrades = ckcProGrade.EditValue.ToString().Replace(" ", "");
            DateTime stratTTime = deStratTTime.DateTime;
            DateTime endTTime = deEndTTime.DateTime;
            string proId = txtProId.Text.ToString().Trim();
            string partName = txtPartName.Text.ToString().Trim();
            string lotNums = txtLotNums.Text.Trim();


            if (string.IsNullOrEmpty(workOrderNumber) && string.IsNullOrEmpty(proId)
                && string.IsNullOrEmpty(partName) && string.IsNullOrEmpty(lotNums))
            {
                MessageService.ShowMessage("工单号/产品ID/产品料号/组件序列号不能同时为空，请确认！", "提示");
                txtProId.SelectAll();
                txtProId.Focus();
                return;
            }

            hsSunEdison.Add("workOrderNumber", workOrderNumber);
            hsSunEdison.Add("proGrades", proGrades);
            hsSunEdison.Add("stratTTime", stratTTime);
            hsSunEdison.Add("endTTime", endTTime);
            hsSunEdison.Add("proId", proId);
            hsSunEdison.Add("partName", partName);
            hsSunEdison.Add("lotNums", lotNums);

            dsSunEdisonList = IVTestDateObject.GetSunEdisonList(hsSunEdison);

            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcSunEdison.DataSource = null;
                gcSunEdison.MainView = gvSunEdison;
                gcSunEdison.DataSource = dsSunEdisonList.Tables[0];
                gvSunEdison.BestFitColumns();//自动调整列宽度
                gvSunEdison.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

        }

        private void sbtnSunEdisonImport_Click(object sender, EventArgs e)
        {
            int nColumn, nRow;

            if (gvSunEdison.RowCount > 0)
            {
                try
                {
                    nColumn = gvSunEdison.Columns.Count;
                    nRow = gvSunEdison.RowCount;




                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet flashData = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];

                    //#region //导出FlashData 到Excel
                    flashData.Name = "SE Flash Data " + deStratTTime.DateTime.ToString("yyyy-MM-dd");
                    flashData.Cells.Font.Name = "Calibri";
                    flashData.get_Range("L2", "S" + nRow.ToString()).EntireColumn.NumberFormat = "###0.0000";
                    flashData.get_Range("G2", "H" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    flashData.get_Range("G2", "H" + nRow.ToString()).EntireColumn.NumberFormat = "###0.0000";
                    flashData.get_Range("W2", "W" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd HH:mm";
                    flashData.get_Range("A1", "A1").ColumnWidth = 17.75;
                    flashData.get_Range("B1", "B1").ColumnWidth = 10;
                    flashData.get_Range("C1", "R1").ColumnWidth = 9;
                    flashData.get_Range("S1", "T1").ColumnWidth = 36;
                    flashData.get_Range("U1", "U1").ColumnWidth = 9;
                    flashData.get_Range("V1", "V1").ColumnWidth = 17.75;
                    flashData.get_Range("W1", "W1").ColumnWidth = 9;
                    //oWorksheet.Name = txtStockNo.Text.Trim();
                    for (int c = 0; c < nColumn; c++)
                    {
                        flashData.Cells[1, c + 1] = gvSunEdison.Columns[c].Caption.ToString().Trim();
                    }
                    for (int r = 0; r < nRow; r++)
                    {
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[r + 2, c + 1] = dgConergy.Rows[r].Cells[c].Value;
                            flashData.Cells[r + 2, c + 1] = dsSunEdisonList.Tables[0].Rows[r][c].ToString();

                        }
                    }
                    nRow++;
                    flashData.get_Range("A1", "W" + nRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    flashData.Cells.get_Range("A1", "W" + nRow.ToString()).Borders.LineStyle = 1;
                    //#endregion

                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }
        }
        /// <summary>
        /// 打印NER Flash清单。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNERFlashList_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_NER);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }
        //#region 打印NER Flash清单。
        //打印第一页
        private void prtDoc_NER(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string prodId = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            prodId = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (prodId == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        prodId = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                string cellType = string.Empty;
                string productModel = string.Empty;
                if (prodId.Length >= 9)
                {
                    cellType = prodId.Substring(8, 1);
                    productModel = prodId.Substring(4, 5);
                }
                string type = "NER" + cellType + "-CS" + productModel + "-" + powerLevel;
                strLine = "Type:" + "    " + type;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\NER_FlashList_Logo.png"), 650 - 32, 20, 160, 78);
                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 150;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    verticalPosition += gap;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }
        //#endregion
        /// <summary>
        /// 20140610 add by chao.pang 新excl导出 销售 "翟天" 需求
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnComExcelNew_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";

            sPalletNo = txtCPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNo.SelectAll();
                txtCPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            if (gvCommon.RowCount > 0)
            {
                try
                {
                    nColumn = gvCommon.Columns.Count;
                    nRow = gvCommon.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData(sQPalletNo);
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    oWorksheet.Cells[nNowRow, 1] = gvCommon.Columns[0].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 2] = "INV No.";
                    oWorksheet.Cells[nNowRow, 3] = "BL No.";
                    oWorksheet.Cells[nNowRow, 4] = "Container No.";
                    oWorksheet.Cells[nNowRow, 5] = gvCommon.Columns[1].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 6] = gvCommon.Columns[3].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 7] = gvCommon.Columns[2].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 8] = gvCommon.Columns[9].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 9] = gvCommon.Columns[4].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 10] = gvCommon.Columns[6].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 11] = gvCommon.Columns[5].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 12] = gvCommon.Columns[7].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 13] = gvCommon.Columns[8].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 14] = gvCommon.Columns[10].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 15] = gvCommon.Columns[11].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 16] = gvCommon.Columns[12].Caption.ToString();

                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        oWorksheet.Cells[nNowRow, 1] = dsCommon.Tables[0].Rows[r][0].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 2] = "";
                        oWorksheet.Cells[nNowRow, 3] = "";
                        oWorksheet.Cells[nNowRow, 4] = "";
                        oWorksheet.Cells[nNowRow, 5] = dsCommon.Tables[0].Rows[r][1].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 6] = dsCommon.Tables[0].Rows[r][3].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 7] = dsCommon.Tables[0].Rows[r][2].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 8] = dsCommon.Tables[0].Rows[r][9].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 9] = dsCommon.Tables[0].Rows[r][4].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 10] = dsCommon.Tables[0].Rows[r][6].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 11] = dsCommon.Tables[0].Rows[r][5].ToString().Trim();
                        if (ckImp.Checked == true)
                        {

                            oWorksheet.Cells[nNowRow, 12] = dsCommon.Tables[0].Rows[r][7].ToString().Trim() + dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim();
                        }
                        else
                        {
                            oWorksheet.Cells[nNowRow, 12] = dsCommon.Tables[0].Rows[r][7].ToString().Trim();
                        }

                        oWorksheet.Cells[nNowRow, 13] = dsCommon.Tables[0].Rows[r][8].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 14] = dsCommon.Tables[0].Rows[r][10].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 15] = dsCommon.Tables[0].Rows[r][11].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 16] = dsCommon.Tables[0].Rows[r][12].ToString().Trim();
                    }
                    oWorksheet.get_Range("O4", "O" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("G4", "G" + nRow.ToString()).EntireColumn.NumberFormat = "@";
                    oWorksheet.get_Range("I1", "M" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 4.50;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 14.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 10.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("N1", "N1").ColumnWidth = 8.00;
                    oWorksheet.get_Range("O1", "O1").ColumnWidth = 15.00;
                    oWorksheet.get_Range("P1", "P1").ColumnWidth = 11.00;

                    oWorksheet.get_Range("A1", "P" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A1", "P" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    return;
                }
            }
        }
        /// <summary>
        /// SUNEDSION 客户其导出的FLASH DATA中体现SE单晶组件的内部代码
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSE_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";

            sPalletNo = txtCPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNo.SelectAll();
                txtCPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            if (gvCommon.RowCount > 0)
            {
                try
                {
                    nColumn = gvCommon.Columns.Count;
                    nRow = gvCommon.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData(sQPalletNo);
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    oWorksheet.Cells[nNowRow, 1] = gvCommon.Columns[0].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 2] = "INV No.";
                    oWorksheet.Cells[nNowRow, 3] = "BL No.";
                    oWorksheet.Cells[nNowRow, 4] = "Container No.";
                    oWorksheet.Cells[nNowRow, 5] = gvCommon.Columns[1].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 6] = gvCommon.Columns[3].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 7] = gvCommon.Columns[2].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 8] = gvCommon.Columns[9].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 9] = gvCommon.Columns[4].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 10] = gvCommon.Columns[6].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 11] = gvCommon.Columns[5].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 12] = gvCommon.Columns[7].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 13] = gvCommon.Columns[8].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 14] = gvCommon.Columns[10].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 15] = gvCommon.Columns[11].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 16] = gvCommon.Columns[12].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 17] = gvCommon.Columns[13].Caption.ToString();

                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        oWorksheet.Cells[nNowRow, 1] = dsCommon.Tables[0].Rows[r][0].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 2] = "";
                        oWorksheet.Cells[nNowRow, 3] = "";
                        oWorksheet.Cells[nNowRow, 4] = "";
                        oWorksheet.Cells[nNowRow, 5] = dsCommon.Tables[0].Rows[r][1].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 6] = dsCommon.Tables[0].Rows[r][3].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 7] = dsCommon.Tables[0].Rows[r][2].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 8] = dsCommon.Tables[0].Rows[r][9].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 9] = dsCommon.Tables[0].Rows[r][4].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 10] = dsCommon.Tables[0].Rows[r][6].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 11] = dsCommon.Tables[0].Rows[r][5].ToString().Trim();
                        if (ckImp.Checked == true)
                        {

                            oWorksheet.Cells[nNowRow, 12] = dsCommon.Tables[0].Rows[r][7].ToString().Trim() + dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim();
                        }
                        else
                        {
                            oWorksheet.Cells[nNowRow, 12] = dsCommon.Tables[0].Rows[r][7].ToString().Trim();
                        }

                        oWorksheet.Cells[nNowRow, 13] = dsCommon.Tables[0].Rows[r][8].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 14] = dsCommon.Tables[0].Rows[r][10].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 15] = dsCommon.Tables[0].Rows[r][11].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 16] = dsCommon.Tables[0].Rows[r][12].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 17] = dsCommon.Tables[0].Rows[r][14].ToString().Trim();
                    }
                    oWorksheet.get_Range("O4", "O" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("G4", "G" + nRow.ToString()).EntireColumn.NumberFormat = "@";
                    oWorksheet.get_Range("I1", "M" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 4.50;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 14.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 10.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("N1", "N1").ColumnWidth = 8.00;
                    oWorksheet.get_Range("O1", "O1").ColumnWidth = 15.00;
                    oWorksheet.get_Range("P1", "P1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("Q1", "Q1").ColumnWidth = 11.00;

                    oWorksheet.get_Range("A1", "Q" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A1", "Q" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    return;
                }
            }
        }
        /// <summary>
        /// ELCO 20140806 ADD BY CHAO.PANG
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sbtElco_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_ElcoPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }
        //打印第一页
        private void prtDoc_JSPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();
            string lotQty = ds.Tables[0].Rows[0]["LOT_QTY"].ToString();
            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                string moduleType = ProductID.Substring(ProductID.Length - 1, 1).ToUpper();
                if (moduleType.Equals("P"))
                {
                    moduleType = "U";
                }
                //产品类型
                strLine = "Type:" + "              " + "JS-" + powerLevel + moduleType + "-OI" + lotQty;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "         " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:0~+5W";// +dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):0~+5W";// +dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图片
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\JapanL.jpg"), 640, 20, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\JapanL.jpg"), 640, 20);
                }

                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 15, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 15, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);


                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;
                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);


                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }

        /// <summary>
        /// Japan Solar flash list
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sbtJapanSolar_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_JSPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }

        //打印第一页
        private void prtDoc_ElcoPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + "ELCO-A" + powerLevel + ProductID.Substring(ProductID.Length - 1, 1);
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 60 - 20, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 60 - 20, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 60 - 20, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 60 - 20, new StringFormat());
                }
                //直线和第三行内容                
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 15, 645 - 20, 105 - 15);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 15, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 15, 645 - 20, 105 - 15);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 15, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图片
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\ELCO1.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\ELCO1.jpg"), 650 - 20, 25);
                }

                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 15, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 15, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 31)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);

                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;

                }
                //调整下方边框位置

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);


                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }

        /// <summary>
        /// 20140929新格式清单
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sbtCommon_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";

            sPalletNo = txtCPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNo.SelectAll();
                txtCPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            if (gvCommon.RowCount > 0)
            {
                try
                {
                    nColumn = gvCommon.Columns.Count;
                    nRow = gvCommon.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData(sQPalletNo);
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    //oWorksheet.Cells[nNowRow, 1] = gvCommon.Columns[0].Caption.ToString();
                    oWorksheet.Cells[nNowRow, 1] = "Model_No";
                    oWorksheet.Cells[nNowRow, 2] = "HBL";
                    oWorksheet.Cells[nNowRow, 3] = "Invoice";
                    oWorksheet.Cells[nNowRow, 4] = "Container";
                    oWorksheet.Cells[nNowRow, 5] = "Pallet_No";
                    oWorksheet.Cells[nNowRow, 6] = "Module_SerialNumber";
                    oWorksheet.Cells[nNowRow, 7] = "Part_No";
                    oWorksheet.Cells[nNowRow, 8] = "Pnom (W)";
                    oWorksheet.Cells[nNowRow, 9] = "Pmp [W]";
                    oWorksheet.Cells[nNowRow, 10] = "Voc[V]";
                    oWorksheet.Cells[nNowRow, 11] = "Isc [A]";
                    oWorksheet.Cells[nNowRow, 12] = "Vmp [V]";
                    oWorksheet.Cells[nNowRow, 13] = "Imp [A]";
                    oWorksheet.Cells[nNowRow, 14] = "Production Date";

                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        //oWorksheet.Cells[nNowRow, 1] = dsCommon.Tables[0].Rows[r][0].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 1] = dsCommon.Tables[0].Rows[r][2].ToString().Trim(); ;
                        oWorksheet.Cells[nNowRow, 2] = "";
                        oWorksheet.Cells[nNowRow, 3] = "";
                        oWorksheet.Cells[nNowRow, 4] = "";
                        oWorksheet.Cells[nNowRow, 5] = dsCommon.Tables[0].Rows[r][1].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 6] = dsCommon.Tables[0].Rows[r][3].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 7] = dsCommon.Tables[0].Rows[r][14].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 8] = dsCommon.Tables[0].Rows[r][9].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 9] = dsCommon.Tables[0].Rows[r][4].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 10] = dsCommon.Tables[0].Rows[r][6].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 11] = dsCommon.Tables[0].Rows[r][5].ToString().Trim();
                        oWorksheet.Cells[nNowRow, 12] = dsCommon.Tables[0].Rows[r][8].ToString().Trim();
                        if (ckImp.Checked == true)
                        {

                            oWorksheet.Cells[nNowRow, 13] = dsCommon.Tables[0].Rows[r][7].ToString().Trim() + dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim();
                        }
                        else
                        {
                            oWorksheet.Cells[nNowRow, 13] = dsCommon.Tables[0].Rows[r][7].ToString().Trim();
                        }
                        oWorksheet.Cells[nNowRow, 14] = dsCommon.Tables[0].Rows[r][11].ToString().Trim();
                    }

                    oWorksheet.get_Range("N2", "N" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("A2", "A" + nRow.ToString()).EntireColumn.NumberFormat = "@";
                    oWorksheet.get_Range("I2", "M" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 14.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 17.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 17.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("N1", "N1").ColumnWidth = 15.00;

                    oWorksheet.get_Range("A1", "N" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A1", "N" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    return;
                }
            }
        }
        /// <summary>
        /// Memcse清单修改
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sbtMemcseNew_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_MEMCSENEW01);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();
        }
        //打印第一页
        private void prtDoc_MEMCSENEW01(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region  数据获取整理
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string workOrder = string.Empty;
            string productModule = string.Empty;
            string partNumber = string.Empty;
            string pos, sn;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 40)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //#region 获取托盘对应工单的OEM信息
            workOrder = ds.Tables[0].Rows[0]["WORK_ORDER_NO"].ToString();

            DataSet dsOEMInfo = IVTestDateObject.GetWorkOrderOEMByOrderNumberOrLotNumber(workOrder, string.Empty);

            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsOEMInfo.Tables[0].Rows.Count == 0)
            {
                MessageService.ShowMessage(string.Format("请工艺针对工单【{0}】进行OEM信息的维护！", workOrder), "提示");
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            productModule = dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["CUSROMER"].ToString()
                            + "-"
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["CELL_TYPE"].ToString()
                            + ds.Tables[0].Rows[0]["POWER"].ToString()
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["STRUCTURE_PARAM"].ToString()
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["PLACE_ORIGIN"].ToString()
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["GLASS_TYPE"].ToString()
                            + "-"
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["BOM_AUTHENTICATION_CODE"].ToString()
                            + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["JUNCTION_BOX"].ToString();
            partNumber = "M"
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["CELL_SUPPLIER"].ToString()
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["CELL_MODEL"].ToString()
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["SE_MODULE_TYPE"].ToString()
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["PLACE_ORIGIN"].ToString()
                        + dsOEMInfo.Tables["POR_WO_OEM"].Rows[0]["BOM_DESIGN"].ToString();

            //#endregion

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            float verticalPosition01 = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Font mainFont01 = new System.Drawing.Font("Courier New", 13);	//打印的字体
            System.Drawing.Font mainFont02 = new System.Drawing.Font("Courier New", 8);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                Code128 Code128 = new Code128();

                //#region //抬头

                //#region //左侧

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SE_Logo.jpg"), 50, 40 - 20 + 5);

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                mainFont01 = new System.Drawing.Font("Arial", 13, FontStyle.Bold);
                mainFont02 = new System.Drawing.Font("Arial", 9, FontStyle.Bold);
                strLine = "PALLET MEASURES AND WEIGHTS";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 160, new StringFormat());

                strLine = "Gross Weight";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 130, new StringFormat());
                strLine = ":";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 104, 244 + 20 - 130, new StringFormat());
                strLine = "550kg";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 110, 244 + 20 - 130, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 110, 244 + 20 - 110, 50 + 90 + 130, 244 + 20 - 110);

                strLine = "Length";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 100, new StringFormat());
                strLine = ":";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 104, 244 + 20 - 100, new StringFormat());
                strLine = "202.5cm";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 110, 244 + 20 - 100, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 110, 244 + 20 - 80, 50 + 90 + 130, 244 + 20 - 80);

                strLine = "Breadth";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 70, new StringFormat());
                strLine = ":";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 104, 244 + 20 - 70, new StringFormat());
                strLine = "113cm";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 110, 244 + 20 - 70, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 110, 244 + 20 - 50, 50 + 90 + 130, 244 + 20 - 50);

                strLine = "Height";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50, 244 + 20 - 40, new StringFormat());
                strLine = ":";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 104, 244 + 20 - 40, new StringFormat());
                strLine = "102.6cm";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 110, 244 + 20 - 40, new StringFormat());
                e.Graphics.DrawLine(myPen, 50 + 110, 244 + 20 - 20, 50 + 90 + 130, 244 + 20 - 20);
                //#endregion

                //#region //中间

                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);

                strLine = "SUNEDISON MODEL NO.";
                e.Graphics.DrawString(strLine, mainFont01, Brushes.Black, 300, 40 - 20 + 5 + 10 + 10, new StringFormat());
                strLine = productModule; //"SE-D330BPC-35";
                e.Graphics.DrawString(strLine, mainFont01, Brushes.Black, 50 + 220 + 30 + 35, 40 - 20 + 47 + 10, new StringFormat());

                strLine = Code128.Get128CodeString(productModule);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 40, 40 - 20 + 65 + 15, new StringFormat());

                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);

                strLine = "INTERNAL PART NO.";
                e.Graphics.DrawString(strLine, mainFont02, Brushes.Black, 345, 120 + 15 + 20 + 5, new StringFormat());
                strLine = partNumber;//"MDA320PHD";
                e.Graphics.DrawString(strLine, mainFont02, Brushes.Black, 50 + 220 + 95, 120 + 65, new StringFormat());

                strLine = Code128.Get128CodeString(partNumber);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 220 + 60, 120 + 85, new StringFormat());

                //#endregion

                //#region //右侧

                StringFormat sf = new StringFormat();
                sf.LineAlignment = StringAlignment.Center;
                sf.Alignment = StringAlignment.Center;

                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);

                strLine = "PALLET SERIAL NO.";
                e.Graphics.DrawString(strLine, mainFont01, Brushes.Black, 565, 40 - 20 + 5 + 10 + 10, new StringFormat());
                strLine = PalletNo;//"CH14210087";
                e.Graphics.DrawString(strLine, mainFont01, Brushes.Black, 595, 40 - 20 + 47 + 10, new StringFormat());

                strLine = Code128.Get128CodeString(PalletNo);//"CH14210087");
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 40 - 20 + 65 + 10, 225, 50), sf);

                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);

                strLine = "MODULE QUANTITY";
                e.Graphics.DrawString(strLine, mainFont02, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 120 + 15 + 15 + 5, 225, 25), sf);
                strLine = ds.Tables[0].Rows.Count.ToString();
                e.Graphics.DrawString(strLine, mainFont02, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 120 + 60, 225, 25), sf);

                strLine = Code128.Get128CodeString(ds.Tables[0].Rows.Count.ToString());
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, new RectangleF(50 + 220 + 15 + 255, 120 + 78, 225, 50), sf);

                //#endregion

                //#endregion

                //#region 清单主体
                verticalPosition = 244 + 40;

                //条码部分矩形框
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(50, 244 + 40 - 10, 750 - 20 - 20 - 20, 1127 - 244 - 20 - 60));

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 + 20, verticalPosition, new StringFormat());
                strLine = "Serial No.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 + 20 + 250, verticalPosition, new StringFormat());

                //序号左边的竖线
                e.Graphics.DrawLine(myPen, 50 + 70, 244 + 40 - 10, 50 + 70, 244 + 40 - 10 + 1127 - 244 - 20 - 60);
                //竖线1
                e.Graphics.DrawLine(myPen, (750 - 20 - 20 - 20 - 50) / 2 + 60, 244 + 40 - 10 + 42, (750 - 20 - 20 - 20 - 50) / 2 + 60, 244 + 40 - 10 + 1127 - 244 - 20 - 60);
                //竖线2
                e.Graphics.DrawLine(myPen, (750 - 20 - 20 - 20 - 50) / 2 + 130, 244 + 40 - 10 + 42, (750 - 20 - 20 - 20 - 50) / 2 + 130, 244 + 40 - 10 + 1127 - 244 - 20 - 60);

                verticalPosition = 288 + 30;
                verticalPosition01 = 288 + 30;
                int val = ds.Tables[0].Rows.Count;
                int gap = 38;
                int count = 0;
                for (int i = 0; i < 20; i++)
                {
                    e.Graphics.DrawLine(myPen, 50, verticalPosition - 2, 50 + 750 - 20 - 20 - 20, verticalPosition - 2);
                    verticalPosition += gap;
                }
                verticalPosition = 288 + 30;
                if (val <= 20)
                    count = 20;
                else
                    count = val;
                for (int i = 0; i < count; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    if (i >= 0 && i < 20)
                    {
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        strLine = String.Format("{0,2}", pos);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 55 + 20, verticalPosition + 7, new StringFormat());
                        strLine = Code128.Get128CodeString(sn);
                        mainFont = new System.Drawing.Font("Code 128", 18, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110 + 20 + 50, verticalPosition + 10, new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                        strLine = String.Format("{0,4}", sn);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 117 + 20 + 50, verticalPosition - 1, new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                        verticalPosition += gap;
                    }
                    if (i > 19 && i < 39)
                    {
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                        strLine = String.Format("{0,2}", pos);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 55 + 20 + 330, verticalPosition01 + 7, new StringFormat());
                        strLine = Code128.Get128CodeString(sn);
                        mainFont = new System.Drawing.Font("Code 128", 18, FontStyle.Regular);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110 + 20 + 345 + 50, verticalPosition01 + 10, new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                        strLine = String.Format("{0,4}", sn);
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 117 + 20 + 345 + 50, verticalPosition01 - 1, new StringFormat());
                        mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                        verticalPosition01 += gap;
                    }


                }
                //#endregion

            }
        }

        //#region 百力达包装清单打印
        /// <summary>
        /// 百力达包装清单
        /// </summary>
        private void sbtBSEP_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_BSEPPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();


            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }

        private void prtDoc_BSEPPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string PruductType = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 28)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = Convert.ToString(ds.Tables[0].Rows[0]["POWER"]);       //标称功率  
            string cellQty = Convert.ToString(ds.Tables[0].Rows[0]["LOT_QTY"]);      //电池片数量

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            //百力达 产品Type 生成
            PruductType = "BSEP6"
                        + "-" + cellQty
                        + "-" + powerLevel;
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + PruductType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图片
                e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\BsepLogo.bmp"), 650, 13, 90, 60);

                strLine = "百力达";
                mainFont = new System.Drawing.Font("Arial", 13, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 660, 77, new StringFormat());

                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);

                    //判断组件块数在 28 到 31 之间的话 缩小条码大小
                    int big = 15;
                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition + 5, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置
                if (val > 28 && val <= 30)
                {
                    e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                    e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                    e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                    e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                    e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);
                }


                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);


                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }

        //#endregion

        //#region SUNFarming 包装清单打印
        private void sbtnSUNFarming_Click(object sender, EventArgs e)
        {
            _sunFarmingFlag = 0;
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_SUNFarminfPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();


            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }

        private void prtDoc_SUNFarminfPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string PruductType = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 28)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = Convert.ToString(ds.Tables[0].Rows[0]["POWER"]);       //标称功率  
            string cellQty = Convert.ToString(ds.Tables[0].Rows[0]["LOT_QTY"]);      //电池片数量

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            //SUNFarming 产品Type 生成
            PruductType = "AT235-60P";
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + PruductType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图片
                if (_sunFarmingFlag == 0)
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\sf.bmp"), 630, 40);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SUNFarming01.jpg"), 630, 40);
                }
                else if (_sunFarmingFlag == 1)
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SUNFarming.jpg"), 630, 40);
                }

                //图片下面日期
                if (radioGroup1.EditValue.ToString().Trim() == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 150;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 31)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;

                }
                //调整下方边框位置

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);


                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }
        //#endregion

        //#region 出口国外清单打印
        private void sbtnCommonJapan_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_CommonJapanPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();


            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }

        private void prtDoc_CommonJapanPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = txtPalltNo.Text.Trim();
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 30)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 48 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 38 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 74 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间

                if (radioGroup1.EditValue.ToString().Trim() == "E")
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());

                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 43, new StringFormat());

                    e.Graphics.DrawLine(myPen, 355 - 20, 69, 645 - 20 - 30, 69);
                    strLine = "ART No.:" + dsVal.Tables[0].Rows[0]["PS_SUBCODE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 73, new StringFormat());

                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());

                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());

                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 43, new StringFormat());

                    e.Graphics.DrawLine(myPen, 355 - 20, 69, 645 - 20, 69);
                    strLine = "ART No.:" + dsVal.Tables[0].Rows[0]["PS_SUBCODE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 73, new StringFormat());

                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边

                //图片下面日期

                strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 150;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (radioGroup1.EditValue.ToString().Trim() == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);

                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);


                if (radioGroup1.EditValue.ToString().Trim() == "E") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "E") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (radioGroup1.EditValue.ToString().Trim() == "E") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }

        //#endregion



        //#region BJPower 带接线盒 包装清单打印
        private void sbtBJPower_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            BJPowerPrint(sPalltNo, sQty, "1");
        }
        //#endregion
        /// <summary>
        /// ruhu.yu 为BJPower打印新建方法
        /// </summary>
        /// <param name="sPalltNo"></param>
        /// <param name="sQty"></param>
        /// <param name="printCopy"></param>
        public void BJPowerPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(_PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(_PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            PrintDocument prtDoc = new PrintDocument();

            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_BJPowerJunctionBoxPackge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }

        }

        private void prtDoc_BJPowerJunctionBoxPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = "";
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }


            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelJ0 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelJ0.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        sPckType = "-H/L";
                    }

                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        //由于出现J1/2/3等只截取后两位有问题，改成按照"-"读取后取值。jiabao-2016-10-19
                        int StartIndex = sPckType.IndexOf("-");
                        int Lenght = sPckType.Length;
                        sPckType = sPckType.Substring(StartIndex, Lenght - StartIndex);
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    int StartIndex = sPckType.IndexOf("-");
                    int Lenght = sPckType.Length;
                    sPckType = sPckType.Substring(StartIndex, Lenght - StartIndex);
                    //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                //strLine = "Type:" + "              " + ProductID;
                //mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                //e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 20, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 20, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 20, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 15, 345 - 20, 105 - 15);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 110 - 15, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容

                string QuanlityGrade = "";
                if (_PrintStyle == "ManualPrint")
                {
                    QuanlityGrade = radioGroup1.EditValue.ToString().Trim();
                }
                else if (_PrintStyle == "AutoPrint")
                {
                    QuanlityGrade = _QuanlityGrade;
                }
                if (QuanlityGrade == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 60 - 20, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 60 - 20, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 60 - 20, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 60 - 20, new StringFormat());
                }


                //直线和第三行内容                
                if (QuanlityGrade == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 15, 645 - 20, 105 - 15);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 15, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 15, 645 - 20, 105 - 15);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 15, new StringFormat());
                }
                //#endregion
                //#region 右边

                //图片下面日期
                if (QuanlityGrade == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                //string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (QuanlityGrade != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;

                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (QuanlityGrade == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (QuanlityGrade == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());


                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (QuanlityGrade != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += 30;
                }
                //e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向
                if (QuanlityGrade == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());


            }

        }
        //#endregion

        /// <summary>
        /// conergy使用common的序列号规则
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void spbConergy16_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            Conergy16Print(sPalltNo, sQty, "");
        }

        public void Conergy16Print(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            if (sQty == "28")
            {
                prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PrintConergyComPage2_New);
            }
            else
            {
                prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PrintConergyComPage_New);
            }
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();

                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }

        }
        private void prtDoc_PrintConergyComPage2_New(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalletNo = string.Empty, ProductID, ProductionDate;
            int printingPageNo = 0;


            if (_PrintStyle == "ManualPrint")
            {
                sPalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                sPalletNo = _PalletNo;
            }

            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            int cnt = ds.Tables[0].Rows.Count;
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            ProductionDate = ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString();
            ProductionDate = ProductionDate.Substring(8, 2) + "." + ProductionDate.Substring(5, 2) + "." + ProductionDate.Substring(0, 4);
            //打印内容
            string partNo, pos, sn, pmpp, isc, impp, voc, vmpp, ff, wo, palletNo, barcode, formatDate, formatArt;

            float lr;
            lr = -30;

            formatDate = ProductionDate.Substring(8, 2) + ProductionDate.Substring(3, 2) + ProductionDate.Substring(0, 2);
            formatDate = formatDate.Substring(0, 1) + "," + formatDate.Substring(1, 3) + "," + formatDate.Substring(4, 2);
            palletNo = ds.Tables[0].Rows[0]["PALLET_NO"].ToString();
            partNo = ds.Tables[0].Rows[0]["PID"].ToString();
            string PowerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string articleNo = ds.Tables[0].Rows[0]["ARTNUMBER"].ToString();

            if (partNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["PID"].ToString() != "")
                    {
                        partNo = ds.Tables[0].Rows[i]["PID"].ToString();
                        break;
                    }
                }
            }

            if (PowerLevel == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        PowerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (articleNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["ARTNUMBER"].ToString() != "")
                    {
                        articleNo = ds.Tables[0].Rows[i]["ARTNUMBER"].ToString();
                        break;
                    }
                }
            }

            //partNo = "2400003468";
            formatArt = "9900" + partNo;

            //格式转换，给partNo添加客户需求的逗号
            string readLine = formatArt;
            StringBuilder resultsLine = new StringBuilder("");
            int j = 0;

            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                j++;
                if (j % 3 == 0 && j < readLine.Length)
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                    resultsLine.Append(",");
                }
                else
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                }
            }

            readLine = resultsLine.ToString();
            //resultsLine.Clear();
            resultsLine = new StringBuilder("");
            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                resultsLine.Append(readLine.Substring(i, 1));
            }

            formatArt = resultsLine.ToString();

            //articleNo = "Conergy PH 185M";
            //BVNo = ">:>810110729-0057>8131107213022>899002400003468";
            string BV = string.Empty;
            if (palletNo == "" || articleNo == "" || cnt == 0 || partNo == "" || PowerLevel == "" || ProductionDate == "")
            {
                MessageBox.Show("包装信息不完整，请确认！\n ......\n\n栈板号：" + palletNo + "\n  编码：" + partNo + "\n  档位：" + PowerLevel + "\n  日期：" + ProductionDate, "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (palletNo == "")
                {
                    palletNo = "XXXXXXX-XXXX";
                }
                if (articleNo == "")
                {
                    articleNo = "XXXXXXX XX XXXX";
                }
                if (partNo == "")
                {
                    partNo = "XXXXXXXXXX";
                    formatArt = "9900" + "XXXXXXXXXX";
                }
                if (PowerLevel == "")
                {
                    PowerLevel = "XXX";
                }
                if (ProductionDate == "")
                {
                    formatDate = "X,XXX,XX";
                }
                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\delete.png"), 300, 400);

                //return;
            }
            BV = "10" + palletNo + "<FNC1><FNC1>" + "13" + formatDate + "3,0" + cnt + "<FNC1>" + formatArt;

            //BV = "10110729-0057<FNC1><FNC1>131,107,213,022<FNC1>99,002,400,003,468";
            string strLine;//用于存放当前行打印的信息
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //打印“Packing List”名称
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,12}", "Packing List");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition * 3 / 4, new StringFormat());

                //重新计算顶边距位置
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 6 / 5;

                //打印Conergy图片
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,4}", palletNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition, new StringFormat());

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\ConergyLogo.jpg"), 490, 10);
                //重新计算顶边距位置
                verticalPosition = verticalPosition + 45;

                //打印“Quantity:”名称
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Quantity:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + lr, verticalPosition, new StringFormat());

                //打印“Quantity:”名称
                strLine = String.Format("{0,4}", cnt.ToString());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160, verticalPosition, new StringFormat());

                //打印“Product:”名称
                strLine = String.Format("{0,8}", "Product:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 260, verticalPosition, new StringFormat());

                //打印partNo数据
                strLine = String.Format("{0,8}", partNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 330, verticalPosition, new StringFormat());

                //打印articleNo数据
                strLine = String.Format("{0,20}", articleNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 440, verticalPosition, new StringFormat());

                //打印条码
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(BV);
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics);
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);//Code 128/3 of 9 Barcode
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);//Code 128/3 of 9 Barcode
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 8, verticalPosition, new StringFormat());
                verticalPosition += 29;
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 8, verticalPosition, new StringFormat());

                //打印“Date: ”及日期
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Date: " + ProductionDate);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 + 17, verticalPosition + 18, new StringFormat());

                //重新计算顶边距
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 3 - 15;

                //定义字体
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);

                //打印标题
                strLine = String.Format("{0,8}", "Pos.");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 10, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", "SN");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 105, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Pmpp[Wp]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 200, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Isc[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 285, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Impp[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 300, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Voc[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 375, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Vmpp[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 450, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "FF[%]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 520, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Barcode");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 612, verticalPosition, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 4 / 3;
                System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔
                e.Graphics.DrawLine(myPen, lr + 10, verticalPosition, lr + 785, verticalPosition);//画线 

                verticalPosition = 251;
                for (int i = 0; i < cnt; i++)
                {
                    wo = ds.Tables[0].Rows[i]["WORK_ORDER_NO"].ToString();

                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    barcode = ds.Tables[0].Rows[i]["BARCODEDATA"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    ff = ds.Tables[0].Rows[i]["FF"].ToString();

                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    strLine = String.Format("{0,8}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 5, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 60, verticalPosition, new StringFormat());//80
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 205, verticalPosition, new StringFormat());//180
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());//260
                    strLine = String.Format("{0,20}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 300, verticalPosition, new StringFormat());//280
                    strLine = String.Format("{0,20}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 375, verticalPosition, new StringFormat());//355
                    strLine = String.Format("{0,20}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 450, verticalPosition, new StringFormat());//435
                    strLine = String.Format("{0,20}", ff);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 514, verticalPosition, new StringFormat());//504

                    strLine = Code128.Get128CodeString(barcode);
                    mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 630, verticalPosition - 10, new StringFormat());
                    verticalPosition += 32;
                }

            }
        }
        private void prtDoc_PrintConergyComPage_New(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            string sPalltNo = string.Empty, ProductID, ProductionDate;
            int printingPageNo = 0;

            if (_PrintStyle == "ManualPrint")
            {
                sPalltNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                sPalltNo = _PalletNo;
            }

            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet ds = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count > 28)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            int cnt = ds.Tables[0].Rows.Count;
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            ProductionDate = ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString();
            ProductionDate = ProductionDate.Substring(8, 2) + "." + ProductionDate.Substring(5, 2) + "." + ProductionDate.Substring(0, 4);
            //打印内容
            string partNo, pos, sn, pmpp, isc, impp, voc, vmpp, ff, wo, palletNo, barcode, formatDate, formatArt;

            float lr;
            lr = -30;

            formatDate = ProductionDate.Substring(8, 2) + ProductionDate.Substring(3, 2) + ProductionDate.Substring(0, 2);
            formatDate = formatDate.Substring(0, 1) + "," + formatDate.Substring(1, 3) + "," + formatDate.Substring(4, 2);
            palletNo = ds.Tables[0].Rows[0]["PALLET_NO"].ToString();
            partNo = ds.Tables[0].Rows[0]["PID"].ToString();
            string PowerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string articleNo = ds.Tables[0].Rows[0]["ARTNUMBER"].ToString();

            if (partNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["PID"].ToString() != "")
                    {
                        partNo = ds.Tables[0].Rows[i]["PID"].ToString();
                        break;
                    }
                }
            }

            if (PowerLevel == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        PowerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (articleNo == "")
            {
                for (int i = 0; i < cnt; i++)
                {
                    if (ds.Tables[0].Rows[i]["ARTNUMBER"].ToString() != "")
                    {
                        articleNo = ds.Tables[0].Rows[i]["ARTNUMBER"].ToString();
                        break;
                    }
                }
            }

            //partNo = "2400003468";
            formatArt = "9900" + partNo;

            //格式转换，给partNo添加客户需求的逗号
            string readLine = formatArt;
            StringBuilder resultsLine = new StringBuilder("");
            int j = 0;

            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                j++;
                if (j % 3 == 0 && j < readLine.Length)
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                    resultsLine.Append(",");
                }
                else
                {
                    resultsLine.Append(readLine.Substring(i, 1));
                }
            }

            readLine = resultsLine.ToString();
            //resultsLine.Clear();
            resultsLine = new StringBuilder("");
            for (int i = readLine.Length - 1; i >= 0; i--)
            {
                resultsLine.Append(readLine.Substring(i, 1));
            }

            formatArt = resultsLine.ToString();

            //articleNo = "Conergy PH 185M";
            //BVNo = ">:>810110729-0057>8131107213022>899002400003468";
            string BV = string.Empty;
            if (palletNo == "" || articleNo == "" || cnt == 0 || partNo == "" || PowerLevel == "" || ProductionDate == "")
            {
                MessageBox.Show("包装信息不完整，请确认！\n ......\n\n栈板号：" + palletNo + "\n  编码：" + partNo + "\n  档位：" + PowerLevel + "\n  日期：" + ProductionDate, "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (palletNo == "")
                {
                    palletNo = "XXXXXXX-XXXX";
                }
                if (articleNo == "")
                {
                    articleNo = "XXXXXXX XX XXXX";
                }
                if (partNo == "")
                {
                    partNo = "XXXXXXXXXX";
                    formatArt = "9900" + "XXXXXXXXXX";
                }
                if (PowerLevel == "")
                {
                    PowerLevel = "XXX";
                }
                if (ProductionDate == "")
                {
                    formatDate = "X,XXX,XX";
                }
                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\delete.png"), 300, 400);

                //return;
            }
            BV = "10" + palletNo + "<FNC1><FNC1>" + "13" + formatDate + "3,0" + cnt + "<FNC1>" + formatArt;

            //BV = "10110729-0057<FNC1><FNC1>131,107,213,022<FNC1>99,002,400,003,468";
            string strLine;//用于存放当前行打印的信息
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,12}", "Packing List");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition * 3 / 4, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 6 / 5;
                mainFont = new System.Drawing.Font("Arial", 25, FontStyle.Bold);
                strLine = String.Format("{0,4}", palletNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60, verticalPosition, new StringFormat());

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\ConergyLogo.jpg"), 490, 10);

                verticalPosition = verticalPosition + 45;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Quantity:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 60 + lr, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", cnt.ToString());
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Product:");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 260, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", partNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 330, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", articleNo);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 440, verticalPosition, new StringFormat());

                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(BV);
                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics);
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);//Code 128/3 of 9 Barcode
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);//Code 128/3 of 9 Barcode
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 8, verticalPosition, new StringFormat());
                verticalPosition += 29;
                mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                //mainFont = new System.Drawing.Font("Code 128", 20, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 10 - 8, verticalPosition, new StringFormat());

                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Date: " + ProductionDate);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 + 17, verticalPosition + 18, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 3;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                strLine = String.Format("{0,8}", "Pos.");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 10, verticalPosition, new StringFormat());
                strLine = String.Format("{0,4}", "SN");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 105, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Pmpp[Wp]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 200, verticalPosition, new StringFormat());
                strLine = String.Format("{0,8}", "Isc[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 285, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Impp[A]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 300, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Voc[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 375, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Vmpp[V]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 450, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "FF[%]");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 520, verticalPosition, new StringFormat());
                strLine = String.Format("{0,20}", "Barcode");
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 612, verticalPosition, new StringFormat());

                verticalPosition = verticalPosition + mainFont.GetHeight(e.Graphics) * 4 / 3;
                System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔
                e.Graphics.DrawLine(myPen, lr + 10, verticalPosition, lr + 785, verticalPosition);//画线 

                verticalPosition = 270;
                for (int i = 0; i < cnt; i++)
                {
                    wo = ds.Tables[0].Rows[i]["WORK_ORDER_NO"].ToString();

                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    barcode = ds.Tables[0].Rows[i]["BARCODEDATA"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    ff = ds.Tables[0].Rows[i]["FF"].ToString();

                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    strLine = String.Format("{0,8}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 5, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 60, verticalPosition, new StringFormat());//
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 205, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 280, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 300, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 375, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 450, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,20}", ff);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 514, verticalPosition, new StringFormat());

                    strLine = Code128.Get128CodeString(barcode);
                    mainFont = new System.Drawing.Font("Code 128", 24, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, lr + 630, verticalPosition - 15, new StringFormat());
                    verticalPosition += 40;
                }

            }
        }

        private void stpSunnoModule_Click(object sender, EventArgs e)
        {
            _sunFarmingFlag = 1;
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_SUNFarminfPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();


            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
        }

        private void btnCommonPrintASM_Click(object sender, EventArgs e)
        {
            /*
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_CommonPackgea);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtPalltNo.SelectAll();
            txtPalltNo.Focus();
             */

            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            ASMPrint(sPalltNo, sQty, "1");
        }
        //为ASM清单自动打印新建方法 yibin.fei 2017.11.17
        public void ASMPrint(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_CommonPackgea);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }



        private void prtDoc_CommonPackgea(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }

            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {

                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > drPowerLevelY1.Length)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > drPowerLevelI1.Length)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else
                    {
                        sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));





                //产品类型
                strLine = "Type:" + "              " + "ASM6610PC";//ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容

                //画右边矩形和第一行内容
                string type = string.Empty;
                if (_PrintStyle == "ManualPrint")
                {
                    type = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }



                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图片
                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SoviSol_LOGO.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);
                }

                //图片下面日期
                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                // type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);

                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;
                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向


                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());

            }
        }

        private void btnJingKe_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();
            //if (string.IsNullOrEmpty(sPalltNo))
            //{
            //                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
            //    txtPalltNo.SelectAll();
            //    txtPalltNo.Focus();
            //    return;
            //}

            ////DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            //PPSMasterdsTable = new DataSet();
            //PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            //if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            //{
            //    MessageService.ShowError(IVTestDateObject.ErrorMsg);
            //    return;
            //}

            //PrintDocument prtDoc = new PrintDocument();
            //prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_JingKePackge);
            //PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            //prtPrvDlg.Document = prtDoc;
            //prtPrvDlg.ShowDialog();


            //txtPalltNo.SelectAll();
            //txtPalltNo.Focus();
            JingKePrint(sPalltNo, sQty, "");
        }
        /// <summary>
        /// ruhu.yu 为JingKe打印新建方法
        /// </summary>
        /// <param name="sPalltNo"></param>
        /// <param name="sQty"></param>
        /// <param name="printCopy"></param>
        public void JingKePrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_JingKePackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }

        //打印第一页
        private void prtDoc_JingKePackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;

            string PalletNo = string.Empty;
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string lotNumber = ds.Tables[0].Rows[0]["LOT_QTY"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-" + "J0";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            //string _color = GetAndCheckColor(PalletNo);

            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                //strLine = "Type:" + "              " + ProductID;
                strLine = "Type:" + "              " + "JKM" + powerLevel + ProductID.Remove(0, ProductID.Length - 1) + "P" + "-" + lotNumber;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                string type = string.Empty;
                if (_PrintStyle == "ManualPrint")
                {
                    type = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图片
                if (type == "AE")
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\jingke.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\jingke.jpg"), 650 - 20, 20);
                }

                //图片下面日期
                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                //string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 31)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);

                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;
                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 250 - 20, 1097 - 20 + 20, 250 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 252 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                //strLine = "Color:  " + _color;
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        private void QingTian_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            QingTianPrint(sPalltNo, sQty, "");
        }
        /// <summary>
        /// ruhu.yu 为QingTian打印新建方法
        /// </summary>
        /// <param name="sPalltNo"></param>
        /// <param name="sQty"></param>
        /// <param name="printCopy"></param>
        public void QingTianPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_QingTianPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();

            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }

        //打印第一页
        private void prtDoc_QingTianPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string lotNumber = ds.Tables[0].Rows[0]["LOT_QTY"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else
                    {
                        sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            //string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                //strLine = "Type:" + "              " + ProductID;
                strLine = "Type:" + "              " + "QTSM" + ProductID.Remove(0, 4);
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间


                string type = string.Empty;
                if (_PrintStyle == "ManualPrint")
                {
                    type = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边
                //画最右边的图片
                if (type == "AE")
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\qingtian.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\qingtian.jpg"), 650 - 20, 20);
                }

                //图片下面日期
                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                //string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 150;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    //转换code128字体
                    strLine = Code128.Get128CodeString(sn);
                    //条码大小
                    int big = 15;
                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    //sn 编码
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    //pmpp
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    //isc
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    //voc
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    //impp
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    //vmpp
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;

                }
                //调整下方边框位置

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 250 - 20, 1097 - 20 + 20, 250 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向


                if (type == "AE") // Q.001 b4
                {
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 252 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                //strLine = "Color:  " + _color;
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        /// <summary>
        /// ne 新 需求单号：CR-MES-20160427-01
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNeNew_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            NeNewPrint(sPalltNo, sQty, "");
        }

        public void NeNewPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_NENEW);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();

                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }

        //#region 打印NER Flash清单。
        //打印第一页
        private void prtDoc_NENEW(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string prodId = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！

                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            prodId = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");

                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    sPckType = "-H/L";
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (prodId == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        prodId = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }

            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                string cellType = string.Empty;
                string productModel = string.Empty;
                if (prodId.Length >= 9)
                {
                    cellType = prodId.Substring(8, 1);
                    productModel = prodId.Substring(4, 5);
                }


                string type = "NER" + cellType + "-CS" + productModel + "-" + powerLevel;
                strLine = "Type:" + "    " + type;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间

                string QuanlityGrade = string.Empty;
                if (_PrintStyle == "ManualPrint")
                {
                    QuanlityGrade = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    QuanlityGrade = _QuanlityGrade;
                }
                //画右边矩形和第一行内容
                if (QuanlityGrade == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (QuanlityGrade == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (QuanlityGrade == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边

                //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\NER_FlashList_Logo.png"), 650 - 32, 20, 160, 78);
                //图片下面日期
                if (QuanlityGrade == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (QuanlityGrade == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (QuanlityGrade == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    verticalPosition += gap;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                if (QuanlityGrade == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }
        //#endregion

        private void btnQX_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            QXPrint(sPalltNo, sQty, "");
        }
        /// <summary>
        /// ruhu.yu 为QX打印新建方法
        /// </summary>
        /// <param name="sPalltNo"></param>
        /// <param name="sQty"></param>
        /// <param name="printCopy"></param>
        public void QXPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_QXPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }

        //打印第一页
        private void prtDoc_QXPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            string lotNumber = ds.Tables[0].Rows[0]["LOT_QTY"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                //strLine = "Type:" + "              " + ProductID;
                string mt = "30";
                if (ProductID.Contains("6612P")) mt = "36";

                strLine = string.Format("Type:               SL{0}TU-{1}P", powerLevel, mt);
                //    strLine = "Type:" + "              " + "JKM" + powerLevel + ProductID.Remove(0, ProductID.Length - 1) + "-" + lotNumber;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion


                string type = string.Empty;
                if (_PrintStyle == "ManualPrint")
                {
                    type = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                //#region    中间
                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                //图片下面日期
                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                //string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type == "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);

                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type == "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;

                }
                //调整下方边框位置

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);


                if (type == "AE") // Q.001 b4
                {
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }

        /// <summary>
        /// 单排只打印一列序列号
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void stnCom_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            ComPrint(sPalltNo, sQty, "");
        }

        /// <summary>
        /// ruhu.yu  为com打印新建方法
        /// </summary>
        /// <param name="sPalltNo"></param>
        /// <param name="sQty"></param>
        /// <param name="printCopy"></param>
        public void ComPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_ComPackge1);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }
        //打印第一页
        private void prtDoc_ComPackge1(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = "";
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, grade;
            string sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else
                    {
                        sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));
            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);

            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);


                ////功率fyb
                string strSAP_NO = dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                string strWorkNumber = dsVal.Tables[0].Rows[0]["WORKNUMBER"].ToString();
                DataSet ds_powershow = IVTestDateObject.GetPowerShowData(strWorkNumber, strSAP_NO);
                DataRow[] drPowerShow = ds_powershow.Tables[0].Select(string.Format("BEFORE_POWER={0}", powerLevel));
                if (drPowerShow.Count() > 0 && powerLevel == drPowerShow[0]["BEFORE_POWER"].ToString())
                {
                    powerLevel = drPowerShow[0]["AFTER_POWER"].ToString();
                }
                ds_powershow = null;
                drPowerShow = null;

                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType; //+"240W"; 
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间
                //画右边矩形和第一行内容
                string type = "";
                if (_PrintStyle == "ManualPrint")
                {
                    type = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 82 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 82 - 8, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片
                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SoviSol_LOGO.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);
                }

                //图片下面日期
                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20 + 200, verticalPosition, new StringFormat());

                //string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 700 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 150;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110 - 20 + 200, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20 + 200, verticalPosition + 15, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 700 - 10 - 30, verticalPosition + 5, new StringFormat());
                    }
                    verticalPosition += gap;
                }

                //e.Graphics.DrawLine(myPen, 40 - 20, 1110 - 20, 790 - 20, 1110 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1110 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1110 - 20, 540 - 20, 1137 - 20);



                //e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                ////e.Graphics.DrawLine(myPen, 290 - 20, 1110 - 20, 290 - 20, 1137 - 20);
                ////e.Graphics.DrawLine(myPen, 540 - 20, 1110 - 20, 540 - 20, 1137 - 20);
                ////e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                ////e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 250 - 20, 1097 - 20 + 20, 250 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向


                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 252 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());

            }
        }

        private void btnComQuerySTS_Click(object sender, EventArgs e)
        {
            string sQPalletNo;
            string[] sArrPalletNo;
            sQPalletNo = "";

            sPalletNo = txtCPalletNoSTS.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNoSTS.SelectAll();
                txtCPalletNoSTS.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            dsCommon = new DataSet();
            dsCommon.Clear();
            dsCommon = IVTestDateObject.GetPackingListCommonDataSTS(sQPalletNo);
            dsCommon.Tables[0].Columns.Add("内部柜号");
            dsCommon.Tables[0].Columns["内部柜号"].SetOrdinal(1);
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcSTS.DataSource = null;
                gcSTS.MainView = gvSTS;
                gcSTS.DataSource = dsCommon.Tables[0];
                gvSTS.BestFitColumns();//自动调整列宽度
                gvSTS.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void btnComExcelSTS_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sValue, sWO, sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";

            sPalletNo = txtCPalletNoSTS.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNoSTS.SelectAll();
                txtCPalletNoSTS.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            if (gvSTS.RowCount > 0)
            {
                try
                {
                    nColumn = gvSTS.Columns.Count;
                    nRow = gvSTS.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];
                    //oWorksheet.Name = txtStockNo.Text.Trim();

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData(sQPalletNo);
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    sValue = dsVal.Tables[0].Rows[0]["PRO_ID"].ToString();
                    sValue = sValue.Substring(0, sValue.IndexOf("-") + 1) + " " + dsVal.Tables[0].Rows[0]["POWER"].ToString();
                    oWorksheet.Cells[nNowRow, 1] = sValue;
                    oWorksheet.get_Range("A1", "A1").Font.Bold = true;
                    oWorksheet.get_Range("A1", "O1").Merge(0);

                    nNowRow++;
                    for (int c = 0; c < nColumn; c++)
                    {
                        oWorksheet.Cells[nNowRow, c + 1] = gvSTS.Columns[c].Caption.ToString();
                    }
                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "序号";
                    oWorksheet.Cells[nNowRow, 2] = "内部柜号";
                    oWorksheet.Cells[nNowRow, 3] = "托   号";
                    oWorksheet.Cells[nNowRow, 4] = "型   号";
                    oWorksheet.Cells[nNowRow, 5] = "序 列 号";
                    oWorksheet.Cells[nNowRow, 6] = "实测功率";
                    oWorksheet.Cells[nNowRow, 7] = "短路电流";
                    oWorksheet.Cells[nNowRow, 8] = "开路电压";
                    oWorksheet.Cells[nNowRow, 9] = "工作电流";
                    oWorksheet.Cells[nNowRow, 10] = "工作电压";
                    oWorksheet.Cells[nNowRow, 11] = "功率档";
                    oWorksheet.Cells[nNowRow, 12] = "等级";
                    oWorksheet.Cells[nNowRow, 13] = "生产日期";
                    oWorksheet.Cells[nNowRow, 14] = "接线盒";
                    oWorksheet.Cells[nNowRow, 15] = "填充因子";
                    oWorksheet.get_Range("A2", "O3").Interior.ColorIndex = 48;


                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[nNowRow, c + 1] = dgCommon.Rows[r].Cells[c].Value;
                            //oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            if (ckImp.Checked == true)
                            {
                                if (c == 7)
                                {
                                    int index = dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().IndexOf("-") + 1;
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString().Trim() + "-" + dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().Substring(index, 1);
                                }
                                else
                                {
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                                }
                            }
                            else
                            {
                                oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            }
                        }
                    }
                    oWorksheet.get_Range("B4", "D" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("M4", "M" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("E4", "E" + nRow.ToString()).EntireColumn.NumberFormat = "@";

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Total(合计):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //新增合计------------------------------------------------------------------------
                    int alots = 0;
                    decimal psum = 0;
                    foreach (DataRow drow in dsVal.Tables[0].Rows)
                    {
                        alots += Convert.ToInt16(drow["QTY"]);
                        psum += Convert.ToDecimal(drow["PSUM"]);
                    }
                    oWorksheet.Cells[nNowRow, 5] = Convert.ToSingle(alots) + " Pcs";
                    oWorksheet.Cells[nNowRow, 6] = Convert.ToSingle(Math.Round(psum, 2));
                    //------------------------------------------------------------------------
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "O" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MAX(最大值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "E" + nNowRow.ToString()).Interior.ColorIndex = 48;


                    //新增最大值------------------------------------------------------------------------
                    string PMAX = string.Empty, ISC_MAX = string.Empty, VOC_MAX = string.Empty, IMP_MAX = string.Empty, VMP_MAX = string.Empty, POWER = string.Empty;


                    PMAX = dsVal.Tables[0].Compute("max(PMAX)", null).ToString();
                    ISC_MAX = dsVal.Tables[0].Compute("max(ISC_MAX)", null).ToString();
                    VOC_MAX = dsVal.Tables[0].Compute("max(VOC_MAX)", null).ToString();
                    IMP_MAX = dsVal.Tables[0].Compute("max(IMP_MAX)", null).ToString();
                    VMP_MAX = dsVal.Tables[0].Compute("max(VMP_MAX)", null).ToString();
                    POWER = dsVal.Tables[0].Compute("max(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 6] = PMAX;
                    oWorksheet.Cells[nNowRow, 7] = ISC_MAX;
                    oWorksheet.Cells[nNowRow, 8] = VOC_MAX;
                    oWorksheet.Cells[nNowRow, 9] = IMP_MAX;
                    oWorksheet.Cells[nNowRow, 10] = VMP_MAX;
                    oWorksheet.Cells[nNowRow, 11] = POWER.Substring(0, 3);
                    //end------------------------------------------------------------------------

                    oWorksheet.get_Range("L" + nNowRow.ToString(), "O" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MIN(最小值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "E" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //新增最小值------------------------------------------------------------------------
                    string PMIN = string.Empty, ISC_MIN = string.Empty, VOC_MIN = string.Empty, IMP_MIN = string.Empty, VMP_MIN = string.Empty, POWER2 = string.Empty;
                    PMIN = dsVal.Tables[0].Compute("min(PMIN)", null).ToString();
                    ISC_MIN = dsVal.Tables[0].Compute("min(ISC_MIN)", null).ToString();
                    VOC_MIN = dsVal.Tables[0].Compute("min(VOC_MIN)", null).ToString();
                    IMP_MIN = dsVal.Tables[0].Compute("min(IMP_MIN)", null).ToString();
                    VMP_MIN = dsVal.Tables[0].Compute("min(VMP_MIN)", null).ToString();
                    POWER2 = dsVal.Tables[0].Compute("min(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 6] = PMIN;
                    oWorksheet.Cells[nNowRow, 7] = ISC_MIN;
                    oWorksheet.Cells[nNowRow, 8] = VOC_MIN;
                    oWorksheet.Cells[nNowRow, 9] = IMP_MIN;
                    oWorksheet.Cells[nNowRow, 10] = VMP_MIN;
                    oWorksheet.Cells[nNowRow, 11] = POWER2.Substring(0, 3);

                    oWorksheet.Cells[nNowRow, 12] = "Power Tolerance(分档方式):";
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("F4", "J" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    oWorksheet.Cells[nNowRow, 14] = dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Operator Code(操作员代码):";
                    oWorksheet.Cells[nNowRow, 4] = dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                    oWorksheet.Cells[nNowRow, 6] = "QC Approval(检验员):";
                    oWorksheet.Cells[nNowRow, 11] = "Date(日期):";
                    oWorksheet.Cells[nNowRow, 13] = DateTime.Parse(dsVal.Tables[0].Rows[0]["EDIT_TIME"].ToString()).ToString("yyyy-MM-dd");
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("D" + nNowRow.ToString(), "E" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("F" + nNowRow.ToString(), "G" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("F" + nNowRow.ToString(), "G" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("H" + nNowRow.ToString(), "J" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("M" + nNowRow.ToString(), "N" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "W.O.(工单):";
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    oWorksheet.Cells[nNowRow, 4] = sWO;
                    oWorksheet.Cells[nNowRow, 6] = "Certification(认证）：";
                    oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    oWorksheet.Cells[nNowRow, 11] = "Shift(班别):";
                    oWorksheet.Cells[nNowRow, 13] = dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("D" + nNowRow.ToString(), "E" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.get_Range("F" + nNowRow.ToString(), "G" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("F" + nNowRow.ToString(), "G" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("H" + nNowRow.ToString(), "J" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("M" + nNowRow.ToString(), "N" + nNowRow.ToString()).Merge(0);

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 4.50;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 10.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 8.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 15.00;
                    oWorksheet.get_Range("N1", "N1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("O1", "O1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("A1", "M" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A2", "O" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oWorksheet.get_Range("A1", "A1").Font.Size = 16;
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    return;
                }
            }
        }

        private void btnMlaiSelect_Click(object sender, EventArgs e)
        {
            string sPalltNo;
            sPalltNo = txtMlaiPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtMlaiPalletNo.SelectAll();
                txtMlaiPalletNo.Focus();
                return;
            }

            DataSet dsPackingList = IVTestDateObject.GetPPSMasterDataForMalai(sPalltNo);
            if (dsPackingList == null || dsPackingList.Tables.Count < 1 || dsPackingList.Tables["dsReturn01"].Rows.Count < 1 || dsPackingList.Tables["dsReturn02"].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg009}"), MESSAGEBOX_CAPTION);//无该托盘信息！
                return;
            }
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcPackingList01.DataSource = null;
                gcPackingList01.MainView = gvPackingList01;
                gcPackingList01.DataSource = dsPackingList.Tables["dsReturn01"];
                gvPackingList01.BestFitColumns();//自动调整列宽度
                gvPackingList01.IndicatorWidth = 50;//自动调整行容器宽度
                this.lupWorkOrder.EditValue = dsPackingList.Tables["dsReturn02"].Rows[0]["工单号"].ToString();
                this.lupSapNo.Text = dsPackingList.Tables["dsReturn02"].Rows[0]["料号"].ToString();
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void btnMlaiPrint_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = txtCount.Text.Trim();
            sPalltNo = txtMlaiPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtMlaiPalletNo.SelectAll();
                txtMlaiPalletNo.Focus();
                return;
            }
            if (string.IsNullOrEmpty(lupSapNo.Text))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg010}"), MESSAGEBOX_CAPTION);//料号不能为空，请确认！
                lupSapNo.SelectAll();
                lupSapNo.Focus();
                return;
            }
            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterDataForMalai(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_CommonPackgeMalai);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            prtPrvDlg.Document = prtDoc;
            prtPrvDlg.ShowDialog();

            txtMlaiPalletNo.SelectAll();
            txtMlaiPalletNo.Focus();
        }
        //打印第一页
        private void prtDoc_CommonPackgeMalai(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string typemalai = string.Empty;
            string workordermalai = string.Empty;
            string palletno = string.Empty;
            string rengzheng = string.Empty;
            string powermalai = string.Empty;
            string tolerance = string.Empty;
            string datemalai = string.Empty;
            string toltal = string.Empty;
            string maxmalai = string.Empty;
            string minmalai = string.Empty;
            string oprcde = string.Empty;
            string junctionbox = string.Empty;
            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);

            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtMlaiPalletNo.SelectAll();
                txtMlaiPalletNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            typemalai = ds.Tables[0].Rows[0]["Type"].ToString();
            workordermalai = txtMlaiPalletNo.Text.Substring(0, txtMlaiPalletNo.Text.LastIndexOf("-") + 1) + lupSapNo.Text;
            palletno = ds.Tables[0].Rows[0]["PALLET_NO"].ToString();
            rengzheng = ds.Tables[0].Rows[0]["RENGZHENG"].ToString();
            if (PPSMasterdsTable.Tables["dsReturn03"].Rows.Count > 1)
            {

                powermalai = PPSMasterdsTable.Tables["dsReturn03"].Rows[0]["PnomNew"].ToString().Substring(0, 3) + "W-H/L";//ds.Tables[0].Rows[0]["PNOMNEW"].ToString();
            }
            else
            {
                powermalai = ds.Tables[0].Rows[0]["PNOMNEW"].ToString().Substring(0, 3) + "W" + ds.Tables[0].Rows[0]["PNOMNEW"].ToString().Substring(5, 2);
            }
            tolerance = "0~+5W";
            datemalai = ds.Tables[0].Rows[0]["PRODUCT_DATA"].ToString();
            DataSet dsVal = IVTestDateObject.GetPPSMalai(palletno);
            toltal = dsVal.Tables[0].Rows[0]["totalfpmp"].ToString();   //
            maxmalai = dsVal.Tables[0].Rows[0]["maxfpmp"].ToString();//
            minmalai = dsVal.Tables[0].Rows[0]["minfpmp"].ToString();//
            oprcde = PropertyService.Get(PROPERTY_FIELDS.USER_NAME);
            junctionbox = ds.Tables[0].Rows[0]["JunctionBox"].ToString();


            PPSMasterdsTable.Tables["dsReturn03"].Rows[0]["PnomNew"].ToString();

            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + typemalai;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(palletno);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = palletno;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powermalai;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间

                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                strLine = "W.O.(工单):";
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                strLine = workordermalai;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());

                //直线和第二行内容               
                e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                strLine = "Certification(认证):" + rengzheng;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());

                //直线和第三行内容                

                e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                strLine = "Power Tolerance(分档方式):" + tolerance;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());

                //#endregion

                //#region 右边

                e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);

                strLine = "Date:" + datemalai + this.txtshift.Text;
                mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                string type = Convert.ToString(this.radioGroup1.EditValue);
                //英文版本不显示等级。孙建文20140619要求修改。
                if (radioGroup2.Text != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 165 - 20;

                int val = ds.Tables[0].Rows.Count;
                int gap = 33;
                if (val > 30)
                {
                    val = 28;
                }
                else if (val > 20)
                {
                    gap = 28 * 33 / val;
                }
                string pos = string.Empty;
                string sn, pmpp, isc, impp, voc, vmpp, grade = string.Empty;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["FPMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (radioGroup1.EditValue.ToString().Trim() == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["Grade"].ToString().Trim();
                    }
                    else
                    {
                        grade = "";
                    }


                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 55 - 20, verticalPosition + 5, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);

                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 18;

                    if (val > 28 && val <= 30)
                    {
                        big = 16;
                    }

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110 - 20, verticalPosition, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    if (val > 28 && val <= 30)
                    {
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, verticalPosition - 3 + 23, new StringFormat());
                    }
                    else
                    {
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, verticalPosition + 23, new StringFormat());
                    }
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 3 - 20, verticalPosition + 5, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 395 - 5 - 20, verticalPosition + 5, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 5 - 20, verticalPosition + 5, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 10 - 20, verticalPosition + 5, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 5 - 20, verticalPosition + 5, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (this.radioGroup2.Text != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 10 - 30, verticalPosition + 5, new StringFormat());
                    }
                    verticalPosition += gap;

                    //判断托盘 组件超过 28 块 少于等于30 块的话排版位置下移
                    if (val > 28 && val <= 30)
                    {
                        verticalPosition += 1;
                    }

                }
                //调整下方边框位置
                if (val > 28 && val <= 30)
                {
                    e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                    e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                    e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                    e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                    e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);
                }


                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);



                strLine = "Total(合计):  " + toltal;


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());

                strLine = "MAX(最大值):  " + maxmalai;

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                strLine = "MIN(最小值):  " + minmalai;

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + oprcde;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + junctionbox;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());

            }
        }

        private void smbtPrintMalai_Click(object sender, EventArgs e)
        {
            string lotNo = this.txtLotNumber.Text.ToUpper();
            string labelNo = Convert.ToString(this.comMalaibiaoqian.Text);
            string count = txtMalaiCount.Text;
            if (string.IsNullOrEmpty(lotNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.LotIVTestPrintDialog.Msg001}"), MESSAGEBOX_CAPTION);//组件序列号不能为空，请确认！
                this.txtLotNumber.Focus();
                return;
            }
            if (string.IsNullOrEmpty(labelNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg011}"), MESSAGEBOX_CAPTION);//没有选择标签，请确认！
                //MessageService.ShowMessage("没有选择标签，请确认！", "提示");
                this.comMalaibiaoqian.Focus();
                return;
            }
            if (string.IsNullOrEmpty(this.txtMalaiCount.Text))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg012}"), MESSAGEBOX_CAPTION);//请填写打印数量，请确认！
                //MessageService.ShowMessage("请填写打印数量，请确认！", "提示");
                this.comMalaibiaoqian.Focus();
                return;
            }
            if (string.IsNullOrEmpty(txtMalaiCount.Text))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg013}"), MESSAGEBOX_CAPTION);//请填写打印数量，请确认！
                //MessageService.ShowMessage("请填写打印数量，请确认！", "提示");
                this.txtMalaiCount.Focus();
                return;
            }
            else if (Convert.ToInt32(txtMalaiCount.Text) < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg014}"), MESSAGEBOX_CAPTION);//打印数量必须大于0，请确认！
                //MessageService.ShowMessage("打印数量必须大于0，请确认！", "提示");
                this.txtMalaiCount.Focus();
                return;
            }
            else { }
            IVTestDataEntity ivdataentity = new IVTestDataEntity();
            DataSet dsLotInfo = new DataSet();
            if (checkPallet.Checked == true)
            {
                dsLotInfo = ivdataentity.GetLotNumsMalai(lotNo);
            }
            else
            {
                dsLotInfo = ivdataentity.GetLotNumMalai(lotNo);
            }

            //检查组件序号是否存在
            if (!string.IsNullOrEmpty(ivdataentity.ErrorMsg))
            {
                MessageBox.Show("组件不存在！", "系统提示");
                return;
            }

            if (dsLotInfo.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show("信息不存在！", "系统提示");
                return;
            }

            int nX = int.Parse(this.speLeftRight01.Text.Trim());
            int nY = int.Parse(this.speUpDown01.Text.Trim());
            PrintLabelParameterData data = new PrintLabelParameterData();
            data.ErrorMessage = string.Empty;
            data.IsPrintErrorMessage = false;

            data.LabelNo = labelNo;
            data.X = nX;
            data.Y = nY;
            data.IsPrintNameplate = false;
            data.IsChoosePrint = false;


            for (int j = 0; j < dsLotInfo.Tables[0].Rows.Count; j++)
            {
                for (int i = 0; i < Convert.ToInt32(count); i++)
                {
                    data.PartNumber = dsLotInfo.Tables[0].Rows[j]["PnomNew01"].ToString();
                    data.LotNo = dsLotInfo.Tables[0].Rows[j]["LOT_NUMBER"].ToString();
                    if (!ModulePrint.wf_printlable323Malai(data))
                    {
                        MessageService.ShowMessage("打印标签失败，请重试！", "提示");
                        return;
                    }
                }
            }
        }

        private void PackingListPrint_Load(object sender, EventArgs e)
        {


        }


        private void checkPallet_CheckedChanged(object sender, EventArgs e)
        {
            if (checkPallet.Checked == true)
            {
                labelControl23.Text = "托盘号:";
                //txtMalaiCount.Enabled = false;
            }
            else
            {
                labelControl23.Text = "序列号";
                //txtMalaiCount.Enabled = true;
            }
        }

        private void txtMlaiPalletNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 13)
            {
                btnMlaiSelect_Click(sender, e);
            }
        }
        private string GetAndCheckColor(string palletNo)
        {
            DataSet dsColor = IVTestDateObject.GetColorData(palletNo);
            string _color = string.Empty;
            if (dsColor.Tables[0].Rows.Count > 1)
            {
                DataSet dsKingLine = IVTestDateObject.GetKingLineByPallet(palletNo);
                if (dsKingLine.Tables[0].Rows.Count == 1)
                {
                    if (dsKingLine.Tables[0].Rows[0]["ISKINGLING"].ToString() == "1")
                    {
                        _color = "混花色";
                    }
                    else if (dsKingLine.Tables[0].Rows[0]["ISKINGLING"].ToString() == "2")
                    {
                        _color = "混色(混深浅色)";
                    }
                    else if (dsKingLine.Tables[0].Rows[0]["ISKINGLING"].ToString() == "0")
                    {
                        _color = "混色";
                    }
                    else
                    {
                        MessageBox.Show("未获取到托盘对应工单的金刚线！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }

                }
                else
                {
                    MessageBox.Show("该托盘对应的金刚线获取有重复数据！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            else if (dsColor.Tables[0].Rows.Count == 1)
            {
                _color = dsColor.Tables[0].Rows[0][0].ToString();
            }
            else
            {
                MessageBox.Show("该托盘明细异常，即托盘中没有数据信息！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return _color;
        }

        /// <summary>
        /// 匹配获取花色
        /// </summary>
        private string BindColor(string columneName)
        {
            string[] l_s = new string[] { "Column_Name", "Column_Index", "Column_type", "Column_code" };
            string category = "Basic_TestRule_PowerSet";
            System.Data.DataTable dtProLevel = BaseData.Get(l_s, category);
            System.Data.DataTable dtColor = dtProLevel.Clone();
            dtColor.TableName = "color";
            DataRow[] drs = dtProLevel.Select(string.Format("Column_Name='{0}' and Column_type='{1}'", columneName, "ColorJudge"));
            foreach (DataRow dr in drs)
                dtColor.ImportRow(dr);
            string _colorCode = string.Empty;
            if (dtColor.Rows.Count > 0)
            {
                _colorCode = dtColor.Rows[0]["Column_code"].ToString();
            }
            return _colorCode;
        }

        private void btnCommonDatePrint_Click(object sender, EventArgs e)
        {

            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            CommonDatePrint(sPalltNo, sQty, "1");

        }
        /// <summary>
        /// 为自动打印清单新建方法
        /// </summary>
        /// <param name="PalletNo"></param>
        /// <param name="Qty"></param>
        public void CommonDatePrint(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_CommonDatePackge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }

        private void prtDoc_CommonDatePackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                //#region    中间

                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容     
                //自动打印清单设置

                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容


                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片


                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SoviSol_LOGO.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);
                }

                //图片下面日期


                ////if (type == "AE")
                ////{
                ////    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                ////    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                ////    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                ////}
                ////else
                ////{
                ////    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                ////    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                ////    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                ////}

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());



                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        private void btnNeNew02_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            NENew02Print(sPalltNo, sQty, "");
        }
        public void NENew02Print(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_NENew02Packge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();

                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }
        //打印第一页
        public void prtDoc_NENew02Packge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string prodId = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！

                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            prodId = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (prodId == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        prodId = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }

            //#endregion

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            //string _color = GetAndCheckColor(PalletNo);

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                string cellType = string.Empty;
                string productModel = string.Empty;
                string countModule = string.Empty;
                string type = string.Empty;
                if (prodId.Length >= 9)
                {
                    cellType = prodId.Substring(8, 1);
                    productModel = prodId.Substring(4, 5);
                }

                if (productModel.Contains("6610"))
                {
                    countModule = "60";
                    type = "NER" + cellType + "156×156-" + countModule + "-" + cellType + " SI " + powerLevel + "W";
                }
                else if (productModel.Contains("6612"))
                {
                    type = "NER" + cellType + "-CS" + productModel + "-" + powerLevel + "W";
                }
                else
                {
                    MessageBox.Show("没有识别到产品是6610和6612的信息！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                strLine = "Type:" + "   " + type;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间

                string QuanlityGrade = string.Empty;
                if (_PrintStyle == "ManualPrint")
                {
                    QuanlityGrade = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    QuanlityGrade = _QuanlityGrade;
                }
                //画右边矩形和第一行内容
                if (QuanlityGrade == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (QuanlityGrade == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (QuanlityGrade == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边

                //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\NER_FlashList_Logo.png"), 650 - 32, 20, 160, 78);
                //图片下面日期
                if (QuanlityGrade == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (QuanlityGrade == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (QuanlityGrade == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    verticalPosition += gap;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (QuanlityGrade == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                //strLine = "Color:  " + BindColor(_color);
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());


            }
        }

        private void btnNeNew03_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            NENew03Print(sPalltNo, sQty, "");
        }
        public void NENew03Print(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_NENew03Packge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();

                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }
        //打印第一页
        public void prtDoc_NENew03Packge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string prodId = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！

                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            prodId = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (prodId == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        prodId = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }

            string flagType = string.Empty;
            string code = string.Empty;
            NameplateLabelPrintEngine namePlateLabelPrint = new NameplateLabelPrintEngine();
            DataSet dscellType = namePlateLabelPrint.GetCellTypeByWorkOrderNumber(ds.Tables[0].Rows[0]["WORK_ORDER_NO"].ToString());//通过工单号获取电池类型通过-N,-P区别是否是背钝化
            if (dscellType.Tables.Count > 0 || dscellType.Tables[0].Rows.Count > 0)
            {
                if (dscellType.Tables[0].Rows[0]["CELL_TYPE"].ToString().Contains("-N"))
                {
                    flagType = "-N";
                }
                if (dscellType.Tables[0].Rows[0]["CELL_TYPE"].ToString().Contains("-P"))
                {
                    flagType = "-P";
                }
            }
            if (string.IsNullOrEmpty(flagType))
            {
                DialogResult dr = MessageBox.Show("当前工单中没有体现电池是否为PERC,请选择是否为PERC电池组件！", "系统提示", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button3);
                if (dr == DialogResult.Yes)
                {
                    flagType = "-P";
                }
                else if (dr == DialogResult.No)
                {
                    flagType = "-N";
                }
                else { }

            }
            //#endregion

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            //string _color = GetAndCheckColor(PalletNo);

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                string cellType = string.Empty;
                string productModel = string.Empty;
                string countModule = string.Empty;
                string type = string.Empty;
                if (prodId.Length >= 9)
                {
                    cellType = prodId.Substring(8, 1);
                    productModel = prodId.Substring(4, 5);
                }

                if (flagType == "-N")
                {
                    if (productModel.Contains("6610"))
                    {
                        if (productModel.Contains("M"))
                        {
                            code = "NERM156×156-60-M SI " + powerLevel + "W";
                        }
                        else if (productModel.Contains("P"))
                        {
                            code = "NERP156×156-60-P SI " + powerLevel + "W";
                        }
                        else { MessageBox.Show("产品类型不对，为匹配单晶或多晶"); return; }

                    }
                    else if (productModel.Contains("6612"))
                    {
                        if (productModel.Contains("M"))
                        {
                            code = "NERM-CS6612M-" + powerLevel + "W";
                        }
                        else if (productModel.Contains("P"))
                        {
                            code = "NERP-CS6612P-" + powerLevel + "W";
                        }
                        else { MessageBox.Show("产品类型不对，为匹配单晶或多晶"); return; }

                    }
                    else { MessageBox.Show("产品类型不对，为匹配6610或6612"); return; }
                }
                else if (flagType == "-P")
                {
                    if (productModel.Contains("6610"))
                    {
                        if (productModel.Contains("M"))
                        {
                            code = "NER660M" + powerLevel;
                        }
                        else if (productModel.Contains("P"))
                        {
                            code = "NER660P" + powerLevel;
                        }
                        else { MessageBox.Show("产品类型不对，为匹配单晶或多晶"); return; }

                    }
                    else if (productModel.Contains("6612"))
                    {
                        if (productModel.Contains("M"))
                        {
                            code = "NER672M" + powerLevel;
                        }
                        else if (productModel.Contains("P"))
                        {
                            code = "NER672P" + powerLevel;
                        }
                        else { MessageBox.Show("产品类型不对，为匹配单晶或多晶"); return; }

                    }
                    else { MessageBox.Show("产品类型不对，为匹配6610或6612"); return; }
                }
                type = code;

                //if (productModel.Contains("6610"))
                //{
                //    countModule = "60";
                //    type = "NER" + cellType + "156×156-" + countModule + "-" + cellType + " SI " + powerLevel + "W";
                //}
                //else if (productModel.Contains("6612"))
                //{
                //    type = "NER" + cellType + "-CS" + productModel + "-" + powerLevel + "W";
                //}
                //else
                //{
                //    MessageBox.Show("没有识别到产品是6610和6612的信息！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //    return;
                //}
                strLine = "Type:" + "   " + type;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间

                string QuanlityGrade = string.Empty;
                if (_PrintStyle == "ManualPrint")
                {
                    QuanlityGrade = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    QuanlityGrade = _QuanlityGrade;
                }
                //画右边矩形和第一行内容
                if (QuanlityGrade == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (QuanlityGrade == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (QuanlityGrade == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边

                //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\NER_FlashList_Logo.png"), 650 - 32, 20, 160, 78);
                //图片下面日期
                if (QuanlityGrade == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (QuanlityGrade == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (QuanlityGrade == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    verticalPosition += gap;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (QuanlityGrade == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                //strLine = "Color:  " + BindColor(_color);
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());


            }
        }

        private void btnSolarJuciePrint_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            SolarJuciePrint(sPalltNo, sQty, "1");
        }

        public void SolarJuciePrint(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_SolarJuciePackge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }


        //打印第一页
        public void prtDoc_SolarJuciePackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));


            string _cellquality = string.Empty;
            if (ProductID.Contains("6610"))
            {
                _cellquality = "60";
            }
            else if ((ProductID.Contains("6612")))
            {
                _cellquality = "72";
            }
            string _typeModule = string.Empty;
            if (ProductID.Contains("P"))
            {
                _typeModule = "P";
            }
            else if ((ProductID.Contains("M")))
            {
                _typeModule = "M";
            }

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              QSA" + powerLevel + _typeModule + "-" + _cellquality + "-S";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);



                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                //#region    中间

                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容     
                //自动打印清单设置

                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容


                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片


                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SolarJuice_LOGO.jpg"), 650 - 20 - 28, 45, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SolarJuice_LOGO.jpg"), 650 - 20, 45);
                }

                //图片下面日期


                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());



                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        private void btnQrCode_Click(object sender, EventArgs e)
        {
            //PrintDocument prtDoc = new PrintDocument();
            //prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_QrCodePackge1);
            //PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();

            //prtPrvDlg.Document = prtDoc;
            //prtPrvDlg.ShowDialog();
            //this.pictureEdit1.Image = GetQRCodeByZXingNet(lotNum,100,100);
            QrCodePrint(txtPalltNo.Text.Trim(), "1");
        }
        public void QrCodePrint(string palletNo, string copies)
        {
            _PalletNo = palletNo;
            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_QrCodePackge1);
            //PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            //  prtDoc.PrinterSettings.Copies = short.Parse(copies);
            // prtPrvDlg.Document = prtDoc;

            // prtPrvDlg.ShowDialog();


            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();

                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(copies);
                prtDoc.Print();
            }
            //this.pictureEdit1.Imag
        }

        //打印第一页
        private void prtDoc_QrCodePackge1(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            DataSet ds = IVTestDateObject.GetPPSMasterData(_PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            string lotNum = string.Empty;
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                lotNum += ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString() + ",";
            }
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //托盘号
                strLine = "Pallet No:  " + _PalletNo;
                mainFont = new System.Drawing.Font("Arial", 20, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 195, 340, new StringFormat());


                Image imgLotNum = GetQRCodeByZXingNet(lotNum, 100, 100);
                e.Graphics.DrawImage(imgLotNum, 200, 380, 392, 392);

            }
        }

        private Bitmap GetQRCodeByZXingNet(String strMessage, Int32 width, Int32 height)
        {
            Bitmap result = null;
            try
            {
                BarcodeWriter barCodeWriter = new BarcodeWriter();
                barCodeWriter.Format = BarcodeFormat.QR_CODE;
                barCodeWriter.Options.Hints.Add(EncodeHintType.CHARACTER_SET, "UTF-8");
                barCodeWriter.Options.Hints.Add(EncodeHintType.ERROR_CORRECTION, ZXing.QrCode.Internal.ErrorCorrectionLevel.H);
                barCodeWriter.Options.Height = height;
                barCodeWriter.Options.Width = width;
                barCodeWriter.Options.Margin = 0;

                ZXing.Common.BitMatrix bm = barCodeWriter.Encode(strMessage);
                result = barCodeWriter.Write(bm);
            }
            catch (Exception ex)
            {
                //异常输出
            }
            return result;
        }

        private void btnMologe_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            MologePrint(sPalltNo, sQty, "1");
        }
        public void MologePrint(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_MologePackge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }

        //打印第一页
        public void prtDoc_MologePackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, ff, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);


                //功率fyb
                string strSAP_NO = dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                string strWorkNumber = dsVal.Tables[0].Rows[0]["WORKNUMBER"].ToString();
                DataSet ds_powershow = IVTestDateObject.GetPowerShowData(strWorkNumber, strSAP_NO);

                DataRow[] drPowerShow = ds_powershow.Tables[0].Select(string.Format("BEFORE_POWER={0}", powerLevel));
                if (drPowerShow.Count() > 0 && powerLevel == drPowerShow[0]["BEFORE_POWER"].ToString())
                {
                    powerLevel = drPowerShow[0]["AFTER_POWER"].ToString();
                }


                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                //#region    中间

                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容     
                //自动打印清单设置

                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容


                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片


                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SoviSol_LOGO.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);
                }

                //图片下面日期


                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());
                strLine = "FF[%]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());

                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();
                    ff = ds.Tables[0].Rows[i]["FF"].ToString();

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", ff);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    verticalPosition += gap;
                }
                //调整下方边框位置
                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        //PVLINE包装清单打印 yibin.fei 2017.11.07
        private void btnPVLINE_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            PVLinePrint(sPalltNo, sQty, "1");
        }
        #region

        /// <summary>
        /// yibin.fei，为PVLINE自动打印清单
        /// </summary>
        /// <param name="PalletNo"></param>
        /// <param name="Qty"></param>
        public void PVLinePrint(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_PVLinePackge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }

        //打印第一页
        public void prtDoc_PVLinePackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));

            string[] l_s = new string[] { "OriginalProductType", "modifyProductType" };
            string category = "Packing_List_Print_PVLine";
            System.Data.DataTable dt_PVLine = BaseData.Get(l_s, category);
            DataRow[] drModifyProductType = dt_PVLine.Select(string.Format("OriginalProductType='{0}'", ProductID));
            if (drModifyProductType.Count() > 0)
            {

                ProductID = drModifyProductType[0]["modifyProductType"].ToString();



            }
            else
            {
                MessageBox.Show(string.Format("【{0}】PVLINE包装清单产品类型未维护，请联系IT", PalletNo));
                return;
            }


            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + ProductID + "-" + powerLevel;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                //#region    中间

                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容     
                //自动打印清单设置

                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容


                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片


                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\PVLineLogo.png"), 650 - 20 - 20, 50, 180, 90);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\PVLineLogo.png"), 650 - 20, 50);
                }

                //图片下面日期


                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());



                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }
        #endregion

        private void btnAnNeng_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            AnNengPrint(sPalltNo, sQty, "1");
        }
        /// <summary>
        /// 为安能打印订单建方法 yibin.fei 2017.11.13
        /// </summary>
        /// <param name="PalletNo"></param>
        /// <param name="Qty"></param>
        /// <param name="PrintCopy"></param>
        public void AnNengPrint(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_AnNengPackge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
            }

            if (_PrintStyle == "ManualPrint")
            {
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }

        #region

        public void prtDoc_AnNengPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                //#region    中间

                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容     
                //自动打印清单设置

                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容


                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片


                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\AnNeng.png"), 650 - 20 - 28, 40, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\AnNeng.png"), 650 - 20, 40);
                }

                //图片下面日期


                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());



                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        #endregion

        private void btnShuangBo33_Click(object sender, EventArgs e)
        {
            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            ShuangBo33Print(sPalltNo, sQty, "1");
        }

        public void ShuangBo33Print(string PalletNo, string Qty, string PrintCopy)
        {
            _PalletNo = PalletNo;
            if (string.IsNullOrEmpty(PalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                {
                    if (_PrintStyle == "ManualPrint")
                    {
                        txtPalltNo.SelectAll();
                        txtPalltNo.Focus();
                    }
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_ShuangBo33Packge);
            if (_PrintStyle == "ManualPrint")
            {
                PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(PrintCopy);
                prtDoc.Print();
            }
        }

        //打印第一页
        public void prtDoc_ShuangBo33Packge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;
            sPckType = string.Empty;
            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            //      功率 2.5W分档系统开发 根据韩苗需求判断是否功率中含有—A、-B   yibin.fei 2017.11.20
            else if (sub_PS_Way == "功率")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelAB = dvDistinct.Select(" POWERLEVEL LIKE '%A%' OR POWERLEVEL LIKE '%B%'");

                // 混托获取子分档
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelAB.Length > 1)
                    {
                        sPckType = "-A/B";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }




            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }

                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.IndexOf("-"));

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            //#endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                strLine = "Type:" + "              " + ProductID;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                //#region    中间

                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容     
                //自动打印清单设置

                if (type == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容


                if (type == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                //#region 右边
                //画最右边的图片


                if (type == "AE")
                {
                    //e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\SoviSol_LOGO.jpg"), 650 - 20 - 30, 35-15);
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\Resource\SoviSol_LOGO.jpg"), 650 - 20 - 28, 25, 160, 70);

                }
                else
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\CommonLogo.jpg"), 650 - 20, 20);
                }

                //图片下面日期


                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());



                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 150;

                int val = ds.Tables[0].Rows.Count;
                int gap = 28;

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 120, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                strLine = "Color:  " + BindColor(_color);
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        private void btnNE5BB_Click(object sender, EventArgs e)
        {

            string sPalltNo, sQty;
            sQty = cboQty.Text.Trim();
            sPalltNo = txtPalltNo.Text.Trim();

            NE5BBPrint(sPalltNo, sQty, "");
        }
        public void NE5BBPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_NE5BBPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();
            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();

                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }
        //打印第一页
        public void prtDoc_NE5BBPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //#region
            string prodId = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "ManualPrint")
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;

            DataSet ds = IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！

                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            prodId = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }
                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (prodId == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        prodId = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }

            string flagType = string.Empty;
            string code = string.Empty;
            NameplateLabelPrintEngine namePlateLabelPrint = new NameplateLabelPrintEngine();
            DataSet dscellType = namePlateLabelPrint.GetCellTypeByWorkOrderNumber(ds.Tables[0].Rows[0]["WORK_ORDER_NO"].ToString());//通过工单号获取电池类型通过-N,-P区别是否是背钝化
            if (dscellType.Tables.Count > 0 || dscellType.Tables[0].Rows.Count > 0)
            {
                if (dscellType.Tables[0].Rows[0]["CELL_TYPE"].ToString().Contains("-N"))
                {
                    flagType = "-N";
                }
                if (dscellType.Tables[0].Rows[0]["CELL_TYPE"].ToString().Contains("-P"))
                {
                    flagType = "-P";
                }
            }
            if (string.IsNullOrEmpty(flagType))
            {
                DialogResult dr = MessageBox.Show("当前工单中没有体现电池是否为PERC,请选择是否为PERC电池组件！", "系统提示", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button3);
                if (dr == DialogResult.Yes)
                {
                    flagType = "-P";
                }
                else if (dr == DialogResult.No)
                {
                    flagType = "-N";
                }
                else { }

            }
            //#endregion

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            //string _color = GetAndCheckColor(PalletNo);

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(e.Graphics));

            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                //#region   左边
                //画左边矩形
                e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                string cellType = string.Empty;
                string productModel = string.Empty;
                string countModule = string.Empty;
                string type = string.Empty;
                if (prodId.Length >= 9)
                {
                    cellType = prodId.Substring(8, 1);
                    productModel = prodId.Substring(4, 5);
                }

                if (flagType == "-N")
                {
                    if (productModel.Contains("6610"))
                    {
                        if (productModel.Contains("M"))
                        {
                            code = "NERM156×156-60-M SI " + powerLevel + "W";
                        }
                        else if (productModel.Contains("P"))
                        {
                            code = "NERP156×156-60-P SI " + powerLevel + "W";
                        }
                        else { MessageBox.Show("产品类型不对，为匹配单晶或多晶"); return; }

                    }
                    else if (productModel.Contains("6612"))
                    {
                        if (productModel.Contains("M"))
                        {
                            code = "NERM-CS6612M-" + powerLevel + "W";
                        }
                        else if (productModel.Contains("P"))
                        {
                            code = "NERP-CS6612P-" + powerLevel + "W";
                        }
                        else { MessageBox.Show("产品类型不对，为匹配单晶或多晶"); return; }

                    }
                    else { MessageBox.Show("产品类型不对，为匹配6610或6612"); return; }
                }
                else if (flagType == "-P")
                {
                    if (productModel.Contains("6610"))
                    {
                        if (productModel.Contains("M"))
                        {
                            code = "NER660M" + powerLevel;
                        }
                        else if (productModel.Contains("P"))
                        {
                            code = "NER660P" + powerLevel;
                        }
                        else { MessageBox.Show("产品类型不对，为匹配单晶或多晶"); return; }

                    }
                    else if (productModel.Contains("6612"))
                    {
                        if (productModel.Contains("M"))
                        {
                            code = "NER672M" + powerLevel;
                        }
                        else if (productModel.Contains("P"))
                        {
                            code = "NER672P" + powerLevel;
                        }
                        else { MessageBox.Show("产品类型不对，为匹配单晶或多晶"); return; }

                    }
                    else { MessageBox.Show("产品类型不对，为匹配6610或6612"); return; }
                }
                type = code;

                //if (productModel.Contains("6610"))
                //{
                //    countModule = "60";
                //    type = "NER" + cellType + "156×156-" + countModule + "-" + cellType + " SI " + powerLevel + "W";
                //}
                //else if (productModel.Contains("6612"))
                //{
                //    type = "NER" + cellType + "-CS" + productModel + "-" + powerLevel + "W";
                //}
                //else
                //{
                //    MessageBox.Show("没有识别到产品是6610和6612的信息！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //    return;
                //}
                strLine = "Type:" + "   " + type;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                e.Graphics.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                strLine = "Rated Power:" + "            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                //#endregion

                //#region    中间

                string QuanlityGrade = string.Empty;
                if (_PrintStyle == "ManualPrint")
                {
                    QuanlityGrade = radioGroup1.EditValue.ToString().Trim();
                }
                if (_PrintStyle == "AutoPrint")
                {
                    QuanlityGrade = _QuanlityGrade;
                }
                //画右边矩形和第一行内容
                if (QuanlityGrade == "AE") // Q.001 b1
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容               
                if (QuanlityGrade == "AE") // Q.001 b2
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容                
                if (QuanlityGrade == "AE") // Q.001 b3
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    e.Graphics.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                //#endregion

                //#region 右边

                //常规组件（非PERC）LOGO处添加5BB by yibin.fei 2017.12.11
                if (flagType == "-N")
                {
                    e.Graphics.DrawImage(System.Drawing.Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + @"Resource\5BB.png"), 650 - 2, 40, 100, 38);
                }
                //图片下面日期
                if (QuanlityGrade == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                //#endregion

                verticalPosition = 140 - 18;

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());

                e.Graphics.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                if (val > 30)
                {
                    val = 31;
                }

                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (QuanlityGrade == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (QuanlityGrade == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (QuanlityGrade == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    mainFont = new System.Drawing.Font("Code 128", 15, FontStyle.Regular);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    verticalPosition += gap;
                }
                e.Graphics.DrawLine(myPen, 40 - 20, 1095 - 20, 790 - 20, 1095 - 20);
                e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                e.Graphics.DrawLine(myPen, 290 - 20, 1095 - 20, 290 - 20, 1137 - 20);
                e.Graphics.DrawLine(myPen, 540 - 20, 1095 - 20, 540 - 20, 1137 - 20);

                //e.Graphics.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //e.Graphics.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                //e.Graphics.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                //e.Graphics.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (QuanlityGrade == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (QuanlityGrade == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                //strLine = "Color:  " + BindColor(_color);
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //e.Graphics.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());


            }


        }

        private void btnQueryQDCS_Click(object sender, EventArgs e)
        {
            string sQPalletNo;
            string[] sArrPalletNo;
            sQPalletNo = "";

            sPalletNo = txtCPalletNoQDCS.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNoQDCS.SelectAll();
                txtCPalletNoQDCS.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            dsCommon = new DataSet();
            dsCommon.Clear();
            dsCommon = IVTestDateObject.GetPackingListCommonDataQDCS(sQPalletNo);
            //dsCommon.Tables[0].Columns.Add("内部柜号");
            //dsCommon.Tables[0].Columns["内部柜号"].SetOrdinal(1);
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcQDCS.DataSource = null;
                gcQDCS.MainView = gvQDCS;
                gcQDCS.DataSource = dsCommon.Tables[0];
                gvQDCS.BestFitColumns();//自动调整列宽度
                gvQDCS.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void btnComExcelQDCS_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sValue, sWO, sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";
            sPalletNo = txtCPalletNoQDCS.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNoQDCS.SelectAll();
                txtCPalletNoQDCS.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            if (gvQDCS.RowCount > 0)
            {
                try
                {
                    nColumn = gvQDCS.Columns.Count;
                    nRow = gvQDCS.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];
                    //oWorksheet.Name = txtStockNo.Text.Trim();

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData(sQPalletNo);
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    sValue = dsVal.Tables[0].Rows[0]["PRO_ID"].ToString();
                    sValue = sValue.Substring(0, sValue.IndexOf("-") + 1) + " " + dsVal.Tables[0].Rows[0]["POWER"].ToString();
                    oWorksheet.Cells[nNowRow, 1] = sValue;
                    oWorksheet.get_Range("A1", "A1").Font.Bold = true;
                    oWorksheet.get_Range("A1", "O1").Merge(0);

                    nNowRow++;
                    for (int c = 0; c < nColumn; c++)
                    {
                        oWorksheet.Cells[nNowRow, c + 1] = gvQDCS.Columns[c].Caption.ToString();
                    }
                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "序号";
                    oWorksheet.Cells[nNowRow, 2] = "托   号";
                    oWorksheet.Cells[nNowRow, 3] = "型   号";
                    oWorksheet.Cells[nNowRow, 4] = "序 列 号";
                    oWorksheet.Cells[nNowRow, 5] = "实测功率";
                    oWorksheet.Cells[nNowRow, 6] = "短路电流";
                    oWorksheet.Cells[nNowRow, 7] = "开路电压";
                    oWorksheet.Cells[nNowRow, 8] = "工作电流";
                    oWorksheet.Cells[nNowRow, 9] = "工作电压";
                    oWorksheet.Cells[nNowRow, 10] = "功率档";
                    oWorksheet.Cells[nNowRow, 11] = "等级";
                    oWorksheet.Cells[nNowRow, 12] = "生产日期";
                    oWorksheet.Cells[nNowRow, 13] = "接线盒";
                    oWorksheet.Cells[nNowRow, 14] = "填充因子";
                    oWorksheet.Cells[nNowRow, 15] = "光强";
                    oWorksheet.get_Range("A2", "O3").Interior.ColorIndex = 48;


                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[nNowRow, c + 1] = dgCommon.Rows[r].Cells[c].Value;
                            //oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            if (ckImp.Checked == true)
                            {
                                if (c == 7)
                                {
                                    int index = dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().IndexOf("-") + 1;
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString().Trim() + "-" + dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().Substring(index, 1);
                                }
                                else
                                {
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                                }
                            }
                            else
                            {
                                oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            }
                        }
                    }
                    oWorksheet.get_Range("B4", "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L4", "L" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("D4", "D" + nRow.ToString()).EntireColumn.NumberFormat = "@";

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Total(合计):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //oWorksheet.Cells[nNowRow, 4] = dsVal.Tables[0].Rows[0]["QTY"].ToString() + " Pcs";
                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    //新增合计------------------------------------------------------------------------
                    int alots = 0;
                    decimal psum = 0;
                    foreach (DataRow drow in dsVal.Tables[0].Rows)
                    {
                        alots += Convert.ToInt16(drow["QTY"]);
                        psum += Convert.ToDecimal(drow["PSUM"]);
                    }
                    oWorksheet.Cells[nNowRow, 4] = Convert.ToSingle(alots) + " Pcs";
                    oWorksheet.Cells[nNowRow, 5] = Convert.ToSingle(Math.Round(psum, 2));
                    //------------------------------------------------------------------------
                    oWorksheet.get_Range("F" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MAX(最大值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0,3);

                    //新增最大值------------------------------------------------------------------------
                    string PMAX = string.Empty, ISC_MAX = string.Empty, VOC_MAX = string.Empty, IMP_MAX = string.Empty, VMP_MAX = string.Empty, POWER = string.Empty;


                    PMAX = dsVal.Tables[0].Compute("max(PMAX)", null).ToString();
                    ISC_MAX = dsVal.Tables[0].Compute("max(ISC_MAX)", null).ToString();
                    VOC_MAX = dsVal.Tables[0].Compute("max(VOC_MAX)", null).ToString();
                    IMP_MAX = dsVal.Tables[0].Compute("max(IMP_MAX)", null).ToString();
                    VMP_MAX = dsVal.Tables[0].Compute("max(VMP_MAX)", null).ToString();
                    POWER = dsVal.Tables[0].Compute("max(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 5] = PMAX;
                    oWorksheet.Cells[nNowRow, 6] = ISC_MAX;
                    oWorksheet.Cells[nNowRow, 7] = VOC_MAX;
                    oWorksheet.Cells[nNowRow, 8] = IMP_MAX;
                    oWorksheet.Cells[nNowRow, 9] = VMP_MAX;
                    oWorksheet.Cells[nNowRow, 10] = POWER.Substring(0, 3);
                    //end------------------------------------------------------------------------

                    oWorksheet.get_Range("K" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MIN(最小值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "C" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //新增最小值------------------------------------------------------------------------
                    string PMIN = string.Empty, ISC_MIN = string.Empty, VOC_MIN = string.Empty, IMP_MIN = string.Empty, VMP_MIN = string.Empty, POWER2 = string.Empty;
                    PMIN = dsVal.Tables[0].Compute("min(PMIN)", null).ToString();
                    ISC_MIN = dsVal.Tables[0].Compute("min(ISC_MIN)", null).ToString();
                    VOC_MIN = dsVal.Tables[0].Compute("min(VOC_MIN)", null).ToString();
                    IMP_MIN = dsVal.Tables[0].Compute("min(IMP_MIN)", null).ToString();
                    VMP_MIN = dsVal.Tables[0].Compute("min(VMP_MIN)", null).ToString();
                    POWER2 = dsVal.Tables[0].Compute("min(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 5] = PMIN;
                    oWorksheet.Cells[nNowRow, 6] = ISC_MIN;
                    oWorksheet.Cells[nNowRow, 7] = VOC_MIN;
                    oWorksheet.Cells[nNowRow, 8] = IMP_MIN;
                    oWorksheet.Cells[nNowRow, 9] = VMP_MIN;
                    oWorksheet.Cells[nNowRow, 10] = POWER2.Substring(0, 3);

                    //end------------------------------------------------------------------------

                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0, 3);
                    oWorksheet.Cells[nNowRow, 11] = "Power Tolerance(分档方式):";
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("K" + nNowRow.ToString(), "L" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("E4", "I" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    oWorksheet.Cells[nNowRow, 13] = dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Operator Code(操作员代码):";
                    oWorksheet.Cells[nNowRow, 3] = dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                    oWorksheet.Cells[nNowRow, 5] = "QC Approval(检验员):";
                    oWorksheet.Cells[nNowRow, 10] = "Date(日期):";
                    oWorksheet.Cells[nNowRow, 12] = DateTime.Parse(dsVal.Tables[0].Rows[0]["EDIT_TIME"].ToString()).ToString("yyyy-MM-dd");
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "W.O.(工单):";
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    oWorksheet.Cells[nNowRow, 3] = sWO;
                    oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.Cells[nNowRow, 12] = dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "K" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 4.50;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 10.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 8.00;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 15.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("N1", "N1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("O1", "O1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("A1", "O" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A2", "O" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oWorksheet.get_Range("A1", "A1").Font.Size = 16;
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    return;
                }
            }
        }

        private void btnQueryAiji_Click(object sender, EventArgs e)
        {
            string sQPalletNo;
            string[] sArrPalletNo;
            sQPalletNo = "";

            sPalletNo = txtCPalletNoAiji.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNoAiji.SelectAll();
                txtCPalletNoAiji.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            dsCommon = new DataSet();
            dsCommon.Clear();
            dsCommon = IVTestDateObject.GetPackingListCommonDataAiji(sQPalletNo);
            dsCommon.Tables[0].Columns.Add("集装箱号");
            dsCommon.Tables[0].Columns["集装箱号"].SetOrdinal(1);
            dsCommon.Tables[0].Columns.Add("出货日期");
            dsCommon.Tables[0].Columns["出货日期"].SetOrdinal(17);
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcAiji.DataSource = null;
                gcAiji.MainView = gvAiji;
                gcAiji.DataSource = dsCommon.Tables[0];
                gvAiji.BestFitColumns();//自动调整列宽度
                gvAiji.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void btnComExcelAiji_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sValue, sWO, sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";
            sPalletNo = txtCPalletNoAiji.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtCPalletNoAiji.SelectAll();
                txtCPalletNoAiji.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            if (gvAiji.RowCount > 0)
            {
                try
                {
                    nColumn = gvAiji.Columns.Count;
                    nRow = gvAiji.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];
                    //oWorksheet.Name = txtStockNo.Text.Trim();

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData(sQPalletNo);
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    sValue = dsVal.Tables[0].Rows[0]["PRO_ID"].ToString();
                    sValue = sValue.Substring(0, sValue.IndexOf("-") + 1) + " " + dsVal.Tables[0].Rows[0]["POWER"].ToString();
                    oWorksheet.Cells[nNowRow, 1] = sValue;
                    oWorksheet.get_Range("A1", "A1").Font.Bold = true;
                    oWorksheet.get_Range("A1", "R1").Merge(0);

                    nNowRow++;
                    for (int c = 0; c < nColumn; c++)
                    {
                        oWorksheet.Cells[nNowRow, c + 1] = gvAiji.Columns[c].Caption.ToString();
                    }
                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "序号";
                    oWorksheet.Cells[nNowRow, 2] = "集装箱号";
                    oWorksheet.Cells[nNowRow, 3] = "托   号";
                    oWorksheet.Cells[nNowRow, 4] = "型   号";
                    oWorksheet.Cells[nNowRow, 5] = "序 列 号";
                    oWorksheet.Cells[nNowRow, 6] = "实测功率";
                    oWorksheet.Cells[nNowRow, 7] = "短路电流";
                    oWorksheet.Cells[nNowRow, 8] = "开路电压";
                    oWorksheet.Cells[nNowRow, 9] = "工作电流";
                    oWorksheet.Cells[nNowRow, 10] = "工作电压";
                    oWorksheet.Cells[nNowRow, 11] = "功率档";
                    oWorksheet.Cells[nNowRow, 12] = "串联电阻";
                    oWorksheet.Cells[nNowRow, 13] = "旁路电阻";
                    oWorksheet.Cells[nNowRow, 14] = "等级";
                    oWorksheet.Cells[nNowRow, 15] = "生产日期";
                    oWorksheet.Cells[nNowRow, 16] = "接线盒";
                    oWorksheet.Cells[nNowRow, 17] = "填充因子";
                    oWorksheet.Cells[nNowRow, 18] = "出货日期";
                    oWorksheet.get_Range("A2", "R3").Interior.ColorIndex = 48;


                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[nNowRow, c + 1] = dgCommon.Rows[r].Cells[c].Value;
                            //oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            if (ckImp.Checked == true)
                            {
                                if (c == 7)
                                {
                                    int index = dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().IndexOf("-") + 1;
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString().Trim() + "-" + dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().Substring(index, 1);
                                }
                                else
                                {
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                                }
                            }
                            else
                            {
                                oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            }
                        }
                    }
                    oWorksheet.get_Range("B4", "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("O4", "O" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("D4", "D" + nRow.ToString()).EntireColumn.NumberFormat = "@";

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Total(合计):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //oWorksheet.Cells[nNowRow, 4] = dsVal.Tables[0].Rows[0]["QTY"].ToString() + " Pcs";
                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    //新增合计------------------------------------------------------------------------
                    int alots = 0;
                    decimal psum = 0;
                    foreach (DataRow drow in dsVal.Tables[0].Rows)
                    {
                        alots += Convert.ToInt16(drow["QTY"]);
                        psum += Convert.ToDecimal(drow["PSUM"]);
                    }
                    oWorksheet.Cells[nNowRow, 5] = Convert.ToSingle(alots) + " Pcs";
                    oWorksheet.Cells[nNowRow, 6] = Convert.ToSingle(Math.Round(psum, 2));
                    //------------------------------------------------------------------------
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "R" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MAX(最大值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0,3);

                    //新增最大值------------------------------------------------------------------------
                    string PMAX = string.Empty, ISC_MAX = string.Empty, VOC_MAX = string.Empty, IMP_MAX = string.Empty, VMP_MAX = string.Empty, POWER = string.Empty;


                    PMAX = dsVal.Tables[0].Compute("max(PMAX)", null).ToString();
                    ISC_MAX = dsVal.Tables[0].Compute("max(ISC_MAX)", null).ToString();
                    VOC_MAX = dsVal.Tables[0].Compute("max(VOC_MAX)", null).ToString();
                    IMP_MAX = dsVal.Tables[0].Compute("max(IMP_MAX)", null).ToString();
                    VMP_MAX = dsVal.Tables[0].Compute("max(VMP_MAX)", null).ToString();
                    POWER = dsVal.Tables[0].Compute("max(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 6] = PMAX;
                    oWorksheet.Cells[nNowRow, 7] = ISC_MAX;
                    oWorksheet.Cells[nNowRow, 8] = VOC_MAX;
                    oWorksheet.Cells[nNowRow, 9] = IMP_MAX;
                    oWorksheet.Cells[nNowRow, 10] = VMP_MAX;
                    oWorksheet.Cells[nNowRow, 11] = POWER.Substring(0, 3);
                    //end------------------------------------------------------------------------

                    oWorksheet.get_Range("L" + nNowRow.ToString(), "R" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MIN(最小值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //新增最小值------------------------------------------------------------------------
                    string PMIN = string.Empty, ISC_MIN = string.Empty, VOC_MIN = string.Empty, IMP_MIN = string.Empty, VMP_MIN = string.Empty, POWER2 = string.Empty;
                    PMIN = dsVal.Tables[0].Compute("min(PMIN)", null).ToString();
                    ISC_MIN = dsVal.Tables[0].Compute("min(ISC_MIN)", null).ToString();
                    VOC_MIN = dsVal.Tables[0].Compute("min(VOC_MIN)", null).ToString();
                    IMP_MIN = dsVal.Tables[0].Compute("min(IMP_MIN)", null).ToString();
                    VMP_MIN = dsVal.Tables[0].Compute("min(VMP_MIN)", null).ToString();
                    POWER2 = dsVal.Tables[0].Compute("min(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 6] = PMIN;
                    oWorksheet.Cells[nNowRow, 7] = ISC_MIN;
                    oWorksheet.Cells[nNowRow, 8] = VOC_MIN;
                    oWorksheet.Cells[nNowRow, 9] = IMP_MIN;
                    oWorksheet.Cells[nNowRow, 10] = VMP_MIN;
                    oWorksheet.Cells[nNowRow, 11] = POWER2.Substring(0, 3);

                    //end------------------------------------------------------------------------

                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0, 3);
                    oWorksheet.Cells[nNowRow, 12] = "Power Tolerance(分档方式):";
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("L" + nNowRow.ToString(), "M" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("F4", "J" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    oWorksheet.get_Range("L4", "M" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    oWorksheet.Cells[nNowRow, 14] = dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Operator Code(操作员代码):";
                    oWorksheet.Cells[nNowRow, 3] = dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                    oWorksheet.Cells[nNowRow, 5] = "QC Approval(检验员):";
                    oWorksheet.Cells[nNowRow, 10] = "Date(日期):";
                    oWorksheet.Cells[nNowRow, 14] = DateTime.Parse(dsVal.Tables[0].Rows[0]["EDIT_TIME"].ToString()).ToString("yyyy-MM-dd");
                    oWorksheet.get_Range("N34", "n" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "M" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "W.O.(工单):";
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    oWorksheet.Cells[nNowRow, 3] = sWO;
                    oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.Cells[nNowRow, 14] = dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "M" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 4.50;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 8.00;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 11.00;
                    oWorksheet.get_Range("N1", "N1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("O1", "O1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("P1", "P1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("Q1", "Q1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("R1", "R1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("A1", "R" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A2", "R" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oWorksheet.get_Range("A1", "A1").Font.Size = 16;
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    return;
                }
            }
        }

        private void btnWestList_Click(object sender, EventArgs e)
        {
            // 定制flash清单。在MES系统中命名为“WEST 清单”。一次打印3份。
            string sPalltNo = txtPalltNo.Text.Trim();
            string sQty = cboQty.Text.Trim();

            WestPrint(sPalltNo, sQty, "3");
        }
        public void WestPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_WestPackge);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();

            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }
        public void prtDoc_WestPackge(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            PrintWestPackge(e.Graphics);

            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }

            if (!string.IsNullOrEmpty(PalletNo))
            {
                string path = Path.Combine(System.Windows.Forms.Application.StartupPath, string.Format(@"WEST\flash清单\{0}-flash data.pdf", PalletNo));//string.Format(@"D:\1.pdf");
                GeneratePdf(path, PrintWestPackge);
            }
        }
        private void PrintWestPackge(Graphics g)
        {
            #region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;
            sPckType = string.Empty;
            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                DataRow[] drPowerLevelHLAB = dvDistinct.Select(" POWERLEVEL LIKE '%HA%' OR POWERLEVEL LIKE '%HB%'OR POWERLEVEL LIKE '%LA%'OR POWERLEVEL LIKE '%LB%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else if (drPowerLevelHLAB.Length > 1)
                    {
                        sPckType = "-M";
                    }

                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            //      功率 2.5W分档系统开发 根据韩苗需求判断是否功率中含有—A、-B   yibin.fei 2017.11.20
            else if (sub_PS_Way == "功率")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelAB = dvDistinct.Select(" POWERLEVEL LIKE '%A%' OR POWERLEVEL LIKE '%B%'");

                // 混托获取子分档
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelAB.Length > 1)
                    {
                        sPckType = "-A/B";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }

                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.LastIndexOf("-"));

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            #endregion

            int printingPageNo = 0;
            string strLine;//用于存放当前行打印的信息　　
            //float leftMargin = (e.MarginBounds.Left) * 3 / 4;　 //左边距
            //float topMargin = e.MarginBounds.Top * 1 / 3;　　　 //顶边距
            //float verticalPosition = topMargin;　　　　　　　　 //初始化垂直位置，设为顶边距
            float verticalPosition;
            System.Drawing.Font mainFont = new System.Drawing.Font("Courier New", 10);	//打印的字体
            System.Drawing.Pen myPen = new System.Drawing.Pen(System.Drawing.Color.Black);//画笔 
            System.Drawing.SolidBrush myBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Red);//画刷 

            //每页的行数，当打印行数超过这个时，要换页(1.05这个值是根据实际情况中设定的，可以不要)
            //int linesPerPage = (int)(e.MarginBounds.Height * 1.05 / mainFont.GetHeight(g));
            g.Clear(Color.White);
            if (printingPageNo == 0) //打印第一页时，需要打印以下头信息
            {
                //画大矩形
                g.DrawRectangle(myPen, new System.Drawing.Rectangle(40 - 20, 10, 750, 1127 - 20));

                #region   左边
                //画左边矩形
                g.DrawRectangle(myPen, new System.Drawing.Rectangle(45 - 20, 15, 300, 120 - 15));

                //产品类型
                string strType = string.Format("WEST{0}{1}-{2}", ProductID.Contains("6610") ? "60" : ProductID.Contains("6612") ? "72" : "",
                                                                ProductID.Substring(8, 1),
                                                                powerLevel);
                strLine = "Type:              " + strType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 20 - 2, new StringFormat());

                //直线
                g.DrawLine(myPen, 45 - 20, 40, 345 - 20, 40);

                //托号
                strLine = "Pallet No.:";
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, 60 - 8, new StringFormat());
                Code128 Code128 = new Code128();
                strLine = Code128.Get128CodeString(PalletNo);
                mainFont = new System.Drawing.Font("Code 128", 26, FontStyle.Regular);
                g.DrawString(strLine, mainFont, Brushes.Black, 130 - 20, 50 - 8, new StringFormat());
                strLine = PalletNo;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Regular);
                g.DrawString(strLine, mainFont, Brushes.Black, 160 - 20, 86 - 8, new StringFormat());

                //直线
                g.DrawLine(myPen, 45 - 20, 105 - 8, 345 - 20, 105 - 8);

                //功率
                #region 体现功率
                string strSAP_NO = dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                string strWorkNumber = dsVal.Tables[0].Rows[0]["WORKNUMBER"].ToString();
                DataSet ds_powershow = IVTestDateObject.GetPowerShowData(strWorkNumber, strSAP_NO);

                DataRow[] drPowerShow = ds_powershow.Tables[0].Select(string.Format("BEFORE_POWER='{0}'", powerLevel));
                if (drPowerShow.Count() > 0 && powerLevel == drPowerShow[0]["BEFORE_POWER"].ToString())
                {
                    powerLevel = drPowerShow[0]["AFTER_POWER"].ToString();
                }
                #endregion
                strLine = "Rated Power:            " + powerLevel + "W" + sPckType;
                mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 110 - 10, new StringFormat());
                #endregion

                string type = string.Empty;
                if (_PrintStyle == "AutoPrint")
                {
                    type = _QuanlityGrade;
                }
                else
                {
                    type = Convert.ToString(this.radioGroup1.EditValue);
                }

                #region    中间

                //画右边矩形和第一行内容
                if (type == "AE") // Q.001 b1
                {
                    g.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 260, 120 - 15));
                    strLine = "W.O.:";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    g.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    g.DrawString(strLine, mainFont, Brushes.Black, 445 - 60, 20 - 2, new StringFormat());
                }
                else
                {
                    g.DrawRectangle(myPen, new System.Drawing.Rectangle(355 - 20, 15, 290, 120 - 15));
                    strLine = "W.O.(工单):";
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    g.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 20 - 2, new StringFormat());
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    strLine = sWO;
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Regular);
                    g.DrawString(strLine, mainFont, Brushes.Black, 445 - 20, 20 - 2, new StringFormat());
                }

                //直线和第二行内容     
                //自动打印清单设置

                if (type == "AE") // Q.001 b2
                {
                    g.DrawLine(myPen, 355 - 20, 40, 645 - 20 - 30, 40);
                    strLine = "Certification:" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    g.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }
                else
                {
                    g.DrawLine(myPen, 355 - 20, 40, 645 - 20, 40);
                    strLine = "Certification(认证):" + dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 12, FontStyle.Bold);
                    g.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 65 - 8, new StringFormat());
                }

                //直线和第三行内容


                if (type == "AE") // Q.001 b3
                {
                    g.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20 - 30, 105 - 8);
                    strLine = "Power Tolerance:" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    g.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }
                else
                {
                    g.DrawLine(myPen, 355 - 20, 105 - 8, 645 - 20, 105 - 8);
                    strLine = "Power Tolerance(分档方式):" + dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    g.DrawString(strLine, mainFont, Brushes.Black, 360 - 20, 110 - 10, new StringFormat());
                }

                #endregion

                #region 右边
                //画最右边的图片
                g.DrawImage(ImageHelper.GetThumbnail(Image.FromFile(Path.Combine(System.Windows.Forms.Application.StartupPath, @"Resource\WEST.jpg")), 0, 70), 650 - 20, 25);

                //图片下面日期
                if (type == "AE")
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    g.DrawString(strLine, mainFont, Brushes.Black, 650 - 20 - 10, 110 - 10, new StringFormat());
                }
                else
                {
                    strLine = "Date:" + ds.Tables[0].Rows[0]["PRODUCT_DATE"].ToString() + dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    mainFont = new System.Drawing.Font("Arial", 11, FontStyle.Bold);
                    g.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, 110 - 10, new StringFormat());
                }

                #endregion

                verticalPosition = 140 - 18;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                strLine = "NO.";
                g.DrawString(strLine, mainFont, Brushes.Black, 50 - 20, verticalPosition, new StringFormat());
                strLine = "S/N";
                g.DrawString(strLine, mainFont, Brushes.Black, 170 - 20, verticalPosition, new StringFormat());
                strLine = "Pmp[W]";
                g.DrawString(strLine, mainFont, Brushes.Black, 310 - 20, verticalPosition, new StringFormat());
                strLine = "Isc[A]";
                g.DrawString(strLine, mainFont, Brushes.Black, 400 - 20, verticalPosition, new StringFormat());
                strLine = "Voc[V]";
                g.DrawString(strLine, mainFont, Brushes.Black, 480 - 20, verticalPosition, new StringFormat());
                strLine = "Imp[A]";
                g.DrawString(strLine, mainFont, Brushes.Black, 570 - 20, verticalPosition, new StringFormat());
                strLine = "Vmp[V]";
                g.DrawString(strLine, mainFont, Brushes.Black, 650 - 20, verticalPosition, new StringFormat());



                //英文版本不显示等级。孙建文20140619要求修改。
                if (type != "E")
                {
                    strLine = "Grade";
                    g.DrawString(strLine, mainFont, Brushes.Black, 730 - 30, verticalPosition, new StringFormat());
                }
                g.DrawLine(myPen, 40 - 20, 160 - 18, 790 - 20, 160 - 18);

                verticalPosition = 147;

                int val = ds.Tables[0].Rows.Count;
                int gap = 30;
                for (int i = 0; i < val; i++)
                {
                    pos = (i + 1).ToString();
                    sn = ds.Tables[0].Rows[i]["LOT_NUMBER"].ToString();
                    pmpp = ds.Tables[0].Rows[i]["PMP"].ToString();
                    isc = ds.Tables[0].Rows[i]["ISC"].ToString();
                    impp = ds.Tables[0].Rows[i]["IMP"].ToString();
                    voc = ds.Tables[0].Rows[i]["VOC"].ToString();
                    vmpp = ds.Tables[0].Rows[i]["VMP"].ToString();

                    if (type == "C")
                    {
                        grade = ds.Tables[0].DefaultView[i]["C_NAME"].ToString().Trim();
                    }
                    else if (type == "E")
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "AE") // Q.001 MODIFY BY QYM FOR ADD 全英文版本 a1
                    {
                        grade = ds.Tables[0].DefaultView[i]["E_NAME"].ToString().Trim();
                        if (grade.Substring(0, 1) == "A")
                        {
                            grade = "A";
                        }
                        else
                        {
                            grade = "R";
                        }
                    }
                    else if (type == "MEMC")
                    {
                        grade = "Ⅰ";
                    }
                    else
                    {
                        grade = "";
                    }
                    //grade = "二级(外观)";

                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Regular);
                    strLine = String.Format("{0,2}", pos);
                    g.DrawString(strLine, mainFont, Brushes.Black, 35, verticalPosition, new StringFormat());
                    strLine = Code128.Get128CodeString(sn);
                    //判断组件块数在 28 到 30 之间的话 缩小条码大小
                    int big = 15;

                    mainFont = new System.Drawing.Font("Code 128", big, FontStyle.Regular);
                    g.DrawString(strLine, mainFont, Brushes.Black, 110, verticalPosition - 4, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 8, FontStyle.Regular);
                    strLine = String.Format("{0,4}", sn);
                    g.DrawString(strLine, mainFont, Brushes.Black, 122, verticalPosition + 15, new StringFormat());
                    mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                    strLine = String.Format("{0,8}", pmpp);
                    g.DrawString(strLine, mainFont, Brushes.Black, 290, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", isc);
                    g.DrawString(strLine, mainFont, Brushes.Black, 370, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", voc);
                    g.DrawString(strLine, mainFont, Brushes.Black, 455, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", impp);
                    g.DrawString(strLine, mainFont, Brushes.Black, 540, verticalPosition, new StringFormat());
                    strLine = String.Format("{0,8}", vmpp);
                    g.DrawString(strLine, mainFont, Brushes.Black, 625, verticalPosition, new StringFormat());
                    //英文版本不显示等级。孙建文20140619要求修改。
                    if (type != "E")
                    {
                        if (grade.Trim().Length >= 4)
                        {
                            strLine = String.Format("{0,4}", grade);
                        }
                        else
                        {
                            strLine = String.Format("{0,8}", grade);
                        }
                        g.DrawString(strLine, mainFont, Brushes.Black, 690, verticalPosition, new StringFormat());
                    }
                    verticalPosition += gap;
                }
                //调整下方边框位置

                //g.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                //g.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20);
                //g.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20);
                //g.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);

                g.DrawLine(myPen, 40 - 20, 1097 - 20, 790 - 20, 1097 - 20);
                g.DrawLine(myPen, 40 - 20, 1117 - 20, 790 - 20, 1117 - 20);
                g.DrawLine(myPen, 290 - 20, 1097 - 20, 290 - 20, 1137 - 20 - 20);//纵向
                g.DrawLine(myPen, 540 - 20, 1097 - 20, 540 - 20, 1137 - 20 - 20);//纵向
                g.DrawLine(myPen, 260 - 20, 1097 - 20 + 20, 260 - 20, 1137 - 20);//纵向
                g.DrawLine(myPen, 437 - 20, 1097 - 20 + 20, 437 - 20, 1137 - 20);//纵向
                g.DrawLine(myPen, 640 - 20, 1097 - 20 + 20, 640 - 20, 1137 - 20);//纵向

                if (type == "AE") // Q.001 b4
                {
                    //strLine = "Total:  " + dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    strLine = "Total:  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }
                else
                {
                    strLine = "Total(合计):  " + Convert.ToString(dsVal.Tables[0].Compute("SUM(PSUM)", null));
                }

                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b5
                {
                    strLine = "MAX:  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                else
                {
                    strLine = "MAX(最大值):  " + Convert.ToString(dsVal.Tables[0].Compute("MAX(PMAX)", null));
                }
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 295 - 20, 1098 - 20, new StringFormat());
                if (type == "AE") // Q.001 b6
                {
                    strLine = "MIN:  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                else
                {
                    strLine = "MIN(最小值):  " + Convert.ToString(dsVal.Tables[0].Compute("MIN(PMIN)", null));
                }
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //g.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                //strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //g.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                //strLine = "QC:";
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //g.DrawString(strLine, mainFont, Brushes.Black, 294 - 20, 1118 - 20, new StringFormat());
                //strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                //mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                //g.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1118 - 20, new StringFormat());


                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 545 - 20, 1098 - 20, new StringFormat());
                strLine = "Operator Code:  " + dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 45 - 20, 1118 - 20, new StringFormat());
                strLine = "QC:";
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 262 - 20, 1118 - 20, new StringFormat());
                strLine = "Junction Box:  " + dsVal.Tables[0].Rows[0]["JUNCTION_BOX"].ToString();
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 439 - 20, 1118 - 20, new StringFormat());
                string strColor = BindColor(_color).Substring(0, 1) == "D" ? "BD" : "B";
                strLine = "Color:  " + strColor;
                mainFont = new System.Drawing.Font("Arial", 10, FontStyle.Bold);
                g.DrawString(strLine, mainFont, Brushes.Black, 642 - 20, 1118 - 20, new StringFormat());
            }
        }

        private DataSet PortMark;
        private void btnWestFlag_Click(object sender, EventArgs e)
        {
            // 货物标识。在MES系统中命名为“WEST 货物标识”。一次打印2份。
            string sPalltNo = txtPalltNo.Text.Trim();
            string sQty = cboQty.Text.Trim();

            WestFlagPrint(sPalltNo, sQty, "2");
        }
        public void WestFlagPrint(string sPalltNo, string sQty, string printCopy)
        {
            _PalletNo = sPalltNo;
            if (string.IsNullOrEmpty(sPalltNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                if (_PrintStyle == "ManualPrint")
                {
                    txtPalltNo.SelectAll();
                    txtPalltNo.Focus();
                }
                return;
            }

            //DataSet dsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PPSMasterdsTable = new DataSet();
            PPSMasterdsTable = IVTestDateObject.GetPPSMasterData(sPalltNo);
            PortMark = IVTestDateObject.GetPortMark(sPalltNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }

            PrintDocument prtDoc = new PrintDocument();
            prtDoc.PrintPage += new PrintPageEventHandler(prtDoc_WestFlag);
            PrintPreviewDialog prtPrvDlg = new PrintPreviewDialog();

            if (_PrintStyle == "ManualPrint")
            {
                prtPrvDlg.Document = prtDoc;
                prtPrvDlg.ShowDialog();
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
            }
            else if (_PrintStyle == "AutoPrint")
            {
                prtDoc.PrinterSettings.Copies = short.Parse(printCopy);
                prtDoc.Print();
            }
        }
        public void prtDoc_WestFlag(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            PrintWestFlag(e.Graphics);

            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }

            if (!string.IsNullOrEmpty(PalletNo))
            {
                string path = Path.Combine(System.Windows.Forms.Application.StartupPath, string.Format(@"WEST\货物标识\{0}-shipping marks.pdf", PalletNo));//string.Format(@"D:\2.pdf");
                GeneratePdf(path, PrintWestFlag);
            }
        }

        private void btnOperation_Click(object sender, EventArgs e)
        {
            if (cbeOperation.Text == "体现功率")
            {
                btnPowerPrint_Click(sender, e);
            }
        }

        private void PrintWestFlag(Graphics g)
        {
            #region
            string ProductID = string.Empty;
            string PalletNo = string.Empty;
            if (_PrintStyle == "AutoPrint")
            {
                PalletNo = _PalletNo;
            }
            else
            {
                PalletNo = txtPalltNo.Text.Trim();
            }
            string SerialNo = string.Empty;
            string ProductionDate = string.Empty;
            string sWO = string.Empty;
            string pos, sn, pmpp, isc, impp, voc, vmpp, grade, sPckType;
            sPckType = string.Empty;
            DataSet ds = PPSMasterdsTable;//IVTestDateObject.GetPPSMasterData(PalletNo);
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (ds.Tables[0].Rows.Count < 1)
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg004}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtPalltNo.SelectAll();
                txtPalltNo.Focus();
                return;
            }

            if (ds.Tables[0].Rows.Count == 0) return;

            if (ds.Tables[0].Rows.Count > 60)
            {
                MessageBox.Show("工艺参数异常，请确认！", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string powerLevel = ds.Tables[0].Rows[0]["POWER"].ToString();
            ProductID = ds.Tables[0].Rows[0]["PRO_ID"].ToString();
            SerialNo = ds.Tables[0].Rows[0]["LOT_NUMBER"].ToString();

            DataSet dsVal = IVTestDateObject.GetPPSCollectData("'" + PalletNo + "'");
            if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
            if (dsVal.Tables[0].Rows.Count <= 0)
            {
                MessageBox.Show(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg005}"), "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //判断是否为电流分档SUB_PS_WAY
            string sub_PS_Way = Convert.ToString(dsVal.Tables[0].Rows[0]["SUB_PS_WAY"]);
            if (sub_PS_Way == "电流")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelI1 = dvDistinct.Select(" POWERLEVEL LIKE '%I%'");
                DataRow[] drPowerLevelY1 = dvDistinct.Select(" POWERLEVEL LIKE '%Y%'");
                DataRow[] drPowerLevelZ1 = dvDistinct.Select(" POWERLEVEL LIKE '%Z%'");
                DataRow[] drPowerLevelJ1 = dvDistinct.Select(" POWERLEVEL LIKE '%J%'");
                DataRow[] drPowerLevelH1 = dvDistinct.Select(" POWERLEVEL LIKE '%H%'");
                DataRow[] drPowerLevelHLAB = dvDistinct.Select(" POWERLEVEL LIKE '%HA%' OR POWERLEVEL LIKE '%HB%'OR POWERLEVEL LIKE '%LA%'OR POWERLEVEL LIKE '%LB%'");
                //DataRow[] drPowerLevelI = null;


                //判断是否电流子分档混托
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelI1.Length > 1)
                    {
                        sPckType = "-I1/I2/I3";
                    }
                    else if (drPowerLevelY1.Length > 1)//20151229修改
                    {
                        sPckType = "-Y0";
                    }
                    else if (drPowerLevelZ1.Length > 1)
                    {
                        sPckType = "-Z0";
                    }
                    else if (drPowerLevelJ1.Length > 1)
                    {
                        sPckType = "-J0";
                    }
                    else if (drPowerLevelHLAB.Length > 1)
                    {
                        sPckType = "-M";
                    }

                    else
                    {
                        if (drPowerLevelH1.Length <= 0)
                        {
                            sPckType = "-L0";
                        }
                        else
                            sPckType = "-H/L";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            //      功率 2.5W分档系统开发 根据韩苗需求判断是否功率中含有—A、-B   yibin.fei 2017.11.20
            else if (sub_PS_Way == "功率")
            {
                System.Data.DataTable dvDistinct = dsVal.Tables[0].DefaultView.ToTable(true, "POWERLEVEL");
                DataRow[] drPowerLevelAB = dvDistinct.Select(" POWERLEVEL LIKE '%A%' OR POWERLEVEL LIKE '%B%'");

                // 混托获取子分档
                if (dvDistinct.Rows.Count > 1)
                {
                    if (drPowerLevelAB.Length > 1)
                    {
                        sPckType = "-A/B";
                    }
                }
                else
                {
                    //非混托获取子分档
                    sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();
                    //sPckType = "260W-H";
                    if (string.IsNullOrEmpty(sPckType))
                    {
                        sPckType = "";
                    }
                    else
                    {
                        string[] str1 = sPckType.Split('-');
                        //sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                        sPckType = "-" + str1[1].ToString();
                    }
                }
            }
            else
            {
                //非电流子分档获取子分档
                sPckType = dsVal.Tables[0].Rows[0]["POWERLEVEL"].ToString().Trim();

                if (string.IsNullOrEmpty(sPckType))
                {
                    sPckType = "";
                }

                else
                {
                    sPckType = sPckType.Substring(sPckType.Length - 2, 2);
                }
            }


            if (powerLevel == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["POWER"].ToString() != "")
                    {
                        powerLevel = ds.Tables[0].Rows[i]["POWER"].ToString();
                        break;
                    }
                }
            }

            if (ProductID == "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["PRO_ID"].ToString() != "")
                    {
                        ProductID = ds.Tables[0].Rows[i]["PRO_ID"].ToString();
                        break;
                    }
                }
            }
            ProductID = ProductID.Substring(0, ProductID.LastIndexOf("-"));

            //判定花色是否混，主要用于金刚线和非金刚线的深和浅的问题
            //金刚线组件：浅花、深花或者混花色（一个单托既有浅花又有深花，则为混花色）。
            //非金刚线组件：浅蓝、深蓝或者混色（一个单托既有浅蓝又有深蓝，则为混色）。
            string _color = GetAndCheckColor(PalletNo);
            #endregion

            string _WestFlag_ProType = string.Format("WEST{0}{1}-{2}", ProductID.Contains("6610") ? "60" : ProductID.Contains("6612") ? "72" : "",
                                                                ProductID.Substring(8, 1),
                                                                powerLevel);
            int _WestFlag_ModuleQty = ds.Tables[0].Rows.Count;
            string _WestFlag_Power = powerLevel + "W" + sPckType;
            string _WestFlag_Color = BindColor(_color).Substring(0, 1) == "D" ? "BD" : "B";

            System.Drawing.Font fontContent = new System.Drawing.Font(new FontFamily("宋体"), 15); ;
            Brush brush = new SolidBrush(Color.Black);
            Pen pen = new Pen(Color.Black);

            g.Clear(Color.White);

            int x = 20;
            int y = 10;
            int width = 750;
            int height = 1107;
            // 矩形
            //g.DrawRectangle(pen, new Rectangle(x, y, width, height));

            #region WEST

            string strPortMark = "";
            if (PortMark != null && PortMark.Tables.Count > 0 && PortMark.Tables[0].Rows.Count > 0)
            {
                strPortMark = PortMark.Tables[0].Rows[0]["PORT_MARK"].ToString();
            }

            Image img = ImageHelper.GetThumbnail(Image.FromFile(Path.Combine(System.Windows.Forms.Application.StartupPath, @"Resource\CT.jpg")), 350, 0);
            g.DrawImage(img, x + (width - img.Width) / 2, 200);

            int lineX = x + 20;
            int lineY = y + 530;
            int rowWidtht = 710;//行宽
            int rowHeight = 45;//行高
            g.DrawRectangle(pen, new System.Drawing.Rectangle(lineX, lineY, rowWidtht, rowHeight * 8));
            g.DrawLine(pen, lineX, lineY + rowHeight, lineX + rowWidtht, lineY + rowHeight);
            g.DrawLine(pen, lineX, lineY + rowHeight * 2, lineX + rowWidtht, lineY + rowHeight * 2);
            g.DrawLine(pen, lineX, lineY + rowHeight * 3, lineX + rowWidtht, lineY + rowHeight * 3);
            g.DrawLine(pen, lineX, lineY + rowHeight * 4, lineX + rowWidtht, lineY + rowHeight * 4);
            g.DrawLine(pen, lineX, lineY + rowHeight * 5, lineX + rowWidtht, lineY + rowHeight * 5);
            g.DrawLine(pen, lineX, lineY + rowHeight * 6, lineX + rowWidtht, lineY + rowHeight * 6);
            g.DrawLine(pen, lineX, lineY + rowHeight * 7, lineX + rowWidtht, lineY + rowHeight * 7);

            string content;
            int contentLeft = 10;
            int contentTop = 10;
            content = string.Format("仕向港(Port Mark)：{0}", strPortMark);
            g.DrawString(content, fontContent, brush, lineX + contentLeft, lineY + contentTop);
            content = string.Format("商品名(Product Name)：{0}", _WestFlag_ProType);
            g.DrawString(content, fontContent, brush, lineX + contentLeft, lineY + contentTop + rowHeight);
            content = string.Format("原産地(Country of Origin)：{0}", "China");
            g.DrawString(content, fontContent, brush, lineX + contentLeft, lineY + contentTop + rowHeight * 2);
            content = string.Format("総重量(Gross Weight)：{0}kg", _WestFlag_ModuleQty == 24 ? 521 : 19 * _WestFlag_ModuleQty + 21 + _WestFlag_ModuleQty / 2 * 4.9);
            g.DrawString(content, fontContent, brush, lineX + contentLeft, lineY + contentTop + rowHeight * 3);
            content = string.Format("純重量(Net Weight)：{0}kg", _WestFlag_ModuleQty == 24 ? 456 : 19 * _WestFlag_ModuleQty);
            g.DrawString(content, fontContent, brush, lineX + contentLeft, lineY + contentTop + rowHeight * 4);
            content = string.Format("容積(Measurement)：{0}*{1}*{2}mm", _WestFlag_ModuleQty == 24 ? 1717 : 1700,
                                                                        _WestFlag_ModuleQty == 24 ? 1147 : 1100,
                                                                        _WestFlag_ModuleQty == 24 ? 1160 : _WestFlag_ModuleQty / 2 * 110 + 140);
            g.DrawString(content, fontContent, brush, lineX + contentLeft, lineY + contentTop + rowHeight * 5);
            content = string.Format("電流値(Current value)：{0}", _WestFlag_Power);
            g.DrawString(content, fontContent, brush, lineX + contentLeft, lineY + contentTop + rowHeight * 6);
            content = string.Format("セル色(Cell Color)：{0}", _WestFlag_Color);
            g.DrawString(content, fontContent, brush, lineX + contentLeft, lineY + contentTop + rowHeight * 7);

            #endregion
        }

        private void GeneratePdf(string filePath, Action<Graphics> print)
        {
            Image bmp = new Bitmap(750 + 20 * 2, 1107 + 10 * 2);
            print(Graphics.FromImage(bmp));
            PdfHelper.CreatePdf(filePath, new List<Image> { bmp });
        }

        private string ShowSaveFileDialog()
        {
            string localFilePath = "";
            //string localFilePath, fileNameExt, newFileName, FilePath; 
            SaveFileDialog sfd = new SaveFileDialog();
            //设置文件类型 
            sfd.Filter = "Excel表格（*.xlsx）|*.xlsx";

            //设置默认文件类型显示顺序 
            sfd.FilterIndex = 1;

            //保存对话框是否记忆上次打开的目录 
            sfd.RestoreDirectory = true;
            DateTime dt = DateTime.Now;
            sfd.FileName = string.Format("{0:MMddHHmmss}", dt);
            //点了保存按钮进入 
            if (sfd.ShowDialog() == DialogResult.OK)
            {
                localFilePath = sfd.FileName.ToString(); //获得文件路径 
                string fileNameExt = localFilePath.Substring(localFilePath.LastIndexOf("\\") + 1); //获取文件名，不带路径

                //获取文件路径，不带文件名 
                //FilePath = localFilePath.Substring(0, localFilePath.LastIndexOf("\\")); 

                //给文件名前加上时间 
                //newFileName = DateTime.Now.ToString("yyyyMMdd") + fileNameExt; 

                //在文件名里加字符 
                //saveFileDialog1.FileName.Insert(1,"dameng"); 

                //System.IO.FileStream fs = (System.IO.FileStream)sfd.OpenFile();//输出文件 

                ////fs输出带文字或图片的文件，就看需求了 
            }

            return localFilePath;
        }

        private void DeliveryExport_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sValue, sWO, sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";
            sPalletNo = memoPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage("托号为空，请确认！", "提示");
                memoPalletNo.SelectAll();
                memoPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            DataSet dsVal = new DataSet();
            dsVal.Clear();
            dsVal = IVTestDateObject.GetFlashDataDelivery(sQPalletNo);

            if (dsVal.Tables[0].Rows.Count > 0)
            {
                try
                {
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }

                    string pathFrom = System.IO.Directory.GetCurrentDirectory() + @"\template\flash_data_ShippingList.xlsx";
                    string pathTo = ShowSaveFileDialog();
                    if (!string.IsNullOrEmpty(pathTo))
                    {
                        int sheetIndex = 0;
                        int rowIndex = 0;
                        int cellIndex = 0;
                        var workbook = ExcelHelper.GetWorkbook(pathFrom);
                        if (workbook == null) return;


                        rowIndex = 0;
                        cellIndex = 1;
                        var sheet = workbook.GetSheetAt(sheetIndex) ?? workbook.CreateSheet();
                        var row = sheet.GetRow(rowIndex) ?? sheet.CreateRow(rowIndex);
                        var cell = row.GetCell(cellIndex) ?? row.CreateCell(cellIndex);
                        cell.SetCellValue(dsVal.Tables[0].Rows[0]["PRO_ID"].ToString() + "-");

                        rowIndex = 1;
                        row = sheet.GetRow(rowIndex) ?? sheet.CreateRow(rowIndex);
                        cell = row.GetCell(cellIndex) ?? row.CreateCell(cellIndex);
                        cell.SetCellValue(string.Format("{0:F}", Convert.ToDouble(dsVal.Tables[0].Compute("AVG(PMPP)", null))));

                        rowIndex = 3;
                        row = sheet.GetRow(rowIndex) ?? sheet.CreateRow(rowIndex);
                        cell = row.GetCell(cellIndex) ?? row.CreateCell(cellIndex);
                        cell.SetCellValue(Convert.ToString(dsVal.Tables[0].Compute("MIN(PMPP)", null)));

                        rowIndex = 4;
                        row = sheet.GetRow(rowIndex) ?? sheet.CreateRow(rowIndex);
                        cell = row.GetCell(cellIndex) ?? row.CreateCell(cellIndex);
                        double SUM_PMP = double.Parse(dsVal.Tables[0].Compute("MAX(PMPP)", "").ToString()) + double.Parse(dsVal.Tables[0].Compute("MIN(PMPP)", "").ToString());
                        cell.SetCellValue(string.Format("{0:F}", SUM_PMP / 2));

                        rowIndex = 5;
                        row = sheet.GetRow(rowIndex) ?? sheet.CreateRow(rowIndex);
                        cell = row.GetCell(cellIndex) ?? row.CreateCell(cellIndex);
                        cell.SetCellValue(Convert.ToString(dsVal.Tables[0].Compute("MAX(PMPP)", null)));

                        rowIndex = 8;
                        cellIndex = 0;
                        int rowCount = dsVal.Tables[0].Rows.Count;
                        int colCount = dsVal.Tables[0].Columns.Count - 2;
                        int colStart = 2;
                        var rowTemplate = sheet.GetRow(8);
                        for (int rowStart = rowIndex; rowIndex < rowStart + rowCount; rowIndex++)
                        {
                            row = sheet.GetRow(rowIndex) ?? sheet.CreateRow(rowIndex);
                            int cellStart = cellIndex;
                            for (; cellIndex < cellStart + colCount; cellIndex++)
                            {
                                cell = row.GetCell(cellIndex) ?? row.CreateCell(cellIndex);
                                if (cell != null)
                                {
                                    if (rowIndex > rowStart)
                                    {
                                        cell.CellStyle = rowTemplate.GetCell(cellIndex).CellStyle;
                                    }
                                    cell.SetCellValue(dsVal.Tables[0].Rows[rowIndex - rowStart][cellIndex + colStart].ToString());
                                }
                            }
                            cellIndex = cellStart;
                        }
                        ExcelHelper.Save(workbook, pathTo);
                        MessageService.ShowMessage("下载完成", "提示");
                    }
                }
                catch (Exception ex)
                {
                    MessageService.ShowMessage(ex.ToString(), "提示");
                    return;
                }
            }
        }

        private void btnSDQuery_Click(object sender, EventArgs e)
        {
            string sQPalletNo;
            string[] sArrPalletNo;
            sQPalletNo = "";

            sPalletNo = txtSDPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtSDPalletNo.SelectAll();
                txtSDPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            dsCommon = new DataSet();
            dsCommon.Clear();
            dsCommon = IVTestDateObject.GetPackingListCommonDataAiji(sQPalletNo);
            dsCommon.Tables[0].Columns.Add("Batch");
            dsCommon.Tables[0].Columns.Add("Container No");
            dsCommon.Tables[0].Columns.Add("EL test");
            dsCommon.Tables[0].Columns.Add("Shipping Date");
            //字段排序
            dsCommon.Tables[0].Columns["NO"].SetOrdinal(0);
            dsCommon.Tables[0].Columns["Batch"].SetOrdinal(1);
            dsCommon.Tables[0].Columns["VIRTUAL_PALLET_NO"].SetOrdinal(2);
            dsCommon.Tables[0].Columns["Container No"].SetOrdinal(3);
            dsCommon.Tables[0].Columns["TYPE"].SetOrdinal(4);
            dsCommon.Tables[0].Columns["SERIALNO"].SetOrdinal(5);
            dsCommon.Tables[0].Columns["PMPP"].SetOrdinal(6);
            dsCommon.Tables[0].Columns["ISC"].SetOrdinal(7);
            dsCommon.Tables[0].Columns["VOC"].SetOrdinal(8);
            dsCommon.Tables[0].Columns["IMPP"].SetOrdinal(9);
            dsCommon.Tables[0].Columns["VMPP"].SetOrdinal(10);
            dsCommon.Tables[0].Columns["PNOM"].SetOrdinal(11);
            dsCommon.Tables[0].Columns["FF"].SetOrdinal(12);
            dsCommon.Tables[0].Columns["EL test"].SetOrdinal(13);
            dsCommon.Tables[0].Columns["GRADE"].SetOrdinal(14);
            dsCommon.Tables[0].Columns["PRODUCT_DATE"].SetOrdinal(15);
            dsCommon.Tables[0].Columns["BOX"].SetOrdinal(16);
            dsCommon.Tables[0].Columns["Shipping Date"].SetOrdinal(17);
            foreach (DataRow dr in dsCommon.Tables[0].Rows)
            {
                dr["EL test"] = "OK";
            }
            if (string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
            {
                gcSD.DataSource = null;
                gcSD.MainView = gvSD;
                gcSD.DataSource = dsCommon.Tables[0];
                gvSD.BestFitColumns();//自动调整列宽度
                gvSD.IndicatorWidth = 50;//自动调整行容器宽度
            }
            else
            {
                MessageService.ShowError(IVTestDateObject.ErrorMsg);
                return;
            }
        }

        private void btnSDExcel_Click(object sender, EventArgs e)
        {
            int nColumn, nRow, nNowRow;
            string sValue, sWO, sQPalletNo;
            string[] sArrPalletNo;
            nNowRow = 1;

            sQPalletNo = "";
            sPalletNo = txtSDPalletNo.Text.Trim();
            if (string.IsNullOrEmpty(sPalletNo))
            {
                MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg001}"), MESSAGEBOX_CAPTION);//托号不能为空，请确认！
                txtSDPalletNo.SelectAll();
                txtSDPalletNo.Focus();
                return;
            }

            sArrPalletNo = sPalletNo.Split('#');
            for (int i = 0; i < sArrPalletNo.Length; i++)
            {
                if (sQPalletNo == "")
                {
                    sQPalletNo = sQPalletNo + "'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
                else
                {
                    sQPalletNo = sQPalletNo + ",'" + sArrPalletNo[i].ToString().Trim() + "'";
                }
            }

            if (gvSD.RowCount > 0)
            {
                try
                {
                    nColumn = gvSD.Columns.Count;
                    nRow = gvSD.RowCount;

                    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
                    oExcel.Visible = false;
                    Microsoft.Office.Interop.Excel.Workbook oWorkbook = oExcel.Workbooks.Add(true);
                    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)oWorkbook.Worksheets[1];
                    //oWorksheet.Name = txtStockNo.Text.Trim();

                    DataSet dsVal = IVTestDateObject.GetPPSCollectData(sQPalletNo);
                    if (!string.IsNullOrEmpty(IVTestDateObject.ErrorMsg))
                    {
                        MessageService.ShowError(IVTestDateObject.ErrorMsg);
                        return;
                    }
                    if (dsVal.Tables[0].Rows.Count < 1)
                    {
                        MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg006}"), MESSAGEBOX_CAPTION);//"工艺设定参数异常，请确认！
                        return;
                    }
                    sValue = dsVal.Tables[0].Rows[0]["PRO_ID"].ToString();
                    sValue = sValue.Substring(0, sValue.IndexOf("-") + 1) + " " + dsVal.Tables[0].Rows[0]["POWER"].ToString();
                    oWorksheet.Cells[nNowRow, 1] = sValue;
                    oWorksheet.get_Range("A1", "A1").Font.Bold = true;
                    oWorksheet.get_Range("A1", "R1").Merge(0);

                    nNowRow++;
                    for (int c = 0; c < nColumn; c++)
                    {
                        oWorksheet.Cells[nNowRow, c + 1] = gvSD.Columns[c].Caption.ToString();
                    }
                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "序号";
                    oWorksheet.Cells[nNowRow, 2] = "批次号";
                    oWorksheet.Cells[nNowRow, 3] = "托盘号";
                    oWorksheet.Cells[nNowRow, 4] = "集装箱号";
                    oWorksheet.Cells[nNowRow, 5] = "型   号";
                    oWorksheet.Cells[nNowRow, 6] = "序 列 号";
                    oWorksheet.Cells[nNowRow, 7] = "实测功率";
                    oWorksheet.Cells[nNowRow, 8] = "短路电流";
                    oWorksheet.Cells[nNowRow, 9] = "开路电压";
                    oWorksheet.Cells[nNowRow, 10] = "工作电流";
                    oWorksheet.Cells[nNowRow, 11] = "工作电压";
                    oWorksheet.Cells[nNowRow, 12] = "功率档";
                    oWorksheet.Cells[nNowRow, 13] = "FF值";
                    oWorksheet.Cells[nNowRow, 14] = "El测试结果";
                    oWorksheet.Cells[nNowRow, 15] = "等级";
                    oWorksheet.Cells[nNowRow, 16] = "生产日期";
                    oWorksheet.Cells[nNowRow, 17] = "接线盒";
                    oWorksheet.Cells[nNowRow, 18] = "出货日期";
                    oWorksheet.get_Range("A2", "R3").Interior.ColorIndex = 48;


                    for (int r = 0; r < nRow; r++)
                    {
                        nNowRow++;
                        for (int c = 0; c < nColumn; c++)
                        {
                            //oWorksheet.Cells[nNowRow, c + 1] = dgCommon.Rows[r].Cells[c].Value;
                            //oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            if (ckImp.Checked == true)
                            {
                                if (c == 7)
                                {
                                    int index = dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().IndexOf("-") + 1;
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString().Trim() + "-" + dsCommon.Tables[0].Rows[r][nColumn].ToString().Trim().Substring(index, 1);
                                }
                                else
                                {
                                    oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                                }
                            }
                            else
                            {
                                oWorksheet.Cells[nNowRow, c + 1] = dsCommon.Tables[0].Rows[r][c].ToString();
                            }
                        }
                    }
                    oWorksheet.get_Range("C4", "C" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("P4", "P" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("R4", "R" + nRow.ToString()).EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("D4", "D" + nRow.ToString()).EntireColumn.NumberFormat = "@";

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Total(合计):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //oWorksheet.Cells[nNowRow, 4] = dsVal.Tables[0].Rows[0]["QTY"].ToString() + " Pcs";
                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PSUM"].ToString();
                    //新增合计------------------------------------------------------------------------
                    int alots = 0;
                    decimal psum = 0;
                    foreach (DataRow drow in dsVal.Tables[0].Rows)
                    {
                        alots += Convert.ToInt16(drow["QTY"]);
                        psum += Convert.ToDecimal(drow["PSUM"]);
                    }
                    oWorksheet.Cells[nNowRow, 6] = Convert.ToSingle(alots) + " Pcs";
                    oWorksheet.Cells[nNowRow, 7] = Convert.ToSingle(Math.Round(psum, 2));
                    //------------------------------------------------------------------------
                    oWorksheet.get_Range("H" + nNowRow.ToString(), "R" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MAX(最大值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "G" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MAX"].ToString();
                    //oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0,3);

                    //新增最大值------------------------------------------------------------------------
                    string PMAX = string.Empty, ISC_MAX = string.Empty, VOC_MAX = string.Empty, IMP_MAX = string.Empty, VMP_MAX = string.Empty, POWER = string.Empty;


                    PMAX = dsVal.Tables[0].Compute("max(PMAX)", null).ToString();
                    ISC_MAX = dsVal.Tables[0].Compute("max(ISC_MAX)", null).ToString();
                    VOC_MAX = dsVal.Tables[0].Compute("max(VOC_MAX)", null).ToString();
                    IMP_MAX = dsVal.Tables[0].Compute("max(IMP_MAX)", null).ToString();
                    VMP_MAX = dsVal.Tables[0].Compute("max(VMP_MAX)", null).ToString();
                    POWER = dsVal.Tables[0].Compute("max(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 7] = PMAX;
                    oWorksheet.Cells[nNowRow, 8] = ISC_MAX;
                    oWorksheet.Cells[nNowRow, 9] = VOC_MAX;
                    oWorksheet.Cells[nNowRow, 10] = IMP_MAX;
                    oWorksheet.Cells[nNowRow, 11] = VMP_MAX;
                    oWorksheet.Cells[nNowRow, 12] = POWER.Substring(0, 3);
                    //end------------------------------------------------------------------------

                    oWorksheet.get_Range("M" + nNowRow.ToString(), "R" + nNowRow.ToString()).Merge(0);

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "MIN(最小值):";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "G" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    //新增最小值------------------------------------------------------------------------
                    string PMIN = string.Empty, ISC_MIN = string.Empty, VOC_MIN = string.Empty, IMP_MIN = string.Empty, VMP_MIN = string.Empty, POWER2 = string.Empty;
                    PMIN = dsVal.Tables[0].Compute("min(PMIN)", null).ToString();
                    ISC_MIN = dsVal.Tables[0].Compute("min(ISC_MIN)", null).ToString();
                    VOC_MIN = dsVal.Tables[0].Compute("min(VOC_MIN)", null).ToString();
                    IMP_MIN = dsVal.Tables[0].Compute("min(IMP_MIN)", null).ToString();
                    VMP_MIN = dsVal.Tables[0].Compute("min(VMP_MIN)", null).ToString();
                    POWER2 = dsVal.Tables[0].Compute("min(POWER)", null).ToString();

                    oWorksheet.Cells[nNowRow, 7] = PMIN;
                    oWorksheet.Cells[nNowRow, 8] = ISC_MIN;
                    oWorksheet.Cells[nNowRow, 9] = VOC_MIN;
                    oWorksheet.Cells[nNowRow, 10] = IMP_MIN;
                    oWorksheet.Cells[nNowRow, 11] = VMP_MIN;
                    oWorksheet.Cells[nNowRow, 12] = POWER2.Substring(0, 3);

                    //end------------------------------------------------------------------------

                    //oWorksheet.Cells[nNowRow, 5] = dsVal.Tables[0].Rows[0]["PMIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 6] = dsVal.Tables[0].Rows[0]["ISC_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["VOC_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 8] = dsVal.Tables[0].Rows[0]["IMP_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 9] = dsVal.Tables[0].Rows[0]["VMP_MIN"].ToString();
                    //oWorksheet.Cells[nNowRow, 10] = (dsVal.Tables[0].Rows[0]["POWER"].ToString()).Substring(0, 3);
                    oWorksheet.Cells[nNowRow, 13] = "Power Tolerance(分档方式):";
                    oWorksheet.get_Range("M" + nNowRow.ToString(), "N" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("M" + nNowRow.ToString(), "N" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G4", "K" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    oWorksheet.get_Range("M4", "M" + nRow.ToString()).EntireColumn.NumberFormat = "###0.00";
                    oWorksheet.Cells[nNowRow, 15] = dsVal.Tables[0].Rows[0]["TOLERANCE"].ToString();

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "Operator Code(操作员代码):";
                    oWorksheet.Cells[nNowRow, 3] = dsVal.Tables[0].Rows[0]["CREATER"].ToString();
                    oWorksheet.Cells[nNowRow, 5] = "QC Approval(检验员):";
                    oWorksheet.Cells[nNowRow, 10] = "Date(日期):";
                    oWorksheet.Cells[nNowRow, 14] = DateTime.Parse(dsVal.Tables[0].Rows[0]["EDIT_TIME"].ToString()).ToString("yyyy-MM-dd");
                    oWorksheet.get_Range("N34", "N34").EntireColumn.NumberFormat = "yyyy-MM-dd";
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "M" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    nNowRow++;
                    oWorksheet.Cells[nNowRow, 1] = "W.O.(工单):";
                    sWO = dsVal.Tables[0].Rows[0]["VIRTUAL_PALLET_NO"].ToString();
                    sWO = sWO.Substring(0, sWO.LastIndexOf("-") + 1) + dsVal.Tables[0].Rows[0]["SAP_NO"].ToString();
                    oWorksheet.Cells[nNowRow, 3] = sWO;
                    oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.Cells[nNowRow, 7] = dsVal.Tables[0].Rows[0]["CERTIFICATION"].ToString();
                    oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.Cells[nNowRow, 14] = dsVal.Tables[0].Rows[0]["SHIFT"].ToString();
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("A" + nNowRow.ToString(), "B" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("C" + nNowRow.ToString(), "D" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 5] = "Certification(认证）：";
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("E" + nNowRow.ToString(), "F" + nNowRow.ToString()).Interior.ColorIndex = 48;
                    oWorksheet.get_Range("G" + nNowRow.ToString(), "I" + nNowRow.ToString()).Merge(0);
                    //oWorksheet.Cells[nNowRow, 10] = "Shift(班别):";
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "M" + nNowRow.ToString()).Merge(0);
                    oWorksheet.get_Range("J" + nNowRow.ToString(), "M" + nNowRow.ToString()).Interior.ColorIndex = 48;

                    oWorksheet.get_Range("A1", "A1").ColumnWidth = 4.50;
                    oWorksheet.get_Range("B1", "B1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("C1", "C1").ColumnWidth = 18.00;
                    oWorksheet.get_Range("D1", "D1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("E1", "E1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("F1", "F1").ColumnWidth = 16.00;
                    oWorksheet.get_Range("G1", "G1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("H1", "H1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("I1", "I1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("J1", "J1").ColumnWidth = 6.50;
                    oWorksheet.get_Range("K1", "K1").ColumnWidth = 8.00;
                    oWorksheet.get_Range("L1", "L1").ColumnWidth = 7.00;
                    oWorksheet.get_Range("M1", "M1").ColumnWidth = 12.00;
                    oWorksheet.get_Range("N1", "N1").ColumnWidth = 10.00;
                    oWorksheet.get_Range("O1", "O1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("P1", "P1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("Q1", "Q1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("R1", "R1").ColumnWidth = 9.00;
                    oWorksheet.get_Range("A1", "R" + nNowRow.ToString()).HorizontalAlignment = XlHAlign.xlHAlignCenter;
                    oWorksheet.Cells.get_Range("A2", "R" + nNowRow.ToString()).Borders.LineStyle = 1;
                    oWorksheet.Cells.Font.Size = 10;
                    oWorksheet.get_Range("A1", "A1").Font.Size = 16;
                    oExcel.Visible = true;
                    oExcel.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    System.GC.Collect();
                }
                catch //(Exception ex)
                {
                    MessageService.ShowMessage(StringParser.Parse("${res:FanHai.Hemera.Addins.WIP.PackingListPrint.Msg007}"), MESSAGEBOX_CAPTION);//创建Excel失败，请确认是否有安装Excel应用程序！
                    return;
                }
            }
        }

        private void panelControl1_Paint(object sender, PaintEventArgs e)
        {

        }
    }
}


